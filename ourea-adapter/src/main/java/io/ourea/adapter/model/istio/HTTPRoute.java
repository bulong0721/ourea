// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: virtual_service.proto

package io.ourea.adapter.model.istio;

/**
 * <pre>
 * Describes match conditions and actions for routing HTTP/1.1, HTTP2, and
 * gRPC traffic. See VirtualService for usage examples.
 * </pre>
 *
 * Protobuf type {@code istio.networking.v1alpha3.HTTPRoute}
 */
public final class HTTPRoute extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:istio.networking.v1alpha3.HTTPRoute)
    HTTPRouteOrBuilder {
private static final long serialVersionUID = 0L;
  // Use HTTPRoute.newBuilder() to construct.
  private HTTPRoute(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private HTTPRoute() {
    name_ = "";
    match_ = java.util.Collections.emptyList();
    route_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new HTTPRoute();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private HTTPRoute(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              match_ = new java.util.ArrayList<io.ourea.adapter.model.istio.HTTPMatchRequest>();
              mutable_bitField0_ |= 0x00000001;
            }
            match_.add(
                input.readMessage(io.ourea.adapter.model.istio.HTTPMatchRequest.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              route_ = new java.util.ArrayList<io.ourea.adapter.model.istio.HTTPRouteDestination>();
              mutable_bitField0_ |= 0x00000002;
            }
            route_.add(
                input.readMessage(io.ourea.adapter.model.istio.HTTPRouteDestination.parser(), extensionRegistry));
            break;
          }
          case 26: {
            io.ourea.adapter.model.istio.HTTPRedirect.Builder subBuilder = null;
            if (redirect_ != null) {
              subBuilder = redirect_.toBuilder();
            }
            redirect_ = input.readMessage(io.ourea.adapter.model.istio.HTTPRedirect.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(redirect_);
              redirect_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            io.ourea.adapter.model.istio.HTTPRewrite.Builder subBuilder = null;
            if (rewrite_ != null) {
              subBuilder = rewrite_.toBuilder();
            }
            rewrite_ = input.readMessage(io.ourea.adapter.model.istio.HTTPRewrite.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(rewrite_);
              rewrite_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (timeout_ != null) {
              subBuilder = timeout_.toBuilder();
            }
            timeout_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(timeout_);
              timeout_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            io.ourea.adapter.model.istio.HTTPRetry.Builder subBuilder = null;
            if (retries_ != null) {
              subBuilder = retries_.toBuilder();
            }
            retries_ = input.readMessage(io.ourea.adapter.model.istio.HTTPRetry.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(retries_);
              retries_ = subBuilder.buildPartial();
            }

            break;
          }
          case 66: {
            io.ourea.adapter.model.istio.HTTPFaultInjection.Builder subBuilder = null;
            if (fault_ != null) {
              subBuilder = fault_.toBuilder();
            }
            fault_ = input.readMessage(io.ourea.adapter.model.istio.HTTPFaultInjection.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(fault_);
              fault_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            io.ourea.adapter.model.istio.Destination.Builder subBuilder = null;
            if (mirror_ != null) {
              subBuilder = mirror_.toBuilder();
            }
            mirror_ = input.readMessage(io.ourea.adapter.model.istio.Destination.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(mirror_);
              mirror_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            io.ourea.adapter.model.istio.CorsPolicy.Builder subBuilder = null;
            if (corsPolicy_ != null) {
              subBuilder = corsPolicy_.toBuilder();
            }
            corsPolicy_ = input.readMessage(io.ourea.adapter.model.istio.CorsPolicy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(corsPolicy_);
              corsPolicy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 130: {
            io.ourea.adapter.model.istio.Headers.Builder subBuilder = null;
            if (headers_ != null) {
              subBuilder = headers_.toBuilder();
            }
            headers_ = input.readMessage(io.ourea.adapter.model.istio.Headers.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(headers_);
              headers_ = subBuilder.buildPartial();
            }

            break;
          }
          case 138: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 146: {
            com.google.protobuf.UInt32Value.Builder subBuilder = null;
            if (mirrorPercent_ != null) {
              subBuilder = mirrorPercent_.toBuilder();
            }
            mirrorPercent_ = input.readMessage(com.google.protobuf.UInt32Value.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(mirrorPercent_);
              mirrorPercent_ = subBuilder.buildPartial();
            }

            break;
          }
          case 154: {
            io.ourea.adapter.model.istio.Percent.Builder subBuilder = null;
            if (mirrorPercentage_ != null) {
              subBuilder = mirrorPercentage_.toBuilder();
            }
            mirrorPercentage_ = input.readMessage(io.ourea.adapter.model.istio.Percent.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(mirrorPercentage_);
              mirrorPercentage_ = subBuilder.buildPartial();
            }

            break;
          }
          case 162: {
            io.ourea.adapter.model.istio.Delegate.Builder subBuilder = null;
            if (delegate_ != null) {
              subBuilder = delegate_.toBuilder();
            }
            delegate_ = input.readMessage(io.ourea.adapter.model.istio.Delegate.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(delegate_);
              delegate_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        match_ = java.util.Collections.unmodifiableList(match_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        route_ = java.util.Collections.unmodifiableList(route_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_HTTPRoute_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_HTTPRoute_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.ourea.adapter.model.istio.HTTPRoute.class, io.ourea.adapter.model.istio.HTTPRoute.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 17;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * The name assigned to the route for debugging purposes. The
   * route's name will be concatenated with the match's name and will
   * be logged in the access logs for requests matching this
   * route/match.
   * </pre>
   *
   * <code>string name = 17;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name assigned to the route for debugging purposes. The
   * route's name will be concatenated with the match's name and will
   * be logged in the access logs for requests matching this
   * route/match.
   * </pre>
   *
   * <code>string name = 17;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MATCH_FIELD_NUMBER = 1;
  private java.util.List<io.ourea.adapter.model.istio.HTTPMatchRequest> match_;
  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  @java.lang.Override
  public java.util.List<io.ourea.adapter.model.istio.HTTPMatchRequest> getMatchList() {
    return match_;
  }
  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.ourea.adapter.model.istio.HTTPMatchRequestOrBuilder> 
      getMatchOrBuilderList() {
    return match_;
  }
  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  @java.lang.Override
  public int getMatchCount() {
    return match_.size();
  }
  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPMatchRequest getMatch(int index) {
    return match_.get(index);
  }
  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPMatchRequestOrBuilder getMatchOrBuilder(
      int index) {
    return match_.get(index);
  }

  public static final int ROUTE_FIELD_NUMBER = 2;
  private java.util.List<io.ourea.adapter.model.istio.HTTPRouteDestination> route_;
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  @java.lang.Override
  public java.util.List<io.ourea.adapter.model.istio.HTTPRouteDestination> getRouteList() {
    return route_;
  }
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.ourea.adapter.model.istio.HTTPRouteDestinationOrBuilder> 
      getRouteOrBuilderList() {
    return route_;
  }
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  @java.lang.Override
  public int getRouteCount() {
    return route_.size();
  }
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRouteDestination getRoute(int index) {
    return route_.get(index);
  }
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRouteDestinationOrBuilder getRouteOrBuilder(
      int index) {
    return route_.get(index);
  }

  public static final int REDIRECT_FIELD_NUMBER = 3;
  private io.ourea.adapter.model.istio.HTTPRedirect redirect_;
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. If
   * traffic passthrough option is specified in the rule,
   * route/redirect will be ignored. The redirect primitive can be used to
   * send a HTTP 301 redirect to a different URI or Authority.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
   * @return Whether the redirect field is set.
   */
  @java.lang.Override
  public boolean hasRedirect() {
    return redirect_ != null;
  }
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. If
   * traffic passthrough option is specified in the rule,
   * route/redirect will be ignored. The redirect primitive can be used to
   * send a HTTP 301 redirect to a different URI or Authority.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
   * @return The redirect.
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRedirect getRedirect() {
    return redirect_ == null ? io.ourea.adapter.model.istio.HTTPRedirect.getDefaultInstance() : redirect_;
  }
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. If
   * traffic passthrough option is specified in the rule,
   * route/redirect will be ignored. The redirect primitive can be used to
   * send a HTTP 301 redirect to a different URI or Authority.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRedirectOrBuilder getRedirectOrBuilder() {
    return getRedirect();
  }

  public static final int DELEGATE_FIELD_NUMBER = 20;
  private io.ourea.adapter.model.istio.Delegate delegate_;
  /**
   * <pre>
   * Delegate is used to specify the particular VirtualService which
   * can be used to define delegate HTTPRoute.
   * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
   * delegate VirtualService will be merged with that in the current one.
   * **NOTE**:
   *    1. Only one level delegation is supported.
   *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
   *       otherwise there is a conflict and the HTTPRoute will not take effect.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
   * @return Whether the delegate field is set.
   */
  @java.lang.Override
  public boolean hasDelegate() {
    return delegate_ != null;
  }
  /**
   * <pre>
   * Delegate is used to specify the particular VirtualService which
   * can be used to define delegate HTTPRoute.
   * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
   * delegate VirtualService will be merged with that in the current one.
   * **NOTE**:
   *    1. Only one level delegation is supported.
   *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
   *       otherwise there is a conflict and the HTTPRoute will not take effect.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
   * @return The delegate.
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.Delegate getDelegate() {
    return delegate_ == null ? io.ourea.adapter.model.istio.Delegate.getDefaultInstance() : delegate_;
  }
  /**
   * <pre>
   * Delegate is used to specify the particular VirtualService which
   * can be used to define delegate HTTPRoute.
   * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
   * delegate VirtualService will be merged with that in the current one.
   * **NOTE**:
   *    1. Only one level delegation is supported.
   *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
   *       otherwise there is a conflict and the HTTPRoute will not take effect.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.DelegateOrBuilder getDelegateOrBuilder() {
    return getDelegate();
  }

  public static final int REWRITE_FIELD_NUMBER = 4;
  private io.ourea.adapter.model.istio.HTTPRewrite rewrite_;
  /**
   * <pre>
   * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
   * Redirect primitive. Rewrite will be performed before forwarding.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
   * @return Whether the rewrite field is set.
   */
  @java.lang.Override
  public boolean hasRewrite() {
    return rewrite_ != null;
  }
  /**
   * <pre>
   * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
   * Redirect primitive. Rewrite will be performed before forwarding.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
   * @return The rewrite.
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRewrite getRewrite() {
    return rewrite_ == null ? io.ourea.adapter.model.istio.HTTPRewrite.getDefaultInstance() : rewrite_;
  }
  /**
   * <pre>
   * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
   * Redirect primitive. Rewrite will be performed before forwarding.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRewriteOrBuilder getRewriteOrBuilder() {
    return getRewrite();
  }

  public static final int TIMEOUT_FIELD_NUMBER = 6;
  private com.google.protobuf.Duration timeout_;
  /**
   * <pre>
   * Timeout for HTTP requests, default is disabled.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 6;</code>
   * @return Whether the timeout field is set.
   */
  @java.lang.Override
  public boolean hasTimeout() {
    return timeout_ != null;
  }
  /**
   * <pre>
   * Timeout for HTTP requests, default is disabled.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 6;</code>
   * @return The timeout.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getTimeout() {
    return timeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : timeout_;
  }
  /**
   * <pre>
   * Timeout for HTTP requests, default is disabled.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder() {
    return getTimeout();
  }

  public static final int RETRIES_FIELD_NUMBER = 7;
  private io.ourea.adapter.model.istio.HTTPRetry retries_;
  /**
   * <pre>
   * Retry policy for HTTP requests.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
   * @return Whether the retries field is set.
   */
  @java.lang.Override
  public boolean hasRetries() {
    return retries_ != null;
  }
  /**
   * <pre>
   * Retry policy for HTTP requests.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
   * @return The retries.
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRetry getRetries() {
    return retries_ == null ? io.ourea.adapter.model.istio.HTTPRetry.getDefaultInstance() : retries_;
  }
  /**
   * <pre>
   * Retry policy for HTTP requests.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRetryOrBuilder getRetriesOrBuilder() {
    return getRetries();
  }

  public static final int FAULT_FIELD_NUMBER = 8;
  private io.ourea.adapter.model.istio.HTTPFaultInjection fault_;
  /**
   * <pre>
   * Fault injection policy to apply on HTTP traffic at the client side.
   * Note that timeouts or retries will not be enabled when faults are
   * enabled on the client side.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
   * @return Whether the fault field is set.
   */
  @java.lang.Override
  public boolean hasFault() {
    return fault_ != null;
  }
  /**
   * <pre>
   * Fault injection policy to apply on HTTP traffic at the client side.
   * Note that timeouts or retries will not be enabled when faults are
   * enabled on the client side.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
   * @return The fault.
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPFaultInjection getFault() {
    return fault_ == null ? io.ourea.adapter.model.istio.HTTPFaultInjection.getDefaultInstance() : fault_;
  }
  /**
   * <pre>
   * Fault injection policy to apply on HTTP traffic at the client side.
   * Note that timeouts or retries will not be enabled when faults are
   * enabled on the client side.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPFaultInjectionOrBuilder getFaultOrBuilder() {
    return getFault();
  }

  public static final int MIRROR_FIELD_NUMBER = 9;
  private io.ourea.adapter.model.istio.Destination mirror_;
  /**
   * <pre>
   * Mirror HTTP traffic to a another destination in addition to forwarding
   * the requests to the intended destination. Mirrored traffic is on a
   * best effort basis where the sidecar/gateway will not wait for the
   * mirrored cluster to respond before returning the response from the
   * original destination.  Statistics will be generated for the mirrored
   * destination.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
   * @return Whether the mirror field is set.
   */
  @java.lang.Override
  public boolean hasMirror() {
    return mirror_ != null;
  }
  /**
   * <pre>
   * Mirror HTTP traffic to a another destination in addition to forwarding
   * the requests to the intended destination. Mirrored traffic is on a
   * best effort basis where the sidecar/gateway will not wait for the
   * mirrored cluster to respond before returning the response from the
   * original destination.  Statistics will be generated for the mirrored
   * destination.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
   * @return The mirror.
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.Destination getMirror() {
    return mirror_ == null ? io.ourea.adapter.model.istio.Destination.getDefaultInstance() : mirror_;
  }
  /**
   * <pre>
   * Mirror HTTP traffic to a another destination in addition to forwarding
   * the requests to the intended destination. Mirrored traffic is on a
   * best effort basis where the sidecar/gateway will not wait for the
   * mirrored cluster to respond before returning the response from the
   * original destination.  Statistics will be generated for the mirrored
   * destination.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.DestinationOrBuilder getMirrorOrBuilder() {
    return getMirror();
  }

  public static final int MIRROR_PERCENT_FIELD_NUMBER = 18;
  private com.google.protobuf.UInt32Value mirrorPercent_;
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * Use of integer `mirror_percent` value is deprecated. Use the
   * double `mirror_percentage` field instead
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
   * @return Whether the mirrorPercent field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasMirrorPercent() {
    return mirrorPercent_ != null;
  }
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * Use of integer `mirror_percent` value is deprecated. Use the
   * double `mirror_percentage` field instead
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
   * @return The mirrorPercent.
   */
  @java.lang.Override
  @java.lang.Deprecated public com.google.protobuf.UInt32Value getMirrorPercent() {
    return mirrorPercent_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : mirrorPercent_;
  }
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * Use of integer `mirror_percent` value is deprecated. Use the
   * double `mirror_percentage` field instead
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public com.google.protobuf.UInt32ValueOrBuilder getMirrorPercentOrBuilder() {
    return getMirrorPercent();
  }

  public static final int MIRROR_PERCENTAGE_FIELD_NUMBER = 19;
  private io.ourea.adapter.model.istio.Percent mirrorPercentage_;
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * If this field is absent, all the traffic (100%) will be mirrored.
   * Max value is 100.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
   * @return Whether the mirrorPercentage field is set.
   */
  @java.lang.Override
  public boolean hasMirrorPercentage() {
    return mirrorPercentage_ != null;
  }
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * If this field is absent, all the traffic (100%) will be mirrored.
   * Max value is 100.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
   * @return The mirrorPercentage.
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.Percent getMirrorPercentage() {
    return mirrorPercentage_ == null ? io.ourea.adapter.model.istio.Percent.getDefaultInstance() : mirrorPercentage_;
  }
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * If this field is absent, all the traffic (100%) will be mirrored.
   * Max value is 100.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.PercentOrBuilder getMirrorPercentageOrBuilder() {
    return getMirrorPercentage();
  }

  public static final int CORS_POLICY_FIELD_NUMBER = 10;
  private io.ourea.adapter.model.istio.CorsPolicy corsPolicy_;
  /**
   * <pre>
   * Cross-Origin Resource Sharing policy (CORS). Refer to
   * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
   * for further details about cross origin resource sharing.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
   * @return Whether the corsPolicy field is set.
   */
  @java.lang.Override
  public boolean hasCorsPolicy() {
    return corsPolicy_ != null;
  }
  /**
   * <pre>
   * Cross-Origin Resource Sharing policy (CORS). Refer to
   * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
   * for further details about cross origin resource sharing.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
   * @return The corsPolicy.
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.CorsPolicy getCorsPolicy() {
    return corsPolicy_ == null ? io.ourea.adapter.model.istio.CorsPolicy.getDefaultInstance() : corsPolicy_;
  }
  /**
   * <pre>
   * Cross-Origin Resource Sharing policy (CORS). Refer to
   * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
   * for further details about cross origin resource sharing.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.CorsPolicyOrBuilder getCorsPolicyOrBuilder() {
    return getCorsPolicy();
  }

  public static final int HEADERS_FIELD_NUMBER = 16;
  private io.ourea.adapter.model.istio.Headers headers_;
  /**
   * <pre>
   * Header manipulation rules
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
   * @return Whether the headers field is set.
   */
  @java.lang.Override
  public boolean hasHeaders() {
    return headers_ != null;
  }
  /**
   * <pre>
   * Header manipulation rules
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
   * @return The headers.
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.Headers getHeaders() {
    return headers_ == null ? io.ourea.adapter.model.istio.Headers.getDefaultInstance() : headers_;
  }
  /**
   * <pre>
   * Header manipulation rules
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HeadersOrBuilder getHeadersOrBuilder() {
    return getHeaders();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < match_.size(); i++) {
      output.writeMessage(1, match_.get(i));
    }
    for (int i = 0; i < route_.size(); i++) {
      output.writeMessage(2, route_.get(i));
    }
    if (redirect_ != null) {
      output.writeMessage(3, getRedirect());
    }
    if (rewrite_ != null) {
      output.writeMessage(4, getRewrite());
    }
    if (timeout_ != null) {
      output.writeMessage(6, getTimeout());
    }
    if (retries_ != null) {
      output.writeMessage(7, getRetries());
    }
    if (fault_ != null) {
      output.writeMessage(8, getFault());
    }
    if (mirror_ != null) {
      output.writeMessage(9, getMirror());
    }
    if (corsPolicy_ != null) {
      output.writeMessage(10, getCorsPolicy());
    }
    if (headers_ != null) {
      output.writeMessage(16, getHeaders());
    }
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 17, name_);
    }
    if (mirrorPercent_ != null) {
      output.writeMessage(18, getMirrorPercent());
    }
    if (mirrorPercentage_ != null) {
      output.writeMessage(19, getMirrorPercentage());
    }
    if (delegate_ != null) {
      output.writeMessage(20, getDelegate());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < match_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, match_.get(i));
    }
    for (int i = 0; i < route_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, route_.get(i));
    }
    if (redirect_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getRedirect());
    }
    if (rewrite_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getRewrite());
    }
    if (timeout_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getTimeout());
    }
    if (retries_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getRetries());
    }
    if (fault_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getFault());
    }
    if (mirror_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getMirror());
    }
    if (corsPolicy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getCorsPolicy());
    }
    if (headers_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, getHeaders());
    }
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(17, name_);
    }
    if (mirrorPercent_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, getMirrorPercent());
    }
    if (mirrorPercentage_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, getMirrorPercentage());
    }
    if (delegate_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, getDelegate());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.ourea.adapter.model.istio.HTTPRoute)) {
      return super.equals(obj);
    }
    io.ourea.adapter.model.istio.HTTPRoute other = (io.ourea.adapter.model.istio.HTTPRoute) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (!getMatchList()
        .equals(other.getMatchList())) return false;
    if (!getRouteList()
        .equals(other.getRouteList())) return false;
    if (hasRedirect() != other.hasRedirect()) return false;
    if (hasRedirect()) {
      if (!getRedirect()
          .equals(other.getRedirect())) return false;
    }
    if (hasDelegate() != other.hasDelegate()) return false;
    if (hasDelegate()) {
      if (!getDelegate()
          .equals(other.getDelegate())) return false;
    }
    if (hasRewrite() != other.hasRewrite()) return false;
    if (hasRewrite()) {
      if (!getRewrite()
          .equals(other.getRewrite())) return false;
    }
    if (hasTimeout() != other.hasTimeout()) return false;
    if (hasTimeout()) {
      if (!getTimeout()
          .equals(other.getTimeout())) return false;
    }
    if (hasRetries() != other.hasRetries()) return false;
    if (hasRetries()) {
      if (!getRetries()
          .equals(other.getRetries())) return false;
    }
    if (hasFault() != other.hasFault()) return false;
    if (hasFault()) {
      if (!getFault()
          .equals(other.getFault())) return false;
    }
    if (hasMirror() != other.hasMirror()) return false;
    if (hasMirror()) {
      if (!getMirror()
          .equals(other.getMirror())) return false;
    }
    if (hasMirrorPercent() != other.hasMirrorPercent()) return false;
    if (hasMirrorPercent()) {
      if (!getMirrorPercent()
          .equals(other.getMirrorPercent())) return false;
    }
    if (hasMirrorPercentage() != other.hasMirrorPercentage()) return false;
    if (hasMirrorPercentage()) {
      if (!getMirrorPercentage()
          .equals(other.getMirrorPercentage())) return false;
    }
    if (hasCorsPolicy() != other.hasCorsPolicy()) return false;
    if (hasCorsPolicy()) {
      if (!getCorsPolicy()
          .equals(other.getCorsPolicy())) return false;
    }
    if (hasHeaders() != other.hasHeaders()) return false;
    if (hasHeaders()) {
      if (!getHeaders()
          .equals(other.getHeaders())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    if (getMatchCount() > 0) {
      hash = (37 * hash) + MATCH_FIELD_NUMBER;
      hash = (53 * hash) + getMatchList().hashCode();
    }
    if (getRouteCount() > 0) {
      hash = (37 * hash) + ROUTE_FIELD_NUMBER;
      hash = (53 * hash) + getRouteList().hashCode();
    }
    if (hasRedirect()) {
      hash = (37 * hash) + REDIRECT_FIELD_NUMBER;
      hash = (53 * hash) + getRedirect().hashCode();
    }
    if (hasDelegate()) {
      hash = (37 * hash) + DELEGATE_FIELD_NUMBER;
      hash = (53 * hash) + getDelegate().hashCode();
    }
    if (hasRewrite()) {
      hash = (37 * hash) + REWRITE_FIELD_NUMBER;
      hash = (53 * hash) + getRewrite().hashCode();
    }
    if (hasTimeout()) {
      hash = (37 * hash) + TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getTimeout().hashCode();
    }
    if (hasRetries()) {
      hash = (37 * hash) + RETRIES_FIELD_NUMBER;
      hash = (53 * hash) + getRetries().hashCode();
    }
    if (hasFault()) {
      hash = (37 * hash) + FAULT_FIELD_NUMBER;
      hash = (53 * hash) + getFault().hashCode();
    }
    if (hasMirror()) {
      hash = (37 * hash) + MIRROR_FIELD_NUMBER;
      hash = (53 * hash) + getMirror().hashCode();
    }
    if (hasMirrorPercent()) {
      hash = (37 * hash) + MIRROR_PERCENT_FIELD_NUMBER;
      hash = (53 * hash) + getMirrorPercent().hashCode();
    }
    if (hasMirrorPercentage()) {
      hash = (37 * hash) + MIRROR_PERCENTAGE_FIELD_NUMBER;
      hash = (53 * hash) + getMirrorPercentage().hashCode();
    }
    if (hasCorsPolicy()) {
      hash = (37 * hash) + CORS_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getCorsPolicy().hashCode();
    }
    if (hasHeaders()) {
      hash = (37 * hash) + HEADERS_FIELD_NUMBER;
      hash = (53 * hash) + getHeaders().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.HTTPRoute parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.ourea.adapter.model.istio.HTTPRoute prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Describes match conditions and actions for routing HTTP/1.1, HTTP2, and
   * gRPC traffic. See VirtualService for usage examples.
   * </pre>
   *
   * Protobuf type {@code istio.networking.v1alpha3.HTTPRoute}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:istio.networking.v1alpha3.HTTPRoute)
      io.ourea.adapter.model.istio.HTTPRouteOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_HTTPRoute_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_HTTPRoute_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.ourea.adapter.model.istio.HTTPRoute.class, io.ourea.adapter.model.istio.HTTPRoute.Builder.class);
    }

    // Construct using io.ourea.adapter.model.istio.HTTPRoute.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getMatchFieldBuilder();
        getRouteFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      if (matchBuilder_ == null) {
        match_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        matchBuilder_.clear();
      }
      if (routeBuilder_ == null) {
        route_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        routeBuilder_.clear();
      }
      if (redirectBuilder_ == null) {
        redirect_ = null;
      } else {
        redirect_ = null;
        redirectBuilder_ = null;
      }
      if (delegateBuilder_ == null) {
        delegate_ = null;
      } else {
        delegate_ = null;
        delegateBuilder_ = null;
      }
      if (rewriteBuilder_ == null) {
        rewrite_ = null;
      } else {
        rewrite_ = null;
        rewriteBuilder_ = null;
      }
      if (timeoutBuilder_ == null) {
        timeout_ = null;
      } else {
        timeout_ = null;
        timeoutBuilder_ = null;
      }
      if (retriesBuilder_ == null) {
        retries_ = null;
      } else {
        retries_ = null;
        retriesBuilder_ = null;
      }
      if (faultBuilder_ == null) {
        fault_ = null;
      } else {
        fault_ = null;
        faultBuilder_ = null;
      }
      if (mirrorBuilder_ == null) {
        mirror_ = null;
      } else {
        mirror_ = null;
        mirrorBuilder_ = null;
      }
      if (mirrorPercentBuilder_ == null) {
        mirrorPercent_ = null;
      } else {
        mirrorPercent_ = null;
        mirrorPercentBuilder_ = null;
      }
      if (mirrorPercentageBuilder_ == null) {
        mirrorPercentage_ = null;
      } else {
        mirrorPercentage_ = null;
        mirrorPercentageBuilder_ = null;
      }
      if (corsPolicyBuilder_ == null) {
        corsPolicy_ = null;
      } else {
        corsPolicy_ = null;
        corsPolicyBuilder_ = null;
      }
      if (headersBuilder_ == null) {
        headers_ = null;
      } else {
        headers_ = null;
        headersBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_HTTPRoute_descriptor;
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.HTTPRoute getDefaultInstanceForType() {
      return io.ourea.adapter.model.istio.HTTPRoute.getDefaultInstance();
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.HTTPRoute build() {
      io.ourea.adapter.model.istio.HTTPRoute result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.HTTPRoute buildPartial() {
      io.ourea.adapter.model.istio.HTTPRoute result = new io.ourea.adapter.model.istio.HTTPRoute(this);
      int from_bitField0_ = bitField0_;
      result.name_ = name_;
      if (matchBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          match_ = java.util.Collections.unmodifiableList(match_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.match_ = match_;
      } else {
        result.match_ = matchBuilder_.build();
      }
      if (routeBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          route_ = java.util.Collections.unmodifiableList(route_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.route_ = route_;
      } else {
        result.route_ = routeBuilder_.build();
      }
      if (redirectBuilder_ == null) {
        result.redirect_ = redirect_;
      } else {
        result.redirect_ = redirectBuilder_.build();
      }
      if (delegateBuilder_ == null) {
        result.delegate_ = delegate_;
      } else {
        result.delegate_ = delegateBuilder_.build();
      }
      if (rewriteBuilder_ == null) {
        result.rewrite_ = rewrite_;
      } else {
        result.rewrite_ = rewriteBuilder_.build();
      }
      if (timeoutBuilder_ == null) {
        result.timeout_ = timeout_;
      } else {
        result.timeout_ = timeoutBuilder_.build();
      }
      if (retriesBuilder_ == null) {
        result.retries_ = retries_;
      } else {
        result.retries_ = retriesBuilder_.build();
      }
      if (faultBuilder_ == null) {
        result.fault_ = fault_;
      } else {
        result.fault_ = faultBuilder_.build();
      }
      if (mirrorBuilder_ == null) {
        result.mirror_ = mirror_;
      } else {
        result.mirror_ = mirrorBuilder_.build();
      }
      if (mirrorPercentBuilder_ == null) {
        result.mirrorPercent_ = mirrorPercent_;
      } else {
        result.mirrorPercent_ = mirrorPercentBuilder_.build();
      }
      if (mirrorPercentageBuilder_ == null) {
        result.mirrorPercentage_ = mirrorPercentage_;
      } else {
        result.mirrorPercentage_ = mirrorPercentageBuilder_.build();
      }
      if (corsPolicyBuilder_ == null) {
        result.corsPolicy_ = corsPolicy_;
      } else {
        result.corsPolicy_ = corsPolicyBuilder_.build();
      }
      if (headersBuilder_ == null) {
        result.headers_ = headers_;
      } else {
        result.headers_ = headersBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.ourea.adapter.model.istio.HTTPRoute) {
        return mergeFrom((io.ourea.adapter.model.istio.HTTPRoute)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.ourea.adapter.model.istio.HTTPRoute other) {
      if (other == io.ourea.adapter.model.istio.HTTPRoute.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (matchBuilder_ == null) {
        if (!other.match_.isEmpty()) {
          if (match_.isEmpty()) {
            match_ = other.match_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureMatchIsMutable();
            match_.addAll(other.match_);
          }
          onChanged();
        }
      } else {
        if (!other.match_.isEmpty()) {
          if (matchBuilder_.isEmpty()) {
            matchBuilder_.dispose();
            matchBuilder_ = null;
            match_ = other.match_;
            bitField0_ = (bitField0_ & ~0x00000001);
            matchBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getMatchFieldBuilder() : null;
          } else {
            matchBuilder_.addAllMessages(other.match_);
          }
        }
      }
      if (routeBuilder_ == null) {
        if (!other.route_.isEmpty()) {
          if (route_.isEmpty()) {
            route_ = other.route_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRouteIsMutable();
            route_.addAll(other.route_);
          }
          onChanged();
        }
      } else {
        if (!other.route_.isEmpty()) {
          if (routeBuilder_.isEmpty()) {
            routeBuilder_.dispose();
            routeBuilder_ = null;
            route_ = other.route_;
            bitField0_ = (bitField0_ & ~0x00000002);
            routeBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getRouteFieldBuilder() : null;
          } else {
            routeBuilder_.addAllMessages(other.route_);
          }
        }
      }
      if (other.hasRedirect()) {
        mergeRedirect(other.getRedirect());
      }
      if (other.hasDelegate()) {
        mergeDelegate(other.getDelegate());
      }
      if (other.hasRewrite()) {
        mergeRewrite(other.getRewrite());
      }
      if (other.hasTimeout()) {
        mergeTimeout(other.getTimeout());
      }
      if (other.hasRetries()) {
        mergeRetries(other.getRetries());
      }
      if (other.hasFault()) {
        mergeFault(other.getFault());
      }
      if (other.hasMirror()) {
        mergeMirror(other.getMirror());
      }
      if (other.hasMirrorPercent()) {
        mergeMirrorPercent(other.getMirrorPercent());
      }
      if (other.hasMirrorPercentage()) {
        mergeMirrorPercentage(other.getMirrorPercentage());
      }
      if (other.hasCorsPolicy()) {
        mergeCorsPolicy(other.getCorsPolicy());
      }
      if (other.hasHeaders()) {
        mergeHeaders(other.getHeaders());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.ourea.adapter.model.istio.HTTPRoute parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.ourea.adapter.model.istio.HTTPRoute) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The name assigned to the route for debugging purposes. The
     * route's name will be concatenated with the match's name and will
     * be logged in the access logs for requests matching this
     * route/match.
     * </pre>
     *
     * <code>string name = 17;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name assigned to the route for debugging purposes. The
     * route's name will be concatenated with the match's name and will
     * be logged in the access logs for requests matching this
     * route/match.
     * </pre>
     *
     * <code>string name = 17;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name assigned to the route for debugging purposes. The
     * route's name will be concatenated with the match's name and will
     * be logged in the access logs for requests matching this
     * route/match.
     * </pre>
     *
     * <code>string name = 17;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name assigned to the route for debugging purposes. The
     * route's name will be concatenated with the match's name and will
     * be logged in the access logs for requests matching this
     * route/match.
     * </pre>
     *
     * <code>string name = 17;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name assigned to the route for debugging purposes. The
     * route's name will be concatenated with the match's name and will
     * be logged in the access logs for requests matching this
     * route/match.
     * </pre>
     *
     * <code>string name = 17;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.util.List<io.ourea.adapter.model.istio.HTTPMatchRequest> match_ =
      java.util.Collections.emptyList();
    private void ensureMatchIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        match_ = new java.util.ArrayList<io.ourea.adapter.model.istio.HTTPMatchRequest>(match_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPMatchRequest, io.ourea.adapter.model.istio.HTTPMatchRequest.Builder, io.ourea.adapter.model.istio.HTTPMatchRequestOrBuilder> matchBuilder_;

    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.HTTPMatchRequest> getMatchList() {
      if (matchBuilder_ == null) {
        return java.util.Collections.unmodifiableList(match_);
      } else {
        return matchBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public int getMatchCount() {
      if (matchBuilder_ == null) {
        return match_.size();
      } else {
        return matchBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public io.ourea.adapter.model.istio.HTTPMatchRequest getMatch(int index) {
      if (matchBuilder_ == null) {
        return match_.get(index);
      } else {
        return matchBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public Builder setMatch(
        int index, io.ourea.adapter.model.istio.HTTPMatchRequest value) {
      if (matchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMatchIsMutable();
        match_.set(index, value);
        onChanged();
      } else {
        matchBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public Builder setMatch(
        int index, io.ourea.adapter.model.istio.HTTPMatchRequest.Builder builderForValue) {
      if (matchBuilder_ == null) {
        ensureMatchIsMutable();
        match_.set(index, builderForValue.build());
        onChanged();
      } else {
        matchBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public Builder addMatch(io.ourea.adapter.model.istio.HTTPMatchRequest value) {
      if (matchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMatchIsMutable();
        match_.add(value);
        onChanged();
      } else {
        matchBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public Builder addMatch(
        int index, io.ourea.adapter.model.istio.HTTPMatchRequest value) {
      if (matchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMatchIsMutable();
        match_.add(index, value);
        onChanged();
      } else {
        matchBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public Builder addMatch(
        io.ourea.adapter.model.istio.HTTPMatchRequest.Builder builderForValue) {
      if (matchBuilder_ == null) {
        ensureMatchIsMutable();
        match_.add(builderForValue.build());
        onChanged();
      } else {
        matchBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public Builder addMatch(
        int index, io.ourea.adapter.model.istio.HTTPMatchRequest.Builder builderForValue) {
      if (matchBuilder_ == null) {
        ensureMatchIsMutable();
        match_.add(index, builderForValue.build());
        onChanged();
      } else {
        matchBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public Builder addAllMatch(
        java.lang.Iterable<? extends io.ourea.adapter.model.istio.HTTPMatchRequest> values) {
      if (matchBuilder_ == null) {
        ensureMatchIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, match_);
        onChanged();
      } else {
        matchBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public Builder clearMatch() {
      if (matchBuilder_ == null) {
        match_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        matchBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public Builder removeMatch(int index) {
      if (matchBuilder_ == null) {
        ensureMatchIsMutable();
        match_.remove(index);
        onChanged();
      } else {
        matchBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public io.ourea.adapter.model.istio.HTTPMatchRequest.Builder getMatchBuilder(
        int index) {
      return getMatchFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public io.ourea.adapter.model.istio.HTTPMatchRequestOrBuilder getMatchOrBuilder(
        int index) {
      if (matchBuilder_ == null) {
        return match_.get(index);  } else {
        return matchBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public java.util.List<? extends io.ourea.adapter.model.istio.HTTPMatchRequestOrBuilder> 
         getMatchOrBuilderList() {
      if (matchBuilder_ != null) {
        return matchBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(match_);
      }
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public io.ourea.adapter.model.istio.HTTPMatchRequest.Builder addMatchBuilder() {
      return getMatchFieldBuilder().addBuilder(
          io.ourea.adapter.model.istio.HTTPMatchRequest.getDefaultInstance());
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public io.ourea.adapter.model.istio.HTTPMatchRequest.Builder addMatchBuilder(
        int index) {
      return getMatchFieldBuilder().addBuilder(
          index, io.ourea.adapter.model.istio.HTTPMatchRequest.getDefaultInstance());
    }
    /**
     * <pre>
     * Match conditions to be satisfied for the rule to be
     * activated. All conditions inside a single match block have AND
     * semantics, while the list of match blocks have OR semantics. The rule
     * is matched if any one of the match blocks succeed.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.HTTPMatchRequest.Builder> 
         getMatchBuilderList() {
      return getMatchFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPMatchRequest, io.ourea.adapter.model.istio.HTTPMatchRequest.Builder, io.ourea.adapter.model.istio.HTTPMatchRequestOrBuilder> 
        getMatchFieldBuilder() {
      if (matchBuilder_ == null) {
        matchBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.ourea.adapter.model.istio.HTTPMatchRequest, io.ourea.adapter.model.istio.HTTPMatchRequest.Builder, io.ourea.adapter.model.istio.HTTPMatchRequestOrBuilder>(
                match_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        match_ = null;
      }
      return matchBuilder_;
    }

    private java.util.List<io.ourea.adapter.model.istio.HTTPRouteDestination> route_ =
      java.util.Collections.emptyList();
    private void ensureRouteIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        route_ = new java.util.ArrayList<io.ourea.adapter.model.istio.HTTPRouteDestination>(route_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRouteDestination, io.ourea.adapter.model.istio.HTTPRouteDestination.Builder, io.ourea.adapter.model.istio.HTTPRouteDestinationOrBuilder> routeBuilder_;

    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.HTTPRouteDestination> getRouteList() {
      if (routeBuilder_ == null) {
        return java.util.Collections.unmodifiableList(route_);
      } else {
        return routeBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public int getRouteCount() {
      if (routeBuilder_ == null) {
        return route_.size();
      } else {
        return routeBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRouteDestination getRoute(int index) {
      if (routeBuilder_ == null) {
        return route_.get(index);
      } else {
        return routeBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public Builder setRoute(
        int index, io.ourea.adapter.model.istio.HTTPRouteDestination value) {
      if (routeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRouteIsMutable();
        route_.set(index, value);
        onChanged();
      } else {
        routeBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public Builder setRoute(
        int index, io.ourea.adapter.model.istio.HTTPRouteDestination.Builder builderForValue) {
      if (routeBuilder_ == null) {
        ensureRouteIsMutable();
        route_.set(index, builderForValue.build());
        onChanged();
      } else {
        routeBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public Builder addRoute(io.ourea.adapter.model.istio.HTTPRouteDestination value) {
      if (routeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRouteIsMutable();
        route_.add(value);
        onChanged();
      } else {
        routeBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public Builder addRoute(
        int index, io.ourea.adapter.model.istio.HTTPRouteDestination value) {
      if (routeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRouteIsMutable();
        route_.add(index, value);
        onChanged();
      } else {
        routeBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public Builder addRoute(
        io.ourea.adapter.model.istio.HTTPRouteDestination.Builder builderForValue) {
      if (routeBuilder_ == null) {
        ensureRouteIsMutable();
        route_.add(builderForValue.build());
        onChanged();
      } else {
        routeBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public Builder addRoute(
        int index, io.ourea.adapter.model.istio.HTTPRouteDestination.Builder builderForValue) {
      if (routeBuilder_ == null) {
        ensureRouteIsMutable();
        route_.add(index, builderForValue.build());
        onChanged();
      } else {
        routeBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public Builder addAllRoute(
        java.lang.Iterable<? extends io.ourea.adapter.model.istio.HTTPRouteDestination> values) {
      if (routeBuilder_ == null) {
        ensureRouteIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, route_);
        onChanged();
      } else {
        routeBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public Builder clearRoute() {
      if (routeBuilder_ == null) {
        route_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        routeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public Builder removeRoute(int index) {
      if (routeBuilder_ == null) {
        ensureRouteIsMutable();
        route_.remove(index);
        onChanged();
      } else {
        routeBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRouteDestination.Builder getRouteBuilder(
        int index) {
      return getRouteFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRouteDestinationOrBuilder getRouteOrBuilder(
        int index) {
      if (routeBuilder_ == null) {
        return route_.get(index);  } else {
        return routeBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public java.util.List<? extends io.ourea.adapter.model.istio.HTTPRouteDestinationOrBuilder> 
         getRouteOrBuilderList() {
      if (routeBuilder_ != null) {
        return routeBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(route_);
      }
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRouteDestination.Builder addRouteBuilder() {
      return getRouteFieldBuilder().addBuilder(
          io.ourea.adapter.model.istio.HTTPRouteDestination.getDefaultInstance());
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRouteDestination.Builder addRouteBuilder(
        int index) {
      return getRouteFieldBuilder().addBuilder(
          index, io.ourea.adapter.model.istio.HTTPRouteDestination.getDefaultInstance());
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. The
     * forwarding target can be one of several versions of a service (see
     * glossary in beginning of document). Weights associated with the
     * service version determine the proportion of traffic it receives.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.HTTPRouteDestination.Builder> 
         getRouteBuilderList() {
      return getRouteFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRouteDestination, io.ourea.adapter.model.istio.HTTPRouteDestination.Builder, io.ourea.adapter.model.istio.HTTPRouteDestinationOrBuilder> 
        getRouteFieldBuilder() {
      if (routeBuilder_ == null) {
        routeBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.ourea.adapter.model.istio.HTTPRouteDestination, io.ourea.adapter.model.istio.HTTPRouteDestination.Builder, io.ourea.adapter.model.istio.HTTPRouteDestinationOrBuilder>(
                route_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        route_ = null;
      }
      return routeBuilder_;
    }

    private io.ourea.adapter.model.istio.HTTPRedirect redirect_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRedirect, io.ourea.adapter.model.istio.HTTPRedirect.Builder, io.ourea.adapter.model.istio.HTTPRedirectOrBuilder> redirectBuilder_;
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. If
     * traffic passthrough option is specified in the rule,
     * route/redirect will be ignored. The redirect primitive can be used to
     * send a HTTP 301 redirect to a different URI or Authority.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
     * @return Whether the redirect field is set.
     */
    public boolean hasRedirect() {
      return redirectBuilder_ != null || redirect_ != null;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. If
     * traffic passthrough option is specified in the rule,
     * route/redirect will be ignored. The redirect primitive can be used to
     * send a HTTP 301 redirect to a different URI or Authority.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
     * @return The redirect.
     */
    public io.ourea.adapter.model.istio.HTTPRedirect getRedirect() {
      if (redirectBuilder_ == null) {
        return redirect_ == null ? io.ourea.adapter.model.istio.HTTPRedirect.getDefaultInstance() : redirect_;
      } else {
        return redirectBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. If
     * traffic passthrough option is specified in the rule,
     * route/redirect will be ignored. The redirect primitive can be used to
     * send a HTTP 301 redirect to a different URI or Authority.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
     */
    public Builder setRedirect(io.ourea.adapter.model.istio.HTTPRedirect value) {
      if (redirectBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        redirect_ = value;
        onChanged();
      } else {
        redirectBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. If
     * traffic passthrough option is specified in the rule,
     * route/redirect will be ignored. The redirect primitive can be used to
     * send a HTTP 301 redirect to a different URI or Authority.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
     */
    public Builder setRedirect(
        io.ourea.adapter.model.istio.HTTPRedirect.Builder builderForValue) {
      if (redirectBuilder_ == null) {
        redirect_ = builderForValue.build();
        onChanged();
      } else {
        redirectBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. If
     * traffic passthrough option is specified in the rule,
     * route/redirect will be ignored. The redirect primitive can be used to
     * send a HTTP 301 redirect to a different URI or Authority.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
     */
    public Builder mergeRedirect(io.ourea.adapter.model.istio.HTTPRedirect value) {
      if (redirectBuilder_ == null) {
        if (redirect_ != null) {
          redirect_ =
            io.ourea.adapter.model.istio.HTTPRedirect.newBuilder(redirect_).mergeFrom(value).buildPartial();
        } else {
          redirect_ = value;
        }
        onChanged();
      } else {
        redirectBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. If
     * traffic passthrough option is specified in the rule,
     * route/redirect will be ignored. The redirect primitive can be used to
     * send a HTTP 301 redirect to a different URI or Authority.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
     */
    public Builder clearRedirect() {
      if (redirectBuilder_ == null) {
        redirect_ = null;
        onChanged();
      } else {
        redirect_ = null;
        redirectBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. If
     * traffic passthrough option is specified in the rule,
     * route/redirect will be ignored. The redirect primitive can be used to
     * send a HTTP 301 redirect to a different URI or Authority.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRedirect.Builder getRedirectBuilder() {
      
      onChanged();
      return getRedirectFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. If
     * traffic passthrough option is specified in the rule,
     * route/redirect will be ignored. The redirect primitive can be used to
     * send a HTTP 301 redirect to a different URI or Authority.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRedirectOrBuilder getRedirectOrBuilder() {
      if (redirectBuilder_ != null) {
        return redirectBuilder_.getMessageOrBuilder();
      } else {
        return redirect_ == null ?
            io.ourea.adapter.model.istio.HTTPRedirect.getDefaultInstance() : redirect_;
      }
    }
    /**
     * <pre>
     * A HTTP rule can either redirect or forward (default) traffic. If
     * traffic passthrough option is specified in the rule,
     * route/redirect will be ignored. The redirect primitive can be used to
     * send a HTTP 301 redirect to a different URI or Authority.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRedirect, io.ourea.adapter.model.istio.HTTPRedirect.Builder, io.ourea.adapter.model.istio.HTTPRedirectOrBuilder> 
        getRedirectFieldBuilder() {
      if (redirectBuilder_ == null) {
        redirectBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.istio.HTTPRedirect, io.ourea.adapter.model.istio.HTTPRedirect.Builder, io.ourea.adapter.model.istio.HTTPRedirectOrBuilder>(
                getRedirect(),
                getParentForChildren(),
                isClean());
        redirect_ = null;
      }
      return redirectBuilder_;
    }

    private io.ourea.adapter.model.istio.Delegate delegate_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.Delegate, io.ourea.adapter.model.istio.Delegate.Builder, io.ourea.adapter.model.istio.DelegateOrBuilder> delegateBuilder_;
    /**
     * <pre>
     * Delegate is used to specify the particular VirtualService which
     * can be used to define delegate HTTPRoute.
     * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
     * delegate VirtualService will be merged with that in the current one.
     * **NOTE**:
     *    1. Only one level delegation is supported.
     *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
     *       otherwise there is a conflict and the HTTPRoute will not take effect.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
     * @return Whether the delegate field is set.
     */
    public boolean hasDelegate() {
      return delegateBuilder_ != null || delegate_ != null;
    }
    /**
     * <pre>
     * Delegate is used to specify the particular VirtualService which
     * can be used to define delegate HTTPRoute.
     * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
     * delegate VirtualService will be merged with that in the current one.
     * **NOTE**:
     *    1. Only one level delegation is supported.
     *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
     *       otherwise there is a conflict and the HTTPRoute will not take effect.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
     * @return The delegate.
     */
    public io.ourea.adapter.model.istio.Delegate getDelegate() {
      if (delegateBuilder_ == null) {
        return delegate_ == null ? io.ourea.adapter.model.istio.Delegate.getDefaultInstance() : delegate_;
      } else {
        return delegateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Delegate is used to specify the particular VirtualService which
     * can be used to define delegate HTTPRoute.
     * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
     * delegate VirtualService will be merged with that in the current one.
     * **NOTE**:
     *    1. Only one level delegation is supported.
     *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
     *       otherwise there is a conflict and the HTTPRoute will not take effect.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
     */
    public Builder setDelegate(io.ourea.adapter.model.istio.Delegate value) {
      if (delegateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        delegate_ = value;
        onChanged();
      } else {
        delegateBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Delegate is used to specify the particular VirtualService which
     * can be used to define delegate HTTPRoute.
     * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
     * delegate VirtualService will be merged with that in the current one.
     * **NOTE**:
     *    1. Only one level delegation is supported.
     *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
     *       otherwise there is a conflict and the HTTPRoute will not take effect.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
     */
    public Builder setDelegate(
        io.ourea.adapter.model.istio.Delegate.Builder builderForValue) {
      if (delegateBuilder_ == null) {
        delegate_ = builderForValue.build();
        onChanged();
      } else {
        delegateBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Delegate is used to specify the particular VirtualService which
     * can be used to define delegate HTTPRoute.
     * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
     * delegate VirtualService will be merged with that in the current one.
     * **NOTE**:
     *    1. Only one level delegation is supported.
     *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
     *       otherwise there is a conflict and the HTTPRoute will not take effect.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
     */
    public Builder mergeDelegate(io.ourea.adapter.model.istio.Delegate value) {
      if (delegateBuilder_ == null) {
        if (delegate_ != null) {
          delegate_ =
            io.ourea.adapter.model.istio.Delegate.newBuilder(delegate_).mergeFrom(value).buildPartial();
        } else {
          delegate_ = value;
        }
        onChanged();
      } else {
        delegateBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Delegate is used to specify the particular VirtualService which
     * can be used to define delegate HTTPRoute.
     * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
     * delegate VirtualService will be merged with that in the current one.
     * **NOTE**:
     *    1. Only one level delegation is supported.
     *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
     *       otherwise there is a conflict and the HTTPRoute will not take effect.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
     */
    public Builder clearDelegate() {
      if (delegateBuilder_ == null) {
        delegate_ = null;
        onChanged();
      } else {
        delegate_ = null;
        delegateBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Delegate is used to specify the particular VirtualService which
     * can be used to define delegate HTTPRoute.
     * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
     * delegate VirtualService will be merged with that in the current one.
     * **NOTE**:
     *    1. Only one level delegation is supported.
     *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
     *       otherwise there is a conflict and the HTTPRoute will not take effect.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
     */
    public io.ourea.adapter.model.istio.Delegate.Builder getDelegateBuilder() {
      
      onChanged();
      return getDelegateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Delegate is used to specify the particular VirtualService which
     * can be used to define delegate HTTPRoute.
     * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
     * delegate VirtualService will be merged with that in the current one.
     * **NOTE**:
     *    1. Only one level delegation is supported.
     *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
     *       otherwise there is a conflict and the HTTPRoute will not take effect.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
     */
    public io.ourea.adapter.model.istio.DelegateOrBuilder getDelegateOrBuilder() {
      if (delegateBuilder_ != null) {
        return delegateBuilder_.getMessageOrBuilder();
      } else {
        return delegate_ == null ?
            io.ourea.adapter.model.istio.Delegate.getDefaultInstance() : delegate_;
      }
    }
    /**
     * <pre>
     * Delegate is used to specify the particular VirtualService which
     * can be used to define delegate HTTPRoute.
     * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
     * delegate VirtualService will be merged with that in the current one.
     * **NOTE**:
     *    1. Only one level delegation is supported.
     *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
     *       otherwise there is a conflict and the HTTPRoute will not take effect.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.Delegate, io.ourea.adapter.model.istio.Delegate.Builder, io.ourea.adapter.model.istio.DelegateOrBuilder> 
        getDelegateFieldBuilder() {
      if (delegateBuilder_ == null) {
        delegateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.istio.Delegate, io.ourea.adapter.model.istio.Delegate.Builder, io.ourea.adapter.model.istio.DelegateOrBuilder>(
                getDelegate(),
                getParentForChildren(),
                isClean());
        delegate_ = null;
      }
      return delegateBuilder_;
    }

    private io.ourea.adapter.model.istio.HTTPRewrite rewrite_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRewrite, io.ourea.adapter.model.istio.HTTPRewrite.Builder, io.ourea.adapter.model.istio.HTTPRewriteOrBuilder> rewriteBuilder_;
    /**
     * <pre>
     * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
     * Redirect primitive. Rewrite will be performed before forwarding.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
     * @return Whether the rewrite field is set.
     */
    public boolean hasRewrite() {
      return rewriteBuilder_ != null || rewrite_ != null;
    }
    /**
     * <pre>
     * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
     * Redirect primitive. Rewrite will be performed before forwarding.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
     * @return The rewrite.
     */
    public io.ourea.adapter.model.istio.HTTPRewrite getRewrite() {
      if (rewriteBuilder_ == null) {
        return rewrite_ == null ? io.ourea.adapter.model.istio.HTTPRewrite.getDefaultInstance() : rewrite_;
      } else {
        return rewriteBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
     * Redirect primitive. Rewrite will be performed before forwarding.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
     */
    public Builder setRewrite(io.ourea.adapter.model.istio.HTTPRewrite value) {
      if (rewriteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rewrite_ = value;
        onChanged();
      } else {
        rewriteBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
     * Redirect primitive. Rewrite will be performed before forwarding.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
     */
    public Builder setRewrite(
        io.ourea.adapter.model.istio.HTTPRewrite.Builder builderForValue) {
      if (rewriteBuilder_ == null) {
        rewrite_ = builderForValue.build();
        onChanged();
      } else {
        rewriteBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
     * Redirect primitive. Rewrite will be performed before forwarding.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
     */
    public Builder mergeRewrite(io.ourea.adapter.model.istio.HTTPRewrite value) {
      if (rewriteBuilder_ == null) {
        if (rewrite_ != null) {
          rewrite_ =
            io.ourea.adapter.model.istio.HTTPRewrite.newBuilder(rewrite_).mergeFrom(value).buildPartial();
        } else {
          rewrite_ = value;
        }
        onChanged();
      } else {
        rewriteBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
     * Redirect primitive. Rewrite will be performed before forwarding.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
     */
    public Builder clearRewrite() {
      if (rewriteBuilder_ == null) {
        rewrite_ = null;
        onChanged();
      } else {
        rewrite_ = null;
        rewriteBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
     * Redirect primitive. Rewrite will be performed before forwarding.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRewrite.Builder getRewriteBuilder() {
      
      onChanged();
      return getRewriteFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
     * Redirect primitive. Rewrite will be performed before forwarding.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRewriteOrBuilder getRewriteOrBuilder() {
      if (rewriteBuilder_ != null) {
        return rewriteBuilder_.getMessageOrBuilder();
      } else {
        return rewrite_ == null ?
            io.ourea.adapter.model.istio.HTTPRewrite.getDefaultInstance() : rewrite_;
      }
    }
    /**
     * <pre>
     * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
     * Redirect primitive. Rewrite will be performed before forwarding.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRewrite, io.ourea.adapter.model.istio.HTTPRewrite.Builder, io.ourea.adapter.model.istio.HTTPRewriteOrBuilder> 
        getRewriteFieldBuilder() {
      if (rewriteBuilder_ == null) {
        rewriteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.istio.HTTPRewrite, io.ourea.adapter.model.istio.HTTPRewrite.Builder, io.ourea.adapter.model.istio.HTTPRewriteOrBuilder>(
                getRewrite(),
                getParentForChildren(),
                isClean());
        rewrite_ = null;
      }
      return rewriteBuilder_;
    }

    private com.google.protobuf.Duration timeout_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> timeoutBuilder_;
    /**
     * <pre>
     * Timeout for HTTP requests, default is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 6;</code>
     * @return Whether the timeout field is set.
     */
    public boolean hasTimeout() {
      return timeoutBuilder_ != null || timeout_ != null;
    }
    /**
     * <pre>
     * Timeout for HTTP requests, default is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 6;</code>
     * @return The timeout.
     */
    public com.google.protobuf.Duration getTimeout() {
      if (timeoutBuilder_ == null) {
        return timeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : timeout_;
      } else {
        return timeoutBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Timeout for HTTP requests, default is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 6;</code>
     */
    public Builder setTimeout(com.google.protobuf.Duration value) {
      if (timeoutBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        timeout_ = value;
        onChanged();
      } else {
        timeoutBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Timeout for HTTP requests, default is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 6;</code>
     */
    public Builder setTimeout(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (timeoutBuilder_ == null) {
        timeout_ = builderForValue.build();
        onChanged();
      } else {
        timeoutBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Timeout for HTTP requests, default is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 6;</code>
     */
    public Builder mergeTimeout(com.google.protobuf.Duration value) {
      if (timeoutBuilder_ == null) {
        if (timeout_ != null) {
          timeout_ =
            com.google.protobuf.Duration.newBuilder(timeout_).mergeFrom(value).buildPartial();
        } else {
          timeout_ = value;
        }
        onChanged();
      } else {
        timeoutBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Timeout for HTTP requests, default is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 6;</code>
     */
    public Builder clearTimeout() {
      if (timeoutBuilder_ == null) {
        timeout_ = null;
        onChanged();
      } else {
        timeout_ = null;
        timeoutBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Timeout for HTTP requests, default is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 6;</code>
     */
    public com.google.protobuf.Duration.Builder getTimeoutBuilder() {
      
      onChanged();
      return getTimeoutFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Timeout for HTTP requests, default is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 6;</code>
     */
    public com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder() {
      if (timeoutBuilder_ != null) {
        return timeoutBuilder_.getMessageOrBuilder();
      } else {
        return timeout_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : timeout_;
      }
    }
    /**
     * <pre>
     * Timeout for HTTP requests, default is disabled.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getTimeoutFieldBuilder() {
      if (timeoutBuilder_ == null) {
        timeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getTimeout(),
                getParentForChildren(),
                isClean());
        timeout_ = null;
      }
      return timeoutBuilder_;
    }

    private io.ourea.adapter.model.istio.HTTPRetry retries_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRetry, io.ourea.adapter.model.istio.HTTPRetry.Builder, io.ourea.adapter.model.istio.HTTPRetryOrBuilder> retriesBuilder_;
    /**
     * <pre>
     * Retry policy for HTTP requests.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
     * @return Whether the retries field is set.
     */
    public boolean hasRetries() {
      return retriesBuilder_ != null || retries_ != null;
    }
    /**
     * <pre>
     * Retry policy for HTTP requests.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
     * @return The retries.
     */
    public io.ourea.adapter.model.istio.HTTPRetry getRetries() {
      if (retriesBuilder_ == null) {
        return retries_ == null ? io.ourea.adapter.model.istio.HTTPRetry.getDefaultInstance() : retries_;
      } else {
        return retriesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Retry policy for HTTP requests.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
     */
    public Builder setRetries(io.ourea.adapter.model.istio.HTTPRetry value) {
      if (retriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        retries_ = value;
        onChanged();
      } else {
        retriesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Retry policy for HTTP requests.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
     */
    public Builder setRetries(
        io.ourea.adapter.model.istio.HTTPRetry.Builder builderForValue) {
      if (retriesBuilder_ == null) {
        retries_ = builderForValue.build();
        onChanged();
      } else {
        retriesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Retry policy for HTTP requests.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
     */
    public Builder mergeRetries(io.ourea.adapter.model.istio.HTTPRetry value) {
      if (retriesBuilder_ == null) {
        if (retries_ != null) {
          retries_ =
            io.ourea.adapter.model.istio.HTTPRetry.newBuilder(retries_).mergeFrom(value).buildPartial();
        } else {
          retries_ = value;
        }
        onChanged();
      } else {
        retriesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Retry policy for HTTP requests.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
     */
    public Builder clearRetries() {
      if (retriesBuilder_ == null) {
        retries_ = null;
        onChanged();
      } else {
        retries_ = null;
        retriesBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Retry policy for HTTP requests.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRetry.Builder getRetriesBuilder() {
      
      onChanged();
      return getRetriesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Retry policy for HTTP requests.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRetryOrBuilder getRetriesOrBuilder() {
      if (retriesBuilder_ != null) {
        return retriesBuilder_.getMessageOrBuilder();
      } else {
        return retries_ == null ?
            io.ourea.adapter.model.istio.HTTPRetry.getDefaultInstance() : retries_;
      }
    }
    /**
     * <pre>
     * Retry policy for HTTP requests.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRetry, io.ourea.adapter.model.istio.HTTPRetry.Builder, io.ourea.adapter.model.istio.HTTPRetryOrBuilder> 
        getRetriesFieldBuilder() {
      if (retriesBuilder_ == null) {
        retriesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.istio.HTTPRetry, io.ourea.adapter.model.istio.HTTPRetry.Builder, io.ourea.adapter.model.istio.HTTPRetryOrBuilder>(
                getRetries(),
                getParentForChildren(),
                isClean());
        retries_ = null;
      }
      return retriesBuilder_;
    }

    private io.ourea.adapter.model.istio.HTTPFaultInjection fault_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPFaultInjection, io.ourea.adapter.model.istio.HTTPFaultInjection.Builder, io.ourea.adapter.model.istio.HTTPFaultInjectionOrBuilder> faultBuilder_;
    /**
     * <pre>
     * Fault injection policy to apply on HTTP traffic at the client side.
     * Note that timeouts or retries will not be enabled when faults are
     * enabled on the client side.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
     * @return Whether the fault field is set.
     */
    public boolean hasFault() {
      return faultBuilder_ != null || fault_ != null;
    }
    /**
     * <pre>
     * Fault injection policy to apply on HTTP traffic at the client side.
     * Note that timeouts or retries will not be enabled when faults are
     * enabled on the client side.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
     * @return The fault.
     */
    public io.ourea.adapter.model.istio.HTTPFaultInjection getFault() {
      if (faultBuilder_ == null) {
        return fault_ == null ? io.ourea.adapter.model.istio.HTTPFaultInjection.getDefaultInstance() : fault_;
      } else {
        return faultBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Fault injection policy to apply on HTTP traffic at the client side.
     * Note that timeouts or retries will not be enabled when faults are
     * enabled on the client side.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
     */
    public Builder setFault(io.ourea.adapter.model.istio.HTTPFaultInjection value) {
      if (faultBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fault_ = value;
        onChanged();
      } else {
        faultBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Fault injection policy to apply on HTTP traffic at the client side.
     * Note that timeouts or retries will not be enabled when faults are
     * enabled on the client side.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
     */
    public Builder setFault(
        io.ourea.adapter.model.istio.HTTPFaultInjection.Builder builderForValue) {
      if (faultBuilder_ == null) {
        fault_ = builderForValue.build();
        onChanged();
      } else {
        faultBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Fault injection policy to apply on HTTP traffic at the client side.
     * Note that timeouts or retries will not be enabled when faults are
     * enabled on the client side.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
     */
    public Builder mergeFault(io.ourea.adapter.model.istio.HTTPFaultInjection value) {
      if (faultBuilder_ == null) {
        if (fault_ != null) {
          fault_ =
            io.ourea.adapter.model.istio.HTTPFaultInjection.newBuilder(fault_).mergeFrom(value).buildPartial();
        } else {
          fault_ = value;
        }
        onChanged();
      } else {
        faultBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Fault injection policy to apply on HTTP traffic at the client side.
     * Note that timeouts or retries will not be enabled when faults are
     * enabled on the client side.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
     */
    public Builder clearFault() {
      if (faultBuilder_ == null) {
        fault_ = null;
        onChanged();
      } else {
        fault_ = null;
        faultBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Fault injection policy to apply on HTTP traffic at the client side.
     * Note that timeouts or retries will not be enabled when faults are
     * enabled on the client side.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
     */
    public io.ourea.adapter.model.istio.HTTPFaultInjection.Builder getFaultBuilder() {
      
      onChanged();
      return getFaultFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Fault injection policy to apply on HTTP traffic at the client side.
     * Note that timeouts or retries will not be enabled when faults are
     * enabled on the client side.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
     */
    public io.ourea.adapter.model.istio.HTTPFaultInjectionOrBuilder getFaultOrBuilder() {
      if (faultBuilder_ != null) {
        return faultBuilder_.getMessageOrBuilder();
      } else {
        return fault_ == null ?
            io.ourea.adapter.model.istio.HTTPFaultInjection.getDefaultInstance() : fault_;
      }
    }
    /**
     * <pre>
     * Fault injection policy to apply on HTTP traffic at the client side.
     * Note that timeouts or retries will not be enabled when faults are
     * enabled on the client side.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPFaultInjection, io.ourea.adapter.model.istio.HTTPFaultInjection.Builder, io.ourea.adapter.model.istio.HTTPFaultInjectionOrBuilder> 
        getFaultFieldBuilder() {
      if (faultBuilder_ == null) {
        faultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.istio.HTTPFaultInjection, io.ourea.adapter.model.istio.HTTPFaultInjection.Builder, io.ourea.adapter.model.istio.HTTPFaultInjectionOrBuilder>(
                getFault(),
                getParentForChildren(),
                isClean());
        fault_ = null;
      }
      return faultBuilder_;
    }

    private io.ourea.adapter.model.istio.Destination mirror_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.Destination, io.ourea.adapter.model.istio.Destination.Builder, io.ourea.adapter.model.istio.DestinationOrBuilder> mirrorBuilder_;
    /**
     * <pre>
     * Mirror HTTP traffic to a another destination in addition to forwarding
     * the requests to the intended destination. Mirrored traffic is on a
     * best effort basis where the sidecar/gateway will not wait for the
     * mirrored cluster to respond before returning the response from the
     * original destination.  Statistics will be generated for the mirrored
     * destination.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
     * @return Whether the mirror field is set.
     */
    public boolean hasMirror() {
      return mirrorBuilder_ != null || mirror_ != null;
    }
    /**
     * <pre>
     * Mirror HTTP traffic to a another destination in addition to forwarding
     * the requests to the intended destination. Mirrored traffic is on a
     * best effort basis where the sidecar/gateway will not wait for the
     * mirrored cluster to respond before returning the response from the
     * original destination.  Statistics will be generated for the mirrored
     * destination.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
     * @return The mirror.
     */
    public io.ourea.adapter.model.istio.Destination getMirror() {
      if (mirrorBuilder_ == null) {
        return mirror_ == null ? io.ourea.adapter.model.istio.Destination.getDefaultInstance() : mirror_;
      } else {
        return mirrorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Mirror HTTP traffic to a another destination in addition to forwarding
     * the requests to the intended destination. Mirrored traffic is on a
     * best effort basis where the sidecar/gateway will not wait for the
     * mirrored cluster to respond before returning the response from the
     * original destination.  Statistics will be generated for the mirrored
     * destination.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
     */
    public Builder setMirror(io.ourea.adapter.model.istio.Destination value) {
      if (mirrorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        mirror_ = value;
        onChanged();
      } else {
        mirrorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Mirror HTTP traffic to a another destination in addition to forwarding
     * the requests to the intended destination. Mirrored traffic is on a
     * best effort basis where the sidecar/gateway will not wait for the
     * mirrored cluster to respond before returning the response from the
     * original destination.  Statistics will be generated for the mirrored
     * destination.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
     */
    public Builder setMirror(
        io.ourea.adapter.model.istio.Destination.Builder builderForValue) {
      if (mirrorBuilder_ == null) {
        mirror_ = builderForValue.build();
        onChanged();
      } else {
        mirrorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Mirror HTTP traffic to a another destination in addition to forwarding
     * the requests to the intended destination. Mirrored traffic is on a
     * best effort basis where the sidecar/gateway will not wait for the
     * mirrored cluster to respond before returning the response from the
     * original destination.  Statistics will be generated for the mirrored
     * destination.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
     */
    public Builder mergeMirror(io.ourea.adapter.model.istio.Destination value) {
      if (mirrorBuilder_ == null) {
        if (mirror_ != null) {
          mirror_ =
            io.ourea.adapter.model.istio.Destination.newBuilder(mirror_).mergeFrom(value).buildPartial();
        } else {
          mirror_ = value;
        }
        onChanged();
      } else {
        mirrorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Mirror HTTP traffic to a another destination in addition to forwarding
     * the requests to the intended destination. Mirrored traffic is on a
     * best effort basis where the sidecar/gateway will not wait for the
     * mirrored cluster to respond before returning the response from the
     * original destination.  Statistics will be generated for the mirrored
     * destination.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
     */
    public Builder clearMirror() {
      if (mirrorBuilder_ == null) {
        mirror_ = null;
        onChanged();
      } else {
        mirror_ = null;
        mirrorBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Mirror HTTP traffic to a another destination in addition to forwarding
     * the requests to the intended destination. Mirrored traffic is on a
     * best effort basis where the sidecar/gateway will not wait for the
     * mirrored cluster to respond before returning the response from the
     * original destination.  Statistics will be generated for the mirrored
     * destination.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
     */
    public io.ourea.adapter.model.istio.Destination.Builder getMirrorBuilder() {
      
      onChanged();
      return getMirrorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Mirror HTTP traffic to a another destination in addition to forwarding
     * the requests to the intended destination. Mirrored traffic is on a
     * best effort basis where the sidecar/gateway will not wait for the
     * mirrored cluster to respond before returning the response from the
     * original destination.  Statistics will be generated for the mirrored
     * destination.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
     */
    public io.ourea.adapter.model.istio.DestinationOrBuilder getMirrorOrBuilder() {
      if (mirrorBuilder_ != null) {
        return mirrorBuilder_.getMessageOrBuilder();
      } else {
        return mirror_ == null ?
            io.ourea.adapter.model.istio.Destination.getDefaultInstance() : mirror_;
      }
    }
    /**
     * <pre>
     * Mirror HTTP traffic to a another destination in addition to forwarding
     * the requests to the intended destination. Mirrored traffic is on a
     * best effort basis where the sidecar/gateway will not wait for the
     * mirrored cluster to respond before returning the response from the
     * original destination.  Statistics will be generated for the mirrored
     * destination.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.Destination, io.ourea.adapter.model.istio.Destination.Builder, io.ourea.adapter.model.istio.DestinationOrBuilder> 
        getMirrorFieldBuilder() {
      if (mirrorBuilder_ == null) {
        mirrorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.istio.Destination, io.ourea.adapter.model.istio.Destination.Builder, io.ourea.adapter.model.istio.DestinationOrBuilder>(
                getMirror(),
                getParentForChildren(),
                isClean());
        mirror_ = null;
      }
      return mirrorBuilder_;
    }

    private com.google.protobuf.UInt32Value mirrorPercent_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> mirrorPercentBuilder_;
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * Use of integer `mirror_percent` value is deprecated. Use the
     * double `mirror_percentage` field instead
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
     * @return Whether the mirrorPercent field is set.
     */
    @java.lang.Deprecated public boolean hasMirrorPercent() {
      return mirrorPercentBuilder_ != null || mirrorPercent_ != null;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * Use of integer `mirror_percent` value is deprecated. Use the
     * double `mirror_percentage` field instead
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
     * @return The mirrorPercent.
     */
    @java.lang.Deprecated public com.google.protobuf.UInt32Value getMirrorPercent() {
      if (mirrorPercentBuilder_ == null) {
        return mirrorPercent_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : mirrorPercent_;
      } else {
        return mirrorPercentBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * Use of integer `mirror_percent` value is deprecated. Use the
     * double `mirror_percentage` field instead
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setMirrorPercent(com.google.protobuf.UInt32Value value) {
      if (mirrorPercentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        mirrorPercent_ = value;
        onChanged();
      } else {
        mirrorPercentBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * Use of integer `mirror_percent` value is deprecated. Use the
     * double `mirror_percentage` field instead
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setMirrorPercent(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      if (mirrorPercentBuilder_ == null) {
        mirrorPercent_ = builderForValue.build();
        onChanged();
      } else {
        mirrorPercentBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * Use of integer `mirror_percent` value is deprecated. Use the
     * double `mirror_percentage` field instead
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder mergeMirrorPercent(com.google.protobuf.UInt32Value value) {
      if (mirrorPercentBuilder_ == null) {
        if (mirrorPercent_ != null) {
          mirrorPercent_ =
            com.google.protobuf.UInt32Value.newBuilder(mirrorPercent_).mergeFrom(value).buildPartial();
        } else {
          mirrorPercent_ = value;
        }
        onChanged();
      } else {
        mirrorPercentBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * Use of integer `mirror_percent` value is deprecated. Use the
     * double `mirror_percentage` field instead
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearMirrorPercent() {
      if (mirrorPercentBuilder_ == null) {
        mirrorPercent_ = null;
        onChanged();
      } else {
        mirrorPercent_ = null;
        mirrorPercentBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * Use of integer `mirror_percent` value is deprecated. Use the
     * double `mirror_percentage` field instead
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.UInt32Value.Builder getMirrorPercentBuilder() {
      
      onChanged();
      return getMirrorPercentFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * Use of integer `mirror_percent` value is deprecated. Use the
     * double `mirror_percentage` field instead
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.UInt32ValueOrBuilder getMirrorPercentOrBuilder() {
      if (mirrorPercentBuilder_ != null) {
        return mirrorPercentBuilder_.getMessageOrBuilder();
      } else {
        return mirrorPercent_ == null ?
            com.google.protobuf.UInt32Value.getDefaultInstance() : mirrorPercent_;
      }
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * Use of integer `mirror_percent` value is deprecated. Use the
     * double `mirror_percentage` field instead
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder> 
        getMirrorPercentFieldBuilder() {
      if (mirrorPercentBuilder_ == null) {
        mirrorPercentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.UInt32Value, com.google.protobuf.UInt32Value.Builder, com.google.protobuf.UInt32ValueOrBuilder>(
                getMirrorPercent(),
                getParentForChildren(),
                isClean());
        mirrorPercent_ = null;
      }
      return mirrorPercentBuilder_;
    }

    private io.ourea.adapter.model.istio.Percent mirrorPercentage_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.Percent, io.ourea.adapter.model.istio.Percent.Builder, io.ourea.adapter.model.istio.PercentOrBuilder> mirrorPercentageBuilder_;
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * If this field is absent, all the traffic (100%) will be mirrored.
     * Max value is 100.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
     * @return Whether the mirrorPercentage field is set.
     */
    public boolean hasMirrorPercentage() {
      return mirrorPercentageBuilder_ != null || mirrorPercentage_ != null;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * If this field is absent, all the traffic (100%) will be mirrored.
     * Max value is 100.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
     * @return The mirrorPercentage.
     */
    public io.ourea.adapter.model.istio.Percent getMirrorPercentage() {
      if (mirrorPercentageBuilder_ == null) {
        return mirrorPercentage_ == null ? io.ourea.adapter.model.istio.Percent.getDefaultInstance() : mirrorPercentage_;
      } else {
        return mirrorPercentageBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * If this field is absent, all the traffic (100%) will be mirrored.
     * Max value is 100.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
     */
    public Builder setMirrorPercentage(io.ourea.adapter.model.istio.Percent value) {
      if (mirrorPercentageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        mirrorPercentage_ = value;
        onChanged();
      } else {
        mirrorPercentageBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * If this field is absent, all the traffic (100%) will be mirrored.
     * Max value is 100.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
     */
    public Builder setMirrorPercentage(
        io.ourea.adapter.model.istio.Percent.Builder builderForValue) {
      if (mirrorPercentageBuilder_ == null) {
        mirrorPercentage_ = builderForValue.build();
        onChanged();
      } else {
        mirrorPercentageBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * If this field is absent, all the traffic (100%) will be mirrored.
     * Max value is 100.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
     */
    public Builder mergeMirrorPercentage(io.ourea.adapter.model.istio.Percent value) {
      if (mirrorPercentageBuilder_ == null) {
        if (mirrorPercentage_ != null) {
          mirrorPercentage_ =
            io.ourea.adapter.model.istio.Percent.newBuilder(mirrorPercentage_).mergeFrom(value).buildPartial();
        } else {
          mirrorPercentage_ = value;
        }
        onChanged();
      } else {
        mirrorPercentageBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * If this field is absent, all the traffic (100%) will be mirrored.
     * Max value is 100.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
     */
    public Builder clearMirrorPercentage() {
      if (mirrorPercentageBuilder_ == null) {
        mirrorPercentage_ = null;
        onChanged();
      } else {
        mirrorPercentage_ = null;
        mirrorPercentageBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * If this field is absent, all the traffic (100%) will be mirrored.
     * Max value is 100.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
     */
    public io.ourea.adapter.model.istio.Percent.Builder getMirrorPercentageBuilder() {
      
      onChanged();
      return getMirrorPercentageFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * If this field is absent, all the traffic (100%) will be mirrored.
     * Max value is 100.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
     */
    public io.ourea.adapter.model.istio.PercentOrBuilder getMirrorPercentageOrBuilder() {
      if (mirrorPercentageBuilder_ != null) {
        return mirrorPercentageBuilder_.getMessageOrBuilder();
      } else {
        return mirrorPercentage_ == null ?
            io.ourea.adapter.model.istio.Percent.getDefaultInstance() : mirrorPercentage_;
      }
    }
    /**
     * <pre>
     * Percentage of the traffic to be mirrored by the `mirror` field.
     * If this field is absent, all the traffic (100%) will be mirrored.
     * Max value is 100.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.Percent, io.ourea.adapter.model.istio.Percent.Builder, io.ourea.adapter.model.istio.PercentOrBuilder> 
        getMirrorPercentageFieldBuilder() {
      if (mirrorPercentageBuilder_ == null) {
        mirrorPercentageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.istio.Percent, io.ourea.adapter.model.istio.Percent.Builder, io.ourea.adapter.model.istio.PercentOrBuilder>(
                getMirrorPercentage(),
                getParentForChildren(),
                isClean());
        mirrorPercentage_ = null;
      }
      return mirrorPercentageBuilder_;
    }

    private io.ourea.adapter.model.istio.CorsPolicy corsPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.CorsPolicy, io.ourea.adapter.model.istio.CorsPolicy.Builder, io.ourea.adapter.model.istio.CorsPolicyOrBuilder> corsPolicyBuilder_;
    /**
     * <pre>
     * Cross-Origin Resource Sharing policy (CORS). Refer to
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
     * for further details about cross origin resource sharing.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
     * @return Whether the corsPolicy field is set.
     */
    public boolean hasCorsPolicy() {
      return corsPolicyBuilder_ != null || corsPolicy_ != null;
    }
    /**
     * <pre>
     * Cross-Origin Resource Sharing policy (CORS). Refer to
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
     * for further details about cross origin resource sharing.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
     * @return The corsPolicy.
     */
    public io.ourea.adapter.model.istio.CorsPolicy getCorsPolicy() {
      if (corsPolicyBuilder_ == null) {
        return corsPolicy_ == null ? io.ourea.adapter.model.istio.CorsPolicy.getDefaultInstance() : corsPolicy_;
      } else {
        return corsPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Cross-Origin Resource Sharing policy (CORS). Refer to
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
     * for further details about cross origin resource sharing.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
     */
    public Builder setCorsPolicy(io.ourea.adapter.model.istio.CorsPolicy value) {
      if (corsPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        corsPolicy_ = value;
        onChanged();
      } else {
        corsPolicyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Cross-Origin Resource Sharing policy (CORS). Refer to
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
     * for further details about cross origin resource sharing.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
     */
    public Builder setCorsPolicy(
        io.ourea.adapter.model.istio.CorsPolicy.Builder builderForValue) {
      if (corsPolicyBuilder_ == null) {
        corsPolicy_ = builderForValue.build();
        onChanged();
      } else {
        corsPolicyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Cross-Origin Resource Sharing policy (CORS). Refer to
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
     * for further details about cross origin resource sharing.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
     */
    public Builder mergeCorsPolicy(io.ourea.adapter.model.istio.CorsPolicy value) {
      if (corsPolicyBuilder_ == null) {
        if (corsPolicy_ != null) {
          corsPolicy_ =
            io.ourea.adapter.model.istio.CorsPolicy.newBuilder(corsPolicy_).mergeFrom(value).buildPartial();
        } else {
          corsPolicy_ = value;
        }
        onChanged();
      } else {
        corsPolicyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Cross-Origin Resource Sharing policy (CORS). Refer to
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
     * for further details about cross origin resource sharing.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
     */
    public Builder clearCorsPolicy() {
      if (corsPolicyBuilder_ == null) {
        corsPolicy_ = null;
        onChanged();
      } else {
        corsPolicy_ = null;
        corsPolicyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Cross-Origin Resource Sharing policy (CORS). Refer to
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
     * for further details about cross origin resource sharing.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
     */
    public io.ourea.adapter.model.istio.CorsPolicy.Builder getCorsPolicyBuilder() {
      
      onChanged();
      return getCorsPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Cross-Origin Resource Sharing policy (CORS). Refer to
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
     * for further details about cross origin resource sharing.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
     */
    public io.ourea.adapter.model.istio.CorsPolicyOrBuilder getCorsPolicyOrBuilder() {
      if (corsPolicyBuilder_ != null) {
        return corsPolicyBuilder_.getMessageOrBuilder();
      } else {
        return corsPolicy_ == null ?
            io.ourea.adapter.model.istio.CorsPolicy.getDefaultInstance() : corsPolicy_;
      }
    }
    /**
     * <pre>
     * Cross-Origin Resource Sharing policy (CORS). Refer to
     * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
     * for further details about cross origin resource sharing.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.CorsPolicy, io.ourea.adapter.model.istio.CorsPolicy.Builder, io.ourea.adapter.model.istio.CorsPolicyOrBuilder> 
        getCorsPolicyFieldBuilder() {
      if (corsPolicyBuilder_ == null) {
        corsPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.istio.CorsPolicy, io.ourea.adapter.model.istio.CorsPolicy.Builder, io.ourea.adapter.model.istio.CorsPolicyOrBuilder>(
                getCorsPolicy(),
                getParentForChildren(),
                isClean());
        corsPolicy_ = null;
      }
      return corsPolicyBuilder_;
    }

    private io.ourea.adapter.model.istio.Headers headers_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.Headers, io.ourea.adapter.model.istio.Headers.Builder, io.ourea.adapter.model.istio.HeadersOrBuilder> headersBuilder_;
    /**
     * <pre>
     * Header manipulation rules
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
     * @return Whether the headers field is set.
     */
    public boolean hasHeaders() {
      return headersBuilder_ != null || headers_ != null;
    }
    /**
     * <pre>
     * Header manipulation rules
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
     * @return The headers.
     */
    public io.ourea.adapter.model.istio.Headers getHeaders() {
      if (headersBuilder_ == null) {
        return headers_ == null ? io.ourea.adapter.model.istio.Headers.getDefaultInstance() : headers_;
      } else {
        return headersBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Header manipulation rules
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
     */
    public Builder setHeaders(io.ourea.adapter.model.istio.Headers value) {
      if (headersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        headers_ = value;
        onChanged();
      } else {
        headersBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Header manipulation rules
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
     */
    public Builder setHeaders(
        io.ourea.adapter.model.istio.Headers.Builder builderForValue) {
      if (headersBuilder_ == null) {
        headers_ = builderForValue.build();
        onChanged();
      } else {
        headersBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Header manipulation rules
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
     */
    public Builder mergeHeaders(io.ourea.adapter.model.istio.Headers value) {
      if (headersBuilder_ == null) {
        if (headers_ != null) {
          headers_ =
            io.ourea.adapter.model.istio.Headers.newBuilder(headers_).mergeFrom(value).buildPartial();
        } else {
          headers_ = value;
        }
        onChanged();
      } else {
        headersBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Header manipulation rules
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
     */
    public Builder clearHeaders() {
      if (headersBuilder_ == null) {
        headers_ = null;
        onChanged();
      } else {
        headers_ = null;
        headersBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Header manipulation rules
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
     */
    public io.ourea.adapter.model.istio.Headers.Builder getHeadersBuilder() {
      
      onChanged();
      return getHeadersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Header manipulation rules
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
     */
    public io.ourea.adapter.model.istio.HeadersOrBuilder getHeadersOrBuilder() {
      if (headersBuilder_ != null) {
        return headersBuilder_.getMessageOrBuilder();
      } else {
        return headers_ == null ?
            io.ourea.adapter.model.istio.Headers.getDefaultInstance() : headers_;
      }
    }
    /**
     * <pre>
     * Header manipulation rules
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.istio.Headers, io.ourea.adapter.model.istio.Headers.Builder, io.ourea.adapter.model.istio.HeadersOrBuilder> 
        getHeadersFieldBuilder() {
      if (headersBuilder_ == null) {
        headersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.istio.Headers, io.ourea.adapter.model.istio.Headers.Builder, io.ourea.adapter.model.istio.HeadersOrBuilder>(
                getHeaders(),
                getParentForChildren(),
                isClean());
        headers_ = null;
      }
      return headersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:istio.networking.v1alpha3.HTTPRoute)
  }

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.HTTPRoute)
  private static final io.ourea.adapter.model.istio.HTTPRoute DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.ourea.adapter.model.istio.HTTPRoute();
  }

  public static io.ourea.adapter.model.istio.HTTPRoute getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<HTTPRoute>
      PARSER = new com.google.protobuf.AbstractParser<HTTPRoute>() {
    @java.lang.Override
    public HTTPRoute parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new HTTPRoute(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<HTTPRoute> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<HTTPRoute> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRoute getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

