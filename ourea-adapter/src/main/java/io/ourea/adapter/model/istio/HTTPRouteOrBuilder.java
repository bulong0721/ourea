// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: virtual_service.proto

package io.ourea.adapter.model.istio;

public interface HTTPRouteOrBuilder extends
    // @@protoc_insertion_point(interface_extends:istio.networking.v1alpha3.HTTPRoute)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The name assigned to the route for debugging purposes. The
   * route's name will be concatenated with the match's name and will
   * be logged in the access logs for requests matching this
   * route/match.
   * </pre>
   *
   * <code>string name = 17;</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name assigned to the route for debugging purposes. The
   * route's name will be concatenated with the match's name and will
   * be logged in the access logs for requests matching this
   * route/match.
   * </pre>
   *
   * <code>string name = 17;</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  java.util.List<io.ourea.adapter.model.istio.HTTPMatchRequest> 
      getMatchList();
  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  io.ourea.adapter.model.istio.HTTPMatchRequest getMatch(int index);
  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  int getMatchCount();
  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  java.util.List<? extends io.ourea.adapter.model.istio.HTTPMatchRequestOrBuilder> 
      getMatchOrBuilderList();
  /**
   * <pre>
   * Match conditions to be satisfied for the rule to be
   * activated. All conditions inside a single match block have AND
   * semantics, while the list of match blocks have OR semantics. The rule
   * is matched if any one of the match blocks succeed.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPMatchRequest match = 1;</code>
   */
  io.ourea.adapter.model.istio.HTTPMatchRequestOrBuilder getMatchOrBuilder(
      int index);

  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  java.util.List<io.ourea.adapter.model.istio.HTTPRouteDestination> 
      getRouteList();
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  io.ourea.adapter.model.istio.HTTPRouteDestination getRoute(int index);
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  int getRouteCount();
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  java.util.List<? extends io.ourea.adapter.model.istio.HTTPRouteDestinationOrBuilder> 
      getRouteOrBuilderList();
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. The
   * forwarding target can be one of several versions of a service (see
   * glossary in beginning of document). Weights associated with the
   * service version determine the proportion of traffic it receives.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRouteDestination route = 2;</code>
   */
  io.ourea.adapter.model.istio.HTTPRouteDestinationOrBuilder getRouteOrBuilder(
      int index);

  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. If
   * traffic passthrough option is specified in the rule,
   * route/redirect will be ignored. The redirect primitive can be used to
   * send a HTTP 301 redirect to a different URI or Authority.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
   * @return Whether the redirect field is set.
   */
  boolean hasRedirect();
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. If
   * traffic passthrough option is specified in the rule,
   * route/redirect will be ignored. The redirect primitive can be used to
   * send a HTTP 301 redirect to a different URI or Authority.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
   * @return The redirect.
   */
  io.ourea.adapter.model.istio.HTTPRedirect getRedirect();
  /**
   * <pre>
   * A HTTP rule can either redirect or forward (default) traffic. If
   * traffic passthrough option is specified in the rule,
   * route/redirect will be ignored. The redirect primitive can be used to
   * send a HTTP 301 redirect to a different URI or Authority.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRedirect redirect = 3;</code>
   */
  io.ourea.adapter.model.istio.HTTPRedirectOrBuilder getRedirectOrBuilder();

  /**
   * <pre>
   * Delegate is used to specify the particular VirtualService which
   * can be used to define delegate HTTPRoute.
   * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
   * delegate VirtualService will be merged with that in the current one.
   * **NOTE**:
   *    1. Only one level delegation is supported.
   *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
   *       otherwise there is a conflict and the HTTPRoute will not take effect.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
   * @return Whether the delegate field is set.
   */
  boolean hasDelegate();
  /**
   * <pre>
   * Delegate is used to specify the particular VirtualService which
   * can be used to define delegate HTTPRoute.
   * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
   * delegate VirtualService will be merged with that in the current one.
   * **NOTE**:
   *    1. Only one level delegation is supported.
   *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
   *       otherwise there is a conflict and the HTTPRoute will not take effect.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
   * @return The delegate.
   */
  io.ourea.adapter.model.istio.Delegate getDelegate();
  /**
   * <pre>
   * Delegate is used to specify the particular VirtualService which
   * can be used to define delegate HTTPRoute.
   * It can be set only when `Route` and `Redirect` are empty, and the route rules of the
   * delegate VirtualService will be merged with that in the current one.
   * **NOTE**:
   *    1. Only one level delegation is supported.
   *    2. The delegate's HTTPMatchRequest must be a strict subset of the root's,
   *       otherwise there is a conflict and the HTTPRoute will not take effect.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Delegate delegate = 20;</code>
   */
  io.ourea.adapter.model.istio.DelegateOrBuilder getDelegateOrBuilder();

  /**
   * <pre>
   * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
   * Redirect primitive. Rewrite will be performed before forwarding.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
   * @return Whether the rewrite field is set.
   */
  boolean hasRewrite();
  /**
   * <pre>
   * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
   * Redirect primitive. Rewrite will be performed before forwarding.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
   * @return The rewrite.
   */
  io.ourea.adapter.model.istio.HTTPRewrite getRewrite();
  /**
   * <pre>
   * Rewrite HTTP URIs and Authority headers. Rewrite cannot be used with
   * Redirect primitive. Rewrite will be performed before forwarding.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRewrite rewrite = 4;</code>
   */
  io.ourea.adapter.model.istio.HTTPRewriteOrBuilder getRewriteOrBuilder();

  /**
   * <pre>
   * Timeout for HTTP requests, default is disabled.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 6;</code>
   * @return Whether the timeout field is set.
   */
  boolean hasTimeout();
  /**
   * <pre>
   * Timeout for HTTP requests, default is disabled.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 6;</code>
   * @return The timeout.
   */
  com.google.protobuf.Duration getTimeout();
  /**
   * <pre>
   * Timeout for HTTP requests, default is disabled.
   * </pre>
   *
   * <code>.google.protobuf.Duration timeout = 6;</code>
   */
  com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder();

  /**
   * <pre>
   * Retry policy for HTTP requests.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
   * @return Whether the retries field is set.
   */
  boolean hasRetries();
  /**
   * <pre>
   * Retry policy for HTTP requests.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
   * @return The retries.
   */
  io.ourea.adapter.model.istio.HTTPRetry getRetries();
  /**
   * <pre>
   * Retry policy for HTTP requests.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPRetry retries = 7;</code>
   */
  io.ourea.adapter.model.istio.HTTPRetryOrBuilder getRetriesOrBuilder();

  /**
   * <pre>
   * Fault injection policy to apply on HTTP traffic at the client side.
   * Note that timeouts or retries will not be enabled when faults are
   * enabled on the client side.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
   * @return Whether the fault field is set.
   */
  boolean hasFault();
  /**
   * <pre>
   * Fault injection policy to apply on HTTP traffic at the client side.
   * Note that timeouts or retries will not be enabled when faults are
   * enabled on the client side.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
   * @return The fault.
   */
  io.ourea.adapter.model.istio.HTTPFaultInjection getFault();
  /**
   * <pre>
   * Fault injection policy to apply on HTTP traffic at the client side.
   * Note that timeouts or retries will not be enabled when faults are
   * enabled on the client side.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.HTTPFaultInjection fault = 8;</code>
   */
  io.ourea.adapter.model.istio.HTTPFaultInjectionOrBuilder getFaultOrBuilder();

  /**
   * <pre>
   * Mirror HTTP traffic to a another destination in addition to forwarding
   * the requests to the intended destination. Mirrored traffic is on a
   * best effort basis where the sidecar/gateway will not wait for the
   * mirrored cluster to respond before returning the response from the
   * original destination.  Statistics will be generated for the mirrored
   * destination.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
   * @return Whether the mirror field is set.
   */
  boolean hasMirror();
  /**
   * <pre>
   * Mirror HTTP traffic to a another destination in addition to forwarding
   * the requests to the intended destination. Mirrored traffic is on a
   * best effort basis where the sidecar/gateway will not wait for the
   * mirrored cluster to respond before returning the response from the
   * original destination.  Statistics will be generated for the mirrored
   * destination.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
   * @return The mirror.
   */
  io.ourea.adapter.model.istio.Destination getMirror();
  /**
   * <pre>
   * Mirror HTTP traffic to a another destination in addition to forwarding
   * the requests to the intended destination. Mirrored traffic is on a
   * best effort basis where the sidecar/gateway will not wait for the
   * mirrored cluster to respond before returning the response from the
   * original destination.  Statistics will be generated for the mirrored
   * destination.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Destination mirror = 9;</code>
   */
  io.ourea.adapter.model.istio.DestinationOrBuilder getMirrorOrBuilder();

  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * Use of integer `mirror_percent` value is deprecated. Use the
   * double `mirror_percentage` field instead
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
   * @return Whether the mirrorPercent field is set.
   */
  @java.lang.Deprecated boolean hasMirrorPercent();
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * Use of integer `mirror_percent` value is deprecated. Use the
   * double `mirror_percentage` field instead
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
   * @return The mirrorPercent.
   */
  @java.lang.Deprecated com.google.protobuf.UInt32Value getMirrorPercent();
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * Use of integer `mirror_percent` value is deprecated. Use the
   * double `mirror_percentage` field instead
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value mirror_percent = 18 [deprecated = true];</code>
   */
  @java.lang.Deprecated com.google.protobuf.UInt32ValueOrBuilder getMirrorPercentOrBuilder();

  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * If this field is absent, all the traffic (100%) will be mirrored.
   * Max value is 100.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
   * @return Whether the mirrorPercentage field is set.
   */
  boolean hasMirrorPercentage();
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * If this field is absent, all the traffic (100%) will be mirrored.
   * Max value is 100.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
   * @return The mirrorPercentage.
   */
  io.ourea.adapter.model.istio.Percent getMirrorPercentage();
  /**
   * <pre>
   * Percentage of the traffic to be mirrored by the `mirror` field.
   * If this field is absent, all the traffic (100%) will be mirrored.
   * Max value is 100.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Percent mirror_percentage = 19;</code>
   */
  io.ourea.adapter.model.istio.PercentOrBuilder getMirrorPercentageOrBuilder();

  /**
   * <pre>
   * Cross-Origin Resource Sharing policy (CORS). Refer to
   * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
   * for further details about cross origin resource sharing.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
   * @return Whether the corsPolicy field is set.
   */
  boolean hasCorsPolicy();
  /**
   * <pre>
   * Cross-Origin Resource Sharing policy (CORS). Refer to
   * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
   * for further details about cross origin resource sharing.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
   * @return The corsPolicy.
   */
  io.ourea.adapter.model.istio.CorsPolicy getCorsPolicy();
  /**
   * <pre>
   * Cross-Origin Resource Sharing policy (CORS). Refer to
   * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
   * for further details about cross origin resource sharing.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.CorsPolicy cors_policy = 10;</code>
   */
  io.ourea.adapter.model.istio.CorsPolicyOrBuilder getCorsPolicyOrBuilder();

  /**
   * <pre>
   * Header manipulation rules
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
   * @return Whether the headers field is set.
   */
  boolean hasHeaders();
  /**
   * <pre>
   * Header manipulation rules
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
   * @return The headers.
   */
  io.ourea.adapter.model.istio.Headers getHeaders();
  /**
   * <pre>
   * Header manipulation rules
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Headers headers = 16;</code>
   */
  io.ourea.adapter.model.istio.HeadersOrBuilder getHeadersOrBuilder();
}
