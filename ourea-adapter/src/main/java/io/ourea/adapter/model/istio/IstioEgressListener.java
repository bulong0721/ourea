// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sidecar.proto

package io.ourea.adapter.model.istio;

/**
 * <pre>
 * `IstioEgressListener` specifies the properties of an outbound traffic
 * listener on the sidecar proxy attached to a workload instance.
 * </pre>
 *
 * Protobuf type {@code istio.networking.v1alpha3.IstioEgressListener}
 */
public final class IstioEgressListener extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:istio.networking.v1alpha3.IstioEgressListener)
    IstioEgressListenerOrBuilder {
private static final long serialVersionUID = 0L;
  // Use IstioEgressListener.newBuilder() to construct.
  private IstioEgressListener(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private IstioEgressListener() {
    bind_ = "";
    captureMode_ = 0;
    hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new IstioEgressListener();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private IstioEgressListener(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.ourea.adapter.model.Port.Builder subBuilder = null;
            if (port_ != null) {
              subBuilder = port_.toBuilder();
            }
            port_ = input.readMessage(io.ourea.adapter.model.Port.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(port_);
              port_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            bind_ = s;
            break;
          }
          case 24: {
            int rawValue = input.readEnum();

            captureMode_ = rawValue;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              hosts_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            hosts_.add(s);
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        hosts_ = hosts_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.ourea.adapter.model.istio.SidecarOuterClass.internal_static_istio_networking_v1alpha3_IstioEgressListener_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.ourea.adapter.model.istio.SidecarOuterClass.internal_static_istio_networking_v1alpha3_IstioEgressListener_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.ourea.adapter.model.istio.IstioEgressListener.class, io.ourea.adapter.model.istio.IstioEgressListener.Builder.class);
  }

  public static final int PORT_FIELD_NUMBER = 1;
  private io.ourea.adapter.model.Port port_;
  /**
   * <pre>
   * The port associated with the listener. If using Unix domain socket,
   * use 0 as the port number, with a valid protocol. The port if
   * specified, will be used as the default destination port associated
   * with the imported hosts. If the port is omitted, Istio will infer the
   * listener ports based on the imported hosts. Note that when multiple
   * egress listeners are specified, where one or more listeners have
   * specific ports while others have no port, the hosts exposed on a
   * listener port will be based on the listener with the most specific
   * port.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Port port = 1;</code>
   * @return Whether the port field is set.
   */
  @java.lang.Override
  public boolean hasPort() {
    return port_ != null;
  }
  /**
   * <pre>
   * The port associated with the listener. If using Unix domain socket,
   * use 0 as the port number, with a valid protocol. The port if
   * specified, will be used as the default destination port associated
   * with the imported hosts. If the port is omitted, Istio will infer the
   * listener ports based on the imported hosts. Note that when multiple
   * egress listeners are specified, where one or more listeners have
   * specific ports while others have no port, the hosts exposed on a
   * listener port will be based on the listener with the most specific
   * port.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Port port = 1;</code>
   * @return The port.
   */
  @java.lang.Override
  public io.ourea.adapter.model.Port getPort() {
    return port_ == null ? io.ourea.adapter.model.Port.getDefaultInstance() : port_;
  }
  /**
   * <pre>
   * The port associated with the listener. If using Unix domain socket,
   * use 0 as the port number, with a valid protocol. The port if
   * specified, will be used as the default destination port associated
   * with the imported hosts. If the port is omitted, Istio will infer the
   * listener ports based on the imported hosts. Note that when multiple
   * egress listeners are specified, where one or more listeners have
   * specific ports while others have no port, the hosts exposed on a
   * listener port will be based on the listener with the most specific
   * port.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.Port port = 1;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.PortOrBuilder getPortOrBuilder() {
    return getPort();
  }

  public static final int BIND_FIELD_NUMBER = 2;
  private volatile java.lang.Object bind_;
  /**
   * <pre>
   * The IP or the Unix domain socket to which the listener should be bound
   * to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or
   * `unix:///path/to/uds` or `unix://&#64;foobar` (Linux abstract namespace). If
   * omitted, Istio will automatically configure the defaults based on imported
   * services, the workload instances to which this configuration is applied to and
   * the captureMode. If captureMode is `NONE`, bind will default to
   * 127.0.0.1.
   * </pre>
   *
   * <code>string bind = 2;</code>
   * @return The bind.
   */
  @java.lang.Override
  public java.lang.String getBind() {
    java.lang.Object ref = bind_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      bind_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The IP or the Unix domain socket to which the listener should be bound
   * to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or
   * `unix:///path/to/uds` or `unix://&#64;foobar` (Linux abstract namespace). If
   * omitted, Istio will automatically configure the defaults based on imported
   * services, the workload instances to which this configuration is applied to and
   * the captureMode. If captureMode is `NONE`, bind will default to
   * 127.0.0.1.
   * </pre>
   *
   * <code>string bind = 2;</code>
   * @return The bytes for bind.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getBindBytes() {
    java.lang.Object ref = bind_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      bind_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CAPTURE_MODE_FIELD_NUMBER = 3;
  private int captureMode_;
  /**
   * <pre>
   * When the bind address is an IP, the captureMode option dictates
   * how traffic to the listener is expected to be captured (or not).
   * captureMode must be DEFAULT or `NONE` for Unix domain socket binds.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.CaptureMode capture_mode = 3;</code>
   * @return The enum numeric value on the wire for captureMode.
   */
  @java.lang.Override public int getCaptureModeValue() {
    return captureMode_;
  }
  /**
   * <pre>
   * When the bind address is an IP, the captureMode option dictates
   * how traffic to the listener is expected to be captured (or not).
   * captureMode must be DEFAULT or `NONE` for Unix domain socket binds.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.CaptureMode capture_mode = 3;</code>
   * @return The captureMode.
   */
  @java.lang.Override public io.ourea.adapter.model.istio.CaptureMode getCaptureMode() {
    @SuppressWarnings("deprecation")
    io.ourea.adapter.model.istio.CaptureMode result = io.ourea.adapter.model.istio.CaptureMode.valueOf(captureMode_);
    return result == null ? io.ourea.adapter.model.istio.CaptureMode.UNRECOGNIZED : result;
  }

  public static final int HOSTS_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList hosts_;
  /**
   * <pre>
   * One or more service hosts exposed by the listener
   * in `namespace/dnsName` format. Services in the specified namespace
   * matching `dnsName` will be exposed.
   * The corresponding service can be a service in the service registry
   * (e.g., a Kubernetes or cloud foundry service) or a service specified
   * using a `ServiceEntry` or `VirtualService` configuration. Any
   * associated `DestinationRule` in the same namespace will also be used.
   * The `dnsName` should be specified using FQDN format, optionally including
   * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
   * Set the `dnsName` to `*` to select all services from the specified namespace
   * (e.g., `prod/&#42;`).
   * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
   * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
   * service from any available namespace while `./foo.example.com` only selects
   * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
   * Istio will configure the sidecar to be able to reach every service in the
   * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
   * to completely trim the configuration for sidecars that simply receive traffic
   * and respond, but make no outbound connections of their own.
   * NOTE: Only services and configuration artifacts exported to the sidecar's
   * namespace (e.g., `exportTo` value of `*`) can be referenced.
   * Private configurations (e.g., `exportTo` set to `.`) will
   * not be available. Refer to the `exportTo` setting in `VirtualService`,
   * `DestinationRule`, and `ServiceEntry` configurations for details.
   * **WARNING:** The list of egress hosts in a `Sidecar` must also include
   * the Mixer control plane services if they are enabled. Envoy will not
   * be able to reach them otherwise. For example, add host
   * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
   * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
   * policy is enabled, or add `istio-system/&#42;` to allow all services in the
   * `istio-system` namespace. This requirement is temporary and will be removed
   * in a future Istio release.
   * </pre>
   *
   * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return A list containing the hosts.
   */
  public com.google.protobuf.ProtocolStringList
      getHostsList() {
    return hosts_;
  }
  /**
   * <pre>
   * One or more service hosts exposed by the listener
   * in `namespace/dnsName` format. Services in the specified namespace
   * matching `dnsName` will be exposed.
   * The corresponding service can be a service in the service registry
   * (e.g., a Kubernetes or cloud foundry service) or a service specified
   * using a `ServiceEntry` or `VirtualService` configuration. Any
   * associated `DestinationRule` in the same namespace will also be used.
   * The `dnsName` should be specified using FQDN format, optionally including
   * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
   * Set the `dnsName` to `*` to select all services from the specified namespace
   * (e.g., `prod/&#42;`).
   * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
   * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
   * service from any available namespace while `./foo.example.com` only selects
   * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
   * Istio will configure the sidecar to be able to reach every service in the
   * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
   * to completely trim the configuration for sidecars that simply receive traffic
   * and respond, but make no outbound connections of their own.
   * NOTE: Only services and configuration artifacts exported to the sidecar's
   * namespace (e.g., `exportTo` value of `*`) can be referenced.
   * Private configurations (e.g., `exportTo` set to `.`) will
   * not be available. Refer to the `exportTo` setting in `VirtualService`,
   * `DestinationRule`, and `ServiceEntry` configurations for details.
   * **WARNING:** The list of egress hosts in a `Sidecar` must also include
   * the Mixer control plane services if they are enabled. Envoy will not
   * be able to reach them otherwise. For example, add host
   * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
   * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
   * policy is enabled, or add `istio-system/&#42;` to allow all services in the
   * `istio-system` namespace. This requirement is temporary and will be removed
   * in a future Istio release.
   * </pre>
   *
   * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The count of hosts.
   */
  public int getHostsCount() {
    return hosts_.size();
  }
  /**
   * <pre>
   * One or more service hosts exposed by the listener
   * in `namespace/dnsName` format. Services in the specified namespace
   * matching `dnsName` will be exposed.
   * The corresponding service can be a service in the service registry
   * (e.g., a Kubernetes or cloud foundry service) or a service specified
   * using a `ServiceEntry` or `VirtualService` configuration. Any
   * associated `DestinationRule` in the same namespace will also be used.
   * The `dnsName` should be specified using FQDN format, optionally including
   * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
   * Set the `dnsName` to `*` to select all services from the specified namespace
   * (e.g., `prod/&#42;`).
   * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
   * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
   * service from any available namespace while `./foo.example.com` only selects
   * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
   * Istio will configure the sidecar to be able to reach every service in the
   * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
   * to completely trim the configuration for sidecars that simply receive traffic
   * and respond, but make no outbound connections of their own.
   * NOTE: Only services and configuration artifacts exported to the sidecar's
   * namespace (e.g., `exportTo` value of `*`) can be referenced.
   * Private configurations (e.g., `exportTo` set to `.`) will
   * not be available. Refer to the `exportTo` setting in `VirtualService`,
   * `DestinationRule`, and `ServiceEntry` configurations for details.
   * **WARNING:** The list of egress hosts in a `Sidecar` must also include
   * the Mixer control plane services if they are enabled. Envoy will not
   * be able to reach them otherwise. For example, add host
   * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
   * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
   * policy is enabled, or add `istio-system/&#42;` to allow all services in the
   * `istio-system` namespace. This requirement is temporary and will be removed
   * in a future Istio release.
   * </pre>
   *
   * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   * @param index The index of the element to return.
   * @return The hosts at the given index.
   */
  public java.lang.String getHosts(int index) {
    return hosts_.get(index);
  }
  /**
   * <pre>
   * One or more service hosts exposed by the listener
   * in `namespace/dnsName` format. Services in the specified namespace
   * matching `dnsName` will be exposed.
   * The corresponding service can be a service in the service registry
   * (e.g., a Kubernetes or cloud foundry service) or a service specified
   * using a `ServiceEntry` or `VirtualService` configuration. Any
   * associated `DestinationRule` in the same namespace will also be used.
   * The `dnsName` should be specified using FQDN format, optionally including
   * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
   * Set the `dnsName` to `*` to select all services from the specified namespace
   * (e.g., `prod/&#42;`).
   * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
   * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
   * service from any available namespace while `./foo.example.com` only selects
   * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
   * Istio will configure the sidecar to be able to reach every service in the
   * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
   * to completely trim the configuration for sidecars that simply receive traffic
   * and respond, but make no outbound connections of their own.
   * NOTE: Only services and configuration artifacts exported to the sidecar's
   * namespace (e.g., `exportTo` value of `*`) can be referenced.
   * Private configurations (e.g., `exportTo` set to `.`) will
   * not be available. Refer to the `exportTo` setting in `VirtualService`,
   * `DestinationRule`, and `ServiceEntry` configurations for details.
   * **WARNING:** The list of egress hosts in a `Sidecar` must also include
   * the Mixer control plane services if they are enabled. Envoy will not
   * be able to reach them otherwise. For example, add host
   * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
   * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
   * policy is enabled, or add `istio-system/&#42;` to allow all services in the
   * `istio-system` namespace. This requirement is temporary and will be removed
   * in a future Istio release.
   * </pre>
   *
   * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
   * @param index The index of the value to return.
   * @return The bytes of the hosts at the given index.
   */
  public com.google.protobuf.ByteString
      getHostsBytes(int index) {
    return hosts_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (port_ != null) {
      output.writeMessage(1, getPort());
    }
    if (!getBindBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, bind_);
    }
    if (captureMode_ != io.ourea.adapter.model.istio.CaptureMode.DEFAULT.getNumber()) {
      output.writeEnum(3, captureMode_);
    }
    for (int i = 0; i < hosts_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, hosts_.getRaw(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (port_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPort());
    }
    if (!getBindBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, bind_);
    }
    if (captureMode_ != io.ourea.adapter.model.istio.CaptureMode.DEFAULT.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, captureMode_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < hosts_.size(); i++) {
        dataSize += computeStringSizeNoTag(hosts_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getHostsList().size();
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.ourea.adapter.model.istio.IstioEgressListener)) {
      return super.equals(obj);
    }
    io.ourea.adapter.model.istio.IstioEgressListener other = (io.ourea.adapter.model.istio.IstioEgressListener) obj;

    if (hasPort() != other.hasPort()) return false;
    if (hasPort()) {
      if (!getPort()
          .equals(other.getPort())) return false;
    }
    if (!getBind()
        .equals(other.getBind())) return false;
    if (captureMode_ != other.captureMode_) return false;
    if (!getHostsList()
        .equals(other.getHostsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPort()) {
      hash = (37 * hash) + PORT_FIELD_NUMBER;
      hash = (53 * hash) + getPort().hashCode();
    }
    hash = (37 * hash) + BIND_FIELD_NUMBER;
    hash = (53 * hash) + getBind().hashCode();
    hash = (37 * hash) + CAPTURE_MODE_FIELD_NUMBER;
    hash = (53 * hash) + captureMode_;
    if (getHostsCount() > 0) {
      hash = (37 * hash) + HOSTS_FIELD_NUMBER;
      hash = (53 * hash) + getHostsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.IstioEgressListener parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.ourea.adapter.model.istio.IstioEgressListener prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * `IstioEgressListener` specifies the properties of an outbound traffic
   * listener on the sidecar proxy attached to a workload instance.
   * </pre>
   *
   * Protobuf type {@code istio.networking.v1alpha3.IstioEgressListener}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:istio.networking.v1alpha3.IstioEgressListener)
      io.ourea.adapter.model.istio.IstioEgressListenerOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.ourea.adapter.model.istio.SidecarOuterClass.internal_static_istio_networking_v1alpha3_IstioEgressListener_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.ourea.adapter.model.istio.SidecarOuterClass.internal_static_istio_networking_v1alpha3_IstioEgressListener_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.ourea.adapter.model.istio.IstioEgressListener.class, io.ourea.adapter.model.istio.IstioEgressListener.Builder.class);
    }

    // Construct using io.ourea.adapter.model.istio.IstioEgressListener.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (portBuilder_ == null) {
        port_ = null;
      } else {
        port_ = null;
        portBuilder_ = null;
      }
      bind_ = "";

      captureMode_ = 0;

      hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.ourea.adapter.model.istio.SidecarOuterClass.internal_static_istio_networking_v1alpha3_IstioEgressListener_descriptor;
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.IstioEgressListener getDefaultInstanceForType() {
      return io.ourea.adapter.model.istio.IstioEgressListener.getDefaultInstance();
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.IstioEgressListener build() {
      io.ourea.adapter.model.istio.IstioEgressListener result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.IstioEgressListener buildPartial() {
      io.ourea.adapter.model.istio.IstioEgressListener result = new io.ourea.adapter.model.istio.IstioEgressListener(this);
      int from_bitField0_ = bitField0_;
      if (portBuilder_ == null) {
        result.port_ = port_;
      } else {
        result.port_ = portBuilder_.build();
      }
      result.bind_ = bind_;
      result.captureMode_ = captureMode_;
      if (((bitField0_ & 0x00000001) != 0)) {
        hosts_ = hosts_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.hosts_ = hosts_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.ourea.adapter.model.istio.IstioEgressListener) {
        return mergeFrom((io.ourea.adapter.model.istio.IstioEgressListener)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.ourea.adapter.model.istio.IstioEgressListener other) {
      if (other == io.ourea.adapter.model.istio.IstioEgressListener.getDefaultInstance()) return this;
      if (other.hasPort()) {
        mergePort(other.getPort());
      }
      if (!other.getBind().isEmpty()) {
        bind_ = other.bind_;
        onChanged();
      }
      if (other.captureMode_ != 0) {
        setCaptureModeValue(other.getCaptureModeValue());
      }
      if (!other.hosts_.isEmpty()) {
        if (hosts_.isEmpty()) {
          hosts_ = other.hosts_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureHostsIsMutable();
          hosts_.addAll(other.hosts_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.ourea.adapter.model.istio.IstioEgressListener parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.ourea.adapter.model.istio.IstioEgressListener) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private io.ourea.adapter.model.Port port_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.Port, io.ourea.adapter.model.Port.Builder, io.ourea.adapter.model.PortOrBuilder> portBuilder_;
    /**
     * <pre>
     * The port associated with the listener. If using Unix domain socket,
     * use 0 as the port number, with a valid protocol. The port if
     * specified, will be used as the default destination port associated
     * with the imported hosts. If the port is omitted, Istio will infer the
     * listener ports based on the imported hosts. Note that when multiple
     * egress listeners are specified, where one or more listeners have
     * specific ports while others have no port, the hosts exposed on a
     * listener port will be based on the listener with the most specific
     * port.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Port port = 1;</code>
     * @return Whether the port field is set.
     */
    public boolean hasPort() {
      return portBuilder_ != null || port_ != null;
    }
    /**
     * <pre>
     * The port associated with the listener. If using Unix domain socket,
     * use 0 as the port number, with a valid protocol. The port if
     * specified, will be used as the default destination port associated
     * with the imported hosts. If the port is omitted, Istio will infer the
     * listener ports based on the imported hosts. Note that when multiple
     * egress listeners are specified, where one or more listeners have
     * specific ports while others have no port, the hosts exposed on a
     * listener port will be based on the listener with the most specific
     * port.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Port port = 1;</code>
     * @return The port.
     */
    public io.ourea.adapter.model.Port getPort() {
      if (portBuilder_ == null) {
        return port_ == null ? io.ourea.adapter.model.Port.getDefaultInstance() : port_;
      } else {
        return portBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The port associated with the listener. If using Unix domain socket,
     * use 0 as the port number, with a valid protocol. The port if
     * specified, will be used as the default destination port associated
     * with the imported hosts. If the port is omitted, Istio will infer the
     * listener ports based on the imported hosts. Note that when multiple
     * egress listeners are specified, where one or more listeners have
     * specific ports while others have no port, the hosts exposed on a
     * listener port will be based on the listener with the most specific
     * port.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Port port = 1;</code>
     */
    public Builder setPort(io.ourea.adapter.model.Port value) {
      if (portBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        port_ = value;
        onChanged();
      } else {
        portBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The port associated with the listener. If using Unix domain socket,
     * use 0 as the port number, with a valid protocol. The port if
     * specified, will be used as the default destination port associated
     * with the imported hosts. If the port is omitted, Istio will infer the
     * listener ports based on the imported hosts. Note that when multiple
     * egress listeners are specified, where one or more listeners have
     * specific ports while others have no port, the hosts exposed on a
     * listener port will be based on the listener with the most specific
     * port.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Port port = 1;</code>
     */
    public Builder setPort(
        io.ourea.adapter.model.Port.Builder builderForValue) {
      if (portBuilder_ == null) {
        port_ = builderForValue.build();
        onChanged();
      } else {
        portBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The port associated with the listener. If using Unix domain socket,
     * use 0 as the port number, with a valid protocol. The port if
     * specified, will be used as the default destination port associated
     * with the imported hosts. If the port is omitted, Istio will infer the
     * listener ports based on the imported hosts. Note that when multiple
     * egress listeners are specified, where one or more listeners have
     * specific ports while others have no port, the hosts exposed on a
     * listener port will be based on the listener with the most specific
     * port.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Port port = 1;</code>
     */
    public Builder mergePort(io.ourea.adapter.model.Port value) {
      if (portBuilder_ == null) {
        if (port_ != null) {
          port_ =
            io.ourea.adapter.model.Port.newBuilder(port_).mergeFrom(value).buildPartial();
        } else {
          port_ = value;
        }
        onChanged();
      } else {
        portBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The port associated with the listener. If using Unix domain socket,
     * use 0 as the port number, with a valid protocol. The port if
     * specified, will be used as the default destination port associated
     * with the imported hosts. If the port is omitted, Istio will infer the
     * listener ports based on the imported hosts. Note that when multiple
     * egress listeners are specified, where one or more listeners have
     * specific ports while others have no port, the hosts exposed on a
     * listener port will be based on the listener with the most specific
     * port.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Port port = 1;</code>
     */
    public Builder clearPort() {
      if (portBuilder_ == null) {
        port_ = null;
        onChanged();
      } else {
        port_ = null;
        portBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The port associated with the listener. If using Unix domain socket,
     * use 0 as the port number, with a valid protocol. The port if
     * specified, will be used as the default destination port associated
     * with the imported hosts. If the port is omitted, Istio will infer the
     * listener ports based on the imported hosts. Note that when multiple
     * egress listeners are specified, where one or more listeners have
     * specific ports while others have no port, the hosts exposed on a
     * listener port will be based on the listener with the most specific
     * port.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Port port = 1;</code>
     */
    public io.ourea.adapter.model.Port.Builder getPortBuilder() {
      
      onChanged();
      return getPortFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The port associated with the listener. If using Unix domain socket,
     * use 0 as the port number, with a valid protocol. The port if
     * specified, will be used as the default destination port associated
     * with the imported hosts. If the port is omitted, Istio will infer the
     * listener ports based on the imported hosts. Note that when multiple
     * egress listeners are specified, where one or more listeners have
     * specific ports while others have no port, the hosts exposed on a
     * listener port will be based on the listener with the most specific
     * port.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Port port = 1;</code>
     */
    public io.ourea.adapter.model.PortOrBuilder getPortOrBuilder() {
      if (portBuilder_ != null) {
        return portBuilder_.getMessageOrBuilder();
      } else {
        return port_ == null ?
            io.ourea.adapter.model.Port.getDefaultInstance() : port_;
      }
    }
    /**
     * <pre>
     * The port associated with the listener. If using Unix domain socket,
     * use 0 as the port number, with a valid protocol. The port if
     * specified, will be used as the default destination port associated
     * with the imported hosts. If the port is omitted, Istio will infer the
     * listener ports based on the imported hosts. Note that when multiple
     * egress listeners are specified, where one or more listeners have
     * specific ports while others have no port, the hosts exposed on a
     * listener port will be based on the listener with the most specific
     * port.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.Port port = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.ourea.adapter.model.Port, io.ourea.adapter.model.Port.Builder, io.ourea.adapter.model.PortOrBuilder> 
        getPortFieldBuilder() {
      if (portBuilder_ == null) {
        portBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.ourea.adapter.model.Port, io.ourea.adapter.model.Port.Builder, io.ourea.adapter.model.PortOrBuilder>(
                getPort(),
                getParentForChildren(),
                isClean());
        port_ = null;
      }
      return portBuilder_;
    }

    private java.lang.Object bind_ = "";
    /**
     * <pre>
     * The IP or the Unix domain socket to which the listener should be bound
     * to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or
     * `unix:///path/to/uds` or `unix://&#64;foobar` (Linux abstract namespace). If
     * omitted, Istio will automatically configure the defaults based on imported
     * services, the workload instances to which this configuration is applied to and
     * the captureMode. If captureMode is `NONE`, bind will default to
     * 127.0.0.1.
     * </pre>
     *
     * <code>string bind = 2;</code>
     * @return The bind.
     */
    public java.lang.String getBind() {
      java.lang.Object ref = bind_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        bind_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The IP or the Unix domain socket to which the listener should be bound
     * to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or
     * `unix:///path/to/uds` or `unix://&#64;foobar` (Linux abstract namespace). If
     * omitted, Istio will automatically configure the defaults based on imported
     * services, the workload instances to which this configuration is applied to and
     * the captureMode. If captureMode is `NONE`, bind will default to
     * 127.0.0.1.
     * </pre>
     *
     * <code>string bind = 2;</code>
     * @return The bytes for bind.
     */
    public com.google.protobuf.ByteString
        getBindBytes() {
      java.lang.Object ref = bind_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        bind_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The IP or the Unix domain socket to which the listener should be bound
     * to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or
     * `unix:///path/to/uds` or `unix://&#64;foobar` (Linux abstract namespace). If
     * omitted, Istio will automatically configure the defaults based on imported
     * services, the workload instances to which this configuration is applied to and
     * the captureMode. If captureMode is `NONE`, bind will default to
     * 127.0.0.1.
     * </pre>
     *
     * <code>string bind = 2;</code>
     * @param value The bind to set.
     * @return This builder for chaining.
     */
    public Builder setBind(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      bind_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The IP or the Unix domain socket to which the listener should be bound
     * to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or
     * `unix:///path/to/uds` or `unix://&#64;foobar` (Linux abstract namespace). If
     * omitted, Istio will automatically configure the defaults based on imported
     * services, the workload instances to which this configuration is applied to and
     * the captureMode. If captureMode is `NONE`, bind will default to
     * 127.0.0.1.
     * </pre>
     *
     * <code>string bind = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearBind() {
      
      bind_ = getDefaultInstance().getBind();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The IP or the Unix domain socket to which the listener should be bound
     * to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or
     * `unix:///path/to/uds` or `unix://&#64;foobar` (Linux abstract namespace). If
     * omitted, Istio will automatically configure the defaults based on imported
     * services, the workload instances to which this configuration is applied to and
     * the captureMode. If captureMode is `NONE`, bind will default to
     * 127.0.0.1.
     * </pre>
     *
     * <code>string bind = 2;</code>
     * @param value The bytes for bind to set.
     * @return This builder for chaining.
     */
    public Builder setBindBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      bind_ = value;
      onChanged();
      return this;
    }

    private int captureMode_ = 0;
    /**
     * <pre>
     * When the bind address is an IP, the captureMode option dictates
     * how traffic to the listener is expected to be captured (or not).
     * captureMode must be DEFAULT or `NONE` for Unix domain socket binds.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CaptureMode capture_mode = 3;</code>
     * @return The enum numeric value on the wire for captureMode.
     */
    @java.lang.Override public int getCaptureModeValue() {
      return captureMode_;
    }
    /**
     * <pre>
     * When the bind address is an IP, the captureMode option dictates
     * how traffic to the listener is expected to be captured (or not).
     * captureMode must be DEFAULT or `NONE` for Unix domain socket binds.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CaptureMode capture_mode = 3;</code>
     * @param value The enum numeric value on the wire for captureMode to set.
     * @return This builder for chaining.
     */
    public Builder setCaptureModeValue(int value) {
      
      captureMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When the bind address is an IP, the captureMode option dictates
     * how traffic to the listener is expected to be captured (or not).
     * captureMode must be DEFAULT or `NONE` for Unix domain socket binds.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CaptureMode capture_mode = 3;</code>
     * @return The captureMode.
     */
    @java.lang.Override
    public io.ourea.adapter.model.istio.CaptureMode getCaptureMode() {
      @SuppressWarnings("deprecation")
      io.ourea.adapter.model.istio.CaptureMode result = io.ourea.adapter.model.istio.CaptureMode.valueOf(captureMode_);
      return result == null ? io.ourea.adapter.model.istio.CaptureMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * When the bind address is an IP, the captureMode option dictates
     * how traffic to the listener is expected to be captured (or not).
     * captureMode must be DEFAULT or `NONE` for Unix domain socket binds.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CaptureMode capture_mode = 3;</code>
     * @param value The captureMode to set.
     * @return This builder for chaining.
     */
    public Builder setCaptureMode(io.ourea.adapter.model.istio.CaptureMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      captureMode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When the bind address is an IP, the captureMode option dictates
     * how traffic to the listener is expected to be captured (or not).
     * captureMode must be DEFAULT or `NONE` for Unix domain socket binds.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.CaptureMode capture_mode = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearCaptureMode() {
      
      captureMode_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureHostsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        hosts_ = new com.google.protobuf.LazyStringArrayList(hosts_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * One or more service hosts exposed by the listener
     * in `namespace/dnsName` format. Services in the specified namespace
     * matching `dnsName` will be exposed.
     * The corresponding service can be a service in the service registry
     * (e.g., a Kubernetes or cloud foundry service) or a service specified
     * using a `ServiceEntry` or `VirtualService` configuration. Any
     * associated `DestinationRule` in the same namespace will also be used.
     * The `dnsName` should be specified using FQDN format, optionally including
     * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
     * Set the `dnsName` to `*` to select all services from the specified namespace
     * (e.g., `prod/&#42;`).
     * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
     * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
     * service from any available namespace while `./foo.example.com` only selects
     * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
     * Istio will configure the sidecar to be able to reach every service in the
     * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
     * to completely trim the configuration for sidecars that simply receive traffic
     * and respond, but make no outbound connections of their own.
     * NOTE: Only services and configuration artifacts exported to the sidecar's
     * namespace (e.g., `exportTo` value of `*`) can be referenced.
     * Private configurations (e.g., `exportTo` set to `.`) will
     * not be available. Refer to the `exportTo` setting in `VirtualService`,
     * `DestinationRule`, and `ServiceEntry` configurations for details.
     * **WARNING:** The list of egress hosts in a `Sidecar` must also include
     * the Mixer control plane services if they are enabled. Envoy will not
     * be able to reach them otherwise. For example, add host
     * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
     * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
     * policy is enabled, or add `istio-system/&#42;` to allow all services in the
     * `istio-system` namespace. This requirement is temporary and will be removed
     * in a future Istio release.
     * </pre>
     *
     * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return A list containing the hosts.
     */
    public com.google.protobuf.ProtocolStringList
        getHostsList() {
      return hosts_.getUnmodifiableView();
    }
    /**
     * <pre>
     * One or more service hosts exposed by the listener
     * in `namespace/dnsName` format. Services in the specified namespace
     * matching `dnsName` will be exposed.
     * The corresponding service can be a service in the service registry
     * (e.g., a Kubernetes or cloud foundry service) or a service specified
     * using a `ServiceEntry` or `VirtualService` configuration. Any
     * associated `DestinationRule` in the same namespace will also be used.
     * The `dnsName` should be specified using FQDN format, optionally including
     * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
     * Set the `dnsName` to `*` to select all services from the specified namespace
     * (e.g., `prod/&#42;`).
     * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
     * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
     * service from any available namespace while `./foo.example.com` only selects
     * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
     * Istio will configure the sidecar to be able to reach every service in the
     * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
     * to completely trim the configuration for sidecars that simply receive traffic
     * and respond, but make no outbound connections of their own.
     * NOTE: Only services and configuration artifacts exported to the sidecar's
     * namespace (e.g., `exportTo` value of `*`) can be referenced.
     * Private configurations (e.g., `exportTo` set to `.`) will
     * not be available. Refer to the `exportTo` setting in `VirtualService`,
     * `DestinationRule`, and `ServiceEntry` configurations for details.
     * **WARNING:** The list of egress hosts in a `Sidecar` must also include
     * the Mixer control plane services if they are enabled. Envoy will not
     * be able to reach them otherwise. For example, add host
     * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
     * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
     * policy is enabled, or add `istio-system/&#42;` to allow all services in the
     * `istio-system` namespace. This requirement is temporary and will be removed
     * in a future Istio release.
     * </pre>
     *
     * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The count of hosts.
     */
    public int getHostsCount() {
      return hosts_.size();
    }
    /**
     * <pre>
     * One or more service hosts exposed by the listener
     * in `namespace/dnsName` format. Services in the specified namespace
     * matching `dnsName` will be exposed.
     * The corresponding service can be a service in the service registry
     * (e.g., a Kubernetes or cloud foundry service) or a service specified
     * using a `ServiceEntry` or `VirtualService` configuration. Any
     * associated `DestinationRule` in the same namespace will also be used.
     * The `dnsName` should be specified using FQDN format, optionally including
     * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
     * Set the `dnsName` to `*` to select all services from the specified namespace
     * (e.g., `prod/&#42;`).
     * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
     * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
     * service from any available namespace while `./foo.example.com` only selects
     * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
     * Istio will configure the sidecar to be able to reach every service in the
     * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
     * to completely trim the configuration for sidecars that simply receive traffic
     * and respond, but make no outbound connections of their own.
     * NOTE: Only services and configuration artifacts exported to the sidecar's
     * namespace (e.g., `exportTo` value of `*`) can be referenced.
     * Private configurations (e.g., `exportTo` set to `.`) will
     * not be available. Refer to the `exportTo` setting in `VirtualService`,
     * `DestinationRule`, and `ServiceEntry` configurations for details.
     * **WARNING:** The list of egress hosts in a `Sidecar` must also include
     * the Mixer control plane services if they are enabled. Envoy will not
     * be able to reach them otherwise. For example, add host
     * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
     * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
     * policy is enabled, or add `istio-system/&#42;` to allow all services in the
     * `istio-system` namespace. This requirement is temporary and will be removed
     * in a future Istio release.
     * </pre>
     *
     * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param index The index of the element to return.
     * @return The hosts at the given index.
     */
    public java.lang.String getHosts(int index) {
      return hosts_.get(index);
    }
    /**
     * <pre>
     * One or more service hosts exposed by the listener
     * in `namespace/dnsName` format. Services in the specified namespace
     * matching `dnsName` will be exposed.
     * The corresponding service can be a service in the service registry
     * (e.g., a Kubernetes or cloud foundry service) or a service specified
     * using a `ServiceEntry` or `VirtualService` configuration. Any
     * associated `DestinationRule` in the same namespace will also be used.
     * The `dnsName` should be specified using FQDN format, optionally including
     * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
     * Set the `dnsName` to `*` to select all services from the specified namespace
     * (e.g., `prod/&#42;`).
     * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
     * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
     * service from any available namespace while `./foo.example.com` only selects
     * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
     * Istio will configure the sidecar to be able to reach every service in the
     * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
     * to completely trim the configuration for sidecars that simply receive traffic
     * and respond, but make no outbound connections of their own.
     * NOTE: Only services and configuration artifacts exported to the sidecar's
     * namespace (e.g., `exportTo` value of `*`) can be referenced.
     * Private configurations (e.g., `exportTo` set to `.`) will
     * not be available. Refer to the `exportTo` setting in `VirtualService`,
     * `DestinationRule`, and `ServiceEntry` configurations for details.
     * **WARNING:** The list of egress hosts in a `Sidecar` must also include
     * the Mixer control plane services if they are enabled. Envoy will not
     * be able to reach them otherwise. For example, add host
     * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
     * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
     * policy is enabled, or add `istio-system/&#42;` to allow all services in the
     * `istio-system` namespace. This requirement is temporary and will be removed
     * in a future Istio release.
     * </pre>
     *
     * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param index The index of the value to return.
     * @return The bytes of the hosts at the given index.
     */
    public com.google.protobuf.ByteString
        getHostsBytes(int index) {
      return hosts_.getByteString(index);
    }
    /**
     * <pre>
     * One or more service hosts exposed by the listener
     * in `namespace/dnsName` format. Services in the specified namespace
     * matching `dnsName` will be exposed.
     * The corresponding service can be a service in the service registry
     * (e.g., a Kubernetes or cloud foundry service) or a service specified
     * using a `ServiceEntry` or `VirtualService` configuration. Any
     * associated `DestinationRule` in the same namespace will also be used.
     * The `dnsName` should be specified using FQDN format, optionally including
     * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
     * Set the `dnsName` to `*` to select all services from the specified namespace
     * (e.g., `prod/&#42;`).
     * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
     * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
     * service from any available namespace while `./foo.example.com` only selects
     * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
     * Istio will configure the sidecar to be able to reach every service in the
     * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
     * to completely trim the configuration for sidecars that simply receive traffic
     * and respond, but make no outbound connections of their own.
     * NOTE: Only services and configuration artifacts exported to the sidecar's
     * namespace (e.g., `exportTo` value of `*`) can be referenced.
     * Private configurations (e.g., `exportTo` set to `.`) will
     * not be available. Refer to the `exportTo` setting in `VirtualService`,
     * `DestinationRule`, and `ServiceEntry` configurations for details.
     * **WARNING:** The list of egress hosts in a `Sidecar` must also include
     * the Mixer control plane services if they are enabled. Envoy will not
     * be able to reach them otherwise. For example, add host
     * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
     * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
     * policy is enabled, or add `istio-system/&#42;` to allow all services in the
     * `istio-system` namespace. This requirement is temporary and will be removed
     * in a future Istio release.
     * </pre>
     *
     * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param index The index to set the value at.
     * @param value The hosts to set.
     * @return This builder for chaining.
     */
    public Builder setHosts(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureHostsIsMutable();
      hosts_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * One or more service hosts exposed by the listener
     * in `namespace/dnsName` format. Services in the specified namespace
     * matching `dnsName` will be exposed.
     * The corresponding service can be a service in the service registry
     * (e.g., a Kubernetes or cloud foundry service) or a service specified
     * using a `ServiceEntry` or `VirtualService` configuration. Any
     * associated `DestinationRule` in the same namespace will also be used.
     * The `dnsName` should be specified using FQDN format, optionally including
     * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
     * Set the `dnsName` to `*` to select all services from the specified namespace
     * (e.g., `prod/&#42;`).
     * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
     * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
     * service from any available namespace while `./foo.example.com` only selects
     * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
     * Istio will configure the sidecar to be able to reach every service in the
     * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
     * to completely trim the configuration for sidecars that simply receive traffic
     * and respond, but make no outbound connections of their own.
     * NOTE: Only services and configuration artifacts exported to the sidecar's
     * namespace (e.g., `exportTo` value of `*`) can be referenced.
     * Private configurations (e.g., `exportTo` set to `.`) will
     * not be available. Refer to the `exportTo` setting in `VirtualService`,
     * `DestinationRule`, and `ServiceEntry` configurations for details.
     * **WARNING:** The list of egress hosts in a `Sidecar` must also include
     * the Mixer control plane services if they are enabled. Envoy will not
     * be able to reach them otherwise. For example, add host
     * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
     * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
     * policy is enabled, or add `istio-system/&#42;` to allow all services in the
     * `istio-system` namespace. This requirement is temporary and will be removed
     * in a future Istio release.
     * </pre>
     *
     * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The hosts to add.
     * @return This builder for chaining.
     */
    public Builder addHosts(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureHostsIsMutable();
      hosts_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * One or more service hosts exposed by the listener
     * in `namespace/dnsName` format. Services in the specified namespace
     * matching `dnsName` will be exposed.
     * The corresponding service can be a service in the service registry
     * (e.g., a Kubernetes or cloud foundry service) or a service specified
     * using a `ServiceEntry` or `VirtualService` configuration. Any
     * associated `DestinationRule` in the same namespace will also be used.
     * The `dnsName` should be specified using FQDN format, optionally including
     * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
     * Set the `dnsName` to `*` to select all services from the specified namespace
     * (e.g., `prod/&#42;`).
     * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
     * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
     * service from any available namespace while `./foo.example.com` only selects
     * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
     * Istio will configure the sidecar to be able to reach every service in the
     * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
     * to completely trim the configuration for sidecars that simply receive traffic
     * and respond, but make no outbound connections of their own.
     * NOTE: Only services and configuration artifacts exported to the sidecar's
     * namespace (e.g., `exportTo` value of `*`) can be referenced.
     * Private configurations (e.g., `exportTo` set to `.`) will
     * not be available. Refer to the `exportTo` setting in `VirtualService`,
     * `DestinationRule`, and `ServiceEntry` configurations for details.
     * **WARNING:** The list of egress hosts in a `Sidecar` must also include
     * the Mixer control plane services if they are enabled. Envoy will not
     * be able to reach them otherwise. For example, add host
     * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
     * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
     * policy is enabled, or add `istio-system/&#42;` to allow all services in the
     * `istio-system` namespace. This requirement is temporary and will be removed
     * in a future Istio release.
     * </pre>
     *
     * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param values The hosts to add.
     * @return This builder for chaining.
     */
    public Builder addAllHosts(
        java.lang.Iterable<java.lang.String> values) {
      ensureHostsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, hosts_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * One or more service hosts exposed by the listener
     * in `namespace/dnsName` format. Services in the specified namespace
     * matching `dnsName` will be exposed.
     * The corresponding service can be a service in the service registry
     * (e.g., a Kubernetes or cloud foundry service) or a service specified
     * using a `ServiceEntry` or `VirtualService` configuration. Any
     * associated `DestinationRule` in the same namespace will also be used.
     * The `dnsName` should be specified using FQDN format, optionally including
     * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
     * Set the `dnsName` to `*` to select all services from the specified namespace
     * (e.g., `prod/&#42;`).
     * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
     * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
     * service from any available namespace while `./foo.example.com` only selects
     * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
     * Istio will configure the sidecar to be able to reach every service in the
     * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
     * to completely trim the configuration for sidecars that simply receive traffic
     * and respond, but make no outbound connections of their own.
     * NOTE: Only services and configuration artifacts exported to the sidecar's
     * namespace (e.g., `exportTo` value of `*`) can be referenced.
     * Private configurations (e.g., `exportTo` set to `.`) will
     * not be available. Refer to the `exportTo` setting in `VirtualService`,
     * `DestinationRule`, and `ServiceEntry` configurations for details.
     * **WARNING:** The list of egress hosts in a `Sidecar` must also include
     * the Mixer control plane services if they are enabled. Envoy will not
     * be able to reach them otherwise. For example, add host
     * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
     * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
     * policy is enabled, or add `istio-system/&#42;` to allow all services in the
     * `istio-system` namespace. This requirement is temporary and will be removed
     * in a future Istio release.
     * </pre>
     *
     * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearHosts() {
      hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * One or more service hosts exposed by the listener
     * in `namespace/dnsName` format. Services in the specified namespace
     * matching `dnsName` will be exposed.
     * The corresponding service can be a service in the service registry
     * (e.g., a Kubernetes or cloud foundry service) or a service specified
     * using a `ServiceEntry` or `VirtualService` configuration. Any
     * associated `DestinationRule` in the same namespace will also be used.
     * The `dnsName` should be specified using FQDN format, optionally including
     * a wildcard character in the left-most component (e.g., `prod/&#42;.example.com`).
     * Set the `dnsName` to `*` to select all services from the specified namespace
     * (e.g., `prod/&#42;`).
     * The `namespace` can be set to `*`, `.`, or `~`, representing any, the current,
     * or no namespace, respectively. For example, `*&#47;foo.example.com` selects the
     * service from any available namespace while `./foo.example.com` only selects
     * the service from the namespace of the sidecar. If a host is set to `*&#47;&#42;`,
     * Istio will configure the sidecar to be able to reach every service in the
     * mesh that is exported to the sidecar's namespace. The value `~/&#42;` can be used
     * to completely trim the configuration for sidecars that simply receive traffic
     * and respond, but make no outbound connections of their own.
     * NOTE: Only services and configuration artifacts exported to the sidecar's
     * namespace (e.g., `exportTo` value of `*`) can be referenced.
     * Private configurations (e.g., `exportTo` set to `.`) will
     * not be available. Refer to the `exportTo` setting in `VirtualService`,
     * `DestinationRule`, and `ServiceEntry` configurations for details.
     * **WARNING:** The list of egress hosts in a `Sidecar` must also include
     * the Mixer control plane services if they are enabled. Envoy will not
     * be able to reach them otherwise. For example, add host
     * `istio-system/istio-telemetry.istio-system.svc.cluster.local` if telemetry
     * is enabled, `istio-system/istio-policy.istio-system.svc.cluster.local` if
     * policy is enabled, or add `istio-system/&#42;` to allow all services in the
     * `istio-system` namespace. This requirement is temporary and will be removed
     * in a future Istio release.
     * </pre>
     *
     * <code>repeated string hosts = 4 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The bytes of the hosts to add.
     * @return This builder for chaining.
     */
    public Builder addHostsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureHostsIsMutable();
      hosts_.add(value);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:istio.networking.v1alpha3.IstioEgressListener)
  }

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.IstioEgressListener)
  private static final io.ourea.adapter.model.istio.IstioEgressListener DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.ourea.adapter.model.istio.IstioEgressListener();
  }

  public static io.ourea.adapter.model.istio.IstioEgressListener getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<IstioEgressListener>
      PARSER = new com.google.protobuf.AbstractParser<IstioEgressListener>() {
    @java.lang.Override
    public IstioEgressListener parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new IstioEgressListener(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<IstioEgressListener> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<IstioEgressListener> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.ourea.adapter.model.istio.IstioEgressListener getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

