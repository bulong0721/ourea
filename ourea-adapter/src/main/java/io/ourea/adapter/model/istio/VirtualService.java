// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: virtual_service.proto

package io.ourea.adapter.model.istio;

/**
 * <pre>
 * Configuration affecting traffic routing.
 * &lt;!-- crd generation tags
 * +cue-gen:VirtualService:groupName:networking.istio.io
 * +cue-gen:VirtualService:version:v1alpha3
 * +cue-gen:VirtualService:storageVersion
 * +cue-gen:VirtualService:annotations:helm.sh/resource-policy=keep
 * +cue-gen:VirtualService:labels:app=istio-pilot,chart=istio,heritage=Tiller,release=istio
 * +cue-gen:VirtualService:subresource:status
 * +cue-gen:VirtualService:scope:Namespaced
 * +cue-gen:VirtualService:resource:categories=istio-io,networking-istio-io,shortNames=vs
 * +cue-gen:VirtualService:printerColumn:name=Gateways,type=string,JSONPath=.spec.gateways,description="The names of gateways and sidecars 
 * that should apply these routes"
 * +cue-gen:VirtualService:printerColumn:name=Hosts,type=string,JSONPath=.spec.hosts,description="The destination hosts to which traffic is being sent"
 * +cue-gen:VirtualService:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp 
 * representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. 
 * Clients may not set this value. It is represented in RFC3339 form and is in UTC.
 * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
 * --&gt;
 * &lt;!-- go code generation tags
 * +kubetype-gen
 * +kubetype-gen:groupVersion=networking.istio.io/v1alpha3
 * +genclient
 * +k8s:deepcopy-gen=true
 * --&gt;
 * </pre>
 *
 * Protobuf type {@code istio.networking.v1alpha3.VirtualService}
 */
public final class VirtualService extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:istio.networking.v1alpha3.VirtualService)
    VirtualServiceOrBuilder {
private static final long serialVersionUID = 0L;
  // Use VirtualService.newBuilder() to construct.
  private VirtualService(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private VirtualService() {
    hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    gateways_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    http_ = java.util.Collections.emptyList();
    tls_ = java.util.Collections.emptyList();
    tcp_ = java.util.Collections.emptyList();
    exportTo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new VirtualService();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private VirtualService(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              hosts_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            hosts_.add(s);
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              gateways_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            gateways_.add(s);
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              http_ = new java.util.ArrayList<io.ourea.adapter.model.istio.HTTPRoute>();
              mutable_bitField0_ |= 0x00000004;
            }
            http_.add(
                input.readMessage(io.ourea.adapter.model.istio.HTTPRoute.parser(), extensionRegistry));
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              tcp_ = new java.util.ArrayList<io.ourea.adapter.model.istio.TCPRoute>();
              mutable_bitField0_ |= 0x00000010;
            }
            tcp_.add(
                input.readMessage(io.ourea.adapter.model.istio.TCPRoute.parser(), extensionRegistry));
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              tls_ = new java.util.ArrayList<io.ourea.adapter.model.istio.TLSRoute>();
              mutable_bitField0_ |= 0x00000008;
            }
            tls_.add(
                input.readMessage(io.ourea.adapter.model.istio.TLSRoute.parser(), extensionRegistry));
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000020) != 0)) {
              exportTo_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000020;
            }
            exportTo_.add(s);
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        hosts_ = hosts_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        gateways_ = gateways_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        http_ = java.util.Collections.unmodifiableList(http_);
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        tcp_ = java.util.Collections.unmodifiableList(tcp_);
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        tls_ = java.util.Collections.unmodifiableList(tls_);
      }
      if (((mutable_bitField0_ & 0x00000020) != 0)) {
        exportTo_ = exportTo_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_VirtualService_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_VirtualService_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.ourea.adapter.model.istio.VirtualService.class, io.ourea.adapter.model.istio.VirtualService.Builder.class);
  }

  public static final int HOSTS_FIELD_NUMBER = 1;
  private com.google.protobuf.LazyStringList hosts_;
  /**
   * <pre>
   * The destination hosts to which traffic is being sent. Could
   * be a DNS name with wildcard prefix or an IP address.  Depending on the
   * platform, short-names can also be used instead of a FQDN (i.e. has no
   * dots in the name). In such a scenario, the FQDN of the host would be
   * derived based on the underlying platform.
   * A single VirtualService can be used to describe all the traffic
   * properties of the corresponding hosts, including those for multiple
   * HTTP and TCP ports. Alternatively, the traffic properties of a host
   * can be defined using more than one VirtualService, with certain
   * caveats. Refer to the
   * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
   * for details.
   * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
   * instead of "reviews.default.svc.cluster.local"), Istio will interpret
   * the short name based on the namespace of the rule, not the service. A
   * rule in the "default" namespace containing a host "reviews" will be
   * interpreted as "reviews.default.svc.cluster.local", irrespective of
   * the actual namespace associated with the reviews service. _To avoid
   * potential misconfigurations, it is recommended to always use fully
   * qualified domain names over short names._
   * The hosts field applies to both HTTP and TCP services. Service inside
   * the mesh, i.e., those found in the service registry, must always be
   * referred to using their alphanumeric names. IP addresses are allowed
   * only for services defined via the Gateway.
   * *Note*: It must be empty for a delegate VirtualService.
   * </pre>
   *
   * <code>repeated string hosts = 1;</code>
   * @return A list containing the hosts.
   */
  public com.google.protobuf.ProtocolStringList
      getHostsList() {
    return hosts_;
  }
  /**
   * <pre>
   * The destination hosts to which traffic is being sent. Could
   * be a DNS name with wildcard prefix or an IP address.  Depending on the
   * platform, short-names can also be used instead of a FQDN (i.e. has no
   * dots in the name). In such a scenario, the FQDN of the host would be
   * derived based on the underlying platform.
   * A single VirtualService can be used to describe all the traffic
   * properties of the corresponding hosts, including those for multiple
   * HTTP and TCP ports. Alternatively, the traffic properties of a host
   * can be defined using more than one VirtualService, with certain
   * caveats. Refer to the
   * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
   * for details.
   * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
   * instead of "reviews.default.svc.cluster.local"), Istio will interpret
   * the short name based on the namespace of the rule, not the service. A
   * rule in the "default" namespace containing a host "reviews" will be
   * interpreted as "reviews.default.svc.cluster.local", irrespective of
   * the actual namespace associated with the reviews service. _To avoid
   * potential misconfigurations, it is recommended to always use fully
   * qualified domain names over short names._
   * The hosts field applies to both HTTP and TCP services. Service inside
   * the mesh, i.e., those found in the service registry, must always be
   * referred to using their alphanumeric names. IP addresses are allowed
   * only for services defined via the Gateway.
   * *Note*: It must be empty for a delegate VirtualService.
   * </pre>
   *
   * <code>repeated string hosts = 1;</code>
   * @return The count of hosts.
   */
  public int getHostsCount() {
    return hosts_.size();
  }
  /**
   * <pre>
   * The destination hosts to which traffic is being sent. Could
   * be a DNS name with wildcard prefix or an IP address.  Depending on the
   * platform, short-names can also be used instead of a FQDN (i.e. has no
   * dots in the name). In such a scenario, the FQDN of the host would be
   * derived based on the underlying platform.
   * A single VirtualService can be used to describe all the traffic
   * properties of the corresponding hosts, including those for multiple
   * HTTP and TCP ports. Alternatively, the traffic properties of a host
   * can be defined using more than one VirtualService, with certain
   * caveats. Refer to the
   * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
   * for details.
   * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
   * instead of "reviews.default.svc.cluster.local"), Istio will interpret
   * the short name based on the namespace of the rule, not the service. A
   * rule in the "default" namespace containing a host "reviews" will be
   * interpreted as "reviews.default.svc.cluster.local", irrespective of
   * the actual namespace associated with the reviews service. _To avoid
   * potential misconfigurations, it is recommended to always use fully
   * qualified domain names over short names._
   * The hosts field applies to both HTTP and TCP services. Service inside
   * the mesh, i.e., those found in the service registry, must always be
   * referred to using their alphanumeric names. IP addresses are allowed
   * only for services defined via the Gateway.
   * *Note*: It must be empty for a delegate VirtualService.
   * </pre>
   *
   * <code>repeated string hosts = 1;</code>
   * @param index The index of the element to return.
   * @return The hosts at the given index.
   */
  public java.lang.String getHosts(int index) {
    return hosts_.get(index);
  }
  /**
   * <pre>
   * The destination hosts to which traffic is being sent. Could
   * be a DNS name with wildcard prefix or an IP address.  Depending on the
   * platform, short-names can also be used instead of a FQDN (i.e. has no
   * dots in the name). In such a scenario, the FQDN of the host would be
   * derived based on the underlying platform.
   * A single VirtualService can be used to describe all the traffic
   * properties of the corresponding hosts, including those for multiple
   * HTTP and TCP ports. Alternatively, the traffic properties of a host
   * can be defined using more than one VirtualService, with certain
   * caveats. Refer to the
   * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
   * for details.
   * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
   * instead of "reviews.default.svc.cluster.local"), Istio will interpret
   * the short name based on the namespace of the rule, not the service. A
   * rule in the "default" namespace containing a host "reviews" will be
   * interpreted as "reviews.default.svc.cluster.local", irrespective of
   * the actual namespace associated with the reviews service. _To avoid
   * potential misconfigurations, it is recommended to always use fully
   * qualified domain names over short names._
   * The hosts field applies to both HTTP and TCP services. Service inside
   * the mesh, i.e., those found in the service registry, must always be
   * referred to using their alphanumeric names. IP addresses are allowed
   * only for services defined via the Gateway.
   * *Note*: It must be empty for a delegate VirtualService.
   * </pre>
   *
   * <code>repeated string hosts = 1;</code>
   * @param index The index of the value to return.
   * @return The bytes of the hosts at the given index.
   */
  public com.google.protobuf.ByteString
      getHostsBytes(int index) {
    return hosts_.getByteString(index);
  }

  public static final int GATEWAYS_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList gateways_;
  /**
   * <pre>
   * The names of gateways and sidecars that should apply these routes.
   * Gateways in other namespaces may be referred to by
   * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
   * namespace qualifier is the same as specifying the VirtualService's
   * namespace. A single VirtualService is used for sidecars inside the mesh as
   * well as for one or more gateways. The selection condition imposed by this
   * field can be overridden using the source field in the match conditions
   * of protocol-specific routes. The reserved word `mesh` is used to imply
   * all the sidecars in the mesh. When this field is omitted, the default
   * gateway (`mesh`) will be used, which would apply the rule to all
   * sidecars in the mesh. If a list of gateway names is provided, the
   * rules will apply only to the gateways. To apply the rules to both
   * gateways and sidecars, specify `mesh` as one of the gateway names.
   * </pre>
   *
   * <code>repeated string gateways = 2;</code>
   * @return A list containing the gateways.
   */
  public com.google.protobuf.ProtocolStringList
      getGatewaysList() {
    return gateways_;
  }
  /**
   * <pre>
   * The names of gateways and sidecars that should apply these routes.
   * Gateways in other namespaces may be referred to by
   * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
   * namespace qualifier is the same as specifying the VirtualService's
   * namespace. A single VirtualService is used for sidecars inside the mesh as
   * well as for one or more gateways. The selection condition imposed by this
   * field can be overridden using the source field in the match conditions
   * of protocol-specific routes. The reserved word `mesh` is used to imply
   * all the sidecars in the mesh. When this field is omitted, the default
   * gateway (`mesh`) will be used, which would apply the rule to all
   * sidecars in the mesh. If a list of gateway names is provided, the
   * rules will apply only to the gateways. To apply the rules to both
   * gateways and sidecars, specify `mesh` as one of the gateway names.
   * </pre>
   *
   * <code>repeated string gateways = 2;</code>
   * @return The count of gateways.
   */
  public int getGatewaysCount() {
    return gateways_.size();
  }
  /**
   * <pre>
   * The names of gateways and sidecars that should apply these routes.
   * Gateways in other namespaces may be referred to by
   * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
   * namespace qualifier is the same as specifying the VirtualService's
   * namespace. A single VirtualService is used for sidecars inside the mesh as
   * well as for one or more gateways. The selection condition imposed by this
   * field can be overridden using the source field in the match conditions
   * of protocol-specific routes. The reserved word `mesh` is used to imply
   * all the sidecars in the mesh. When this field is omitted, the default
   * gateway (`mesh`) will be used, which would apply the rule to all
   * sidecars in the mesh. If a list of gateway names is provided, the
   * rules will apply only to the gateways. To apply the rules to both
   * gateways and sidecars, specify `mesh` as one of the gateway names.
   * </pre>
   *
   * <code>repeated string gateways = 2;</code>
   * @param index The index of the element to return.
   * @return The gateways at the given index.
   */
  public java.lang.String getGateways(int index) {
    return gateways_.get(index);
  }
  /**
   * <pre>
   * The names of gateways and sidecars that should apply these routes.
   * Gateways in other namespaces may be referred to by
   * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
   * namespace qualifier is the same as specifying the VirtualService's
   * namespace. A single VirtualService is used for sidecars inside the mesh as
   * well as for one or more gateways. The selection condition imposed by this
   * field can be overridden using the source field in the match conditions
   * of protocol-specific routes. The reserved word `mesh` is used to imply
   * all the sidecars in the mesh. When this field is omitted, the default
   * gateway (`mesh`) will be used, which would apply the rule to all
   * sidecars in the mesh. If a list of gateway names is provided, the
   * rules will apply only to the gateways. To apply the rules to both
   * gateways and sidecars, specify `mesh` as one of the gateway names.
   * </pre>
   *
   * <code>repeated string gateways = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the gateways at the given index.
   */
  public com.google.protobuf.ByteString
      getGatewaysBytes(int index) {
    return gateways_.getByteString(index);
  }

  public static final int HTTP_FIELD_NUMBER = 3;
  private java.util.List<io.ourea.adapter.model.istio.HTTPRoute> http_;
  /**
   * <pre>
   * An ordered list of route rules for HTTP traffic. HTTP routes will be
   * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
   * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
   * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
   * an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
   */
  @java.lang.Override
  public java.util.List<io.ourea.adapter.model.istio.HTTPRoute> getHttpList() {
    return http_;
  }
  /**
   * <pre>
   * An ordered list of route rules for HTTP traffic. HTTP routes will be
   * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
   * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
   * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
   * an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.ourea.adapter.model.istio.HTTPRouteOrBuilder> 
      getHttpOrBuilderList() {
    return http_;
  }
  /**
   * <pre>
   * An ordered list of route rules for HTTP traffic. HTTP routes will be
   * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
   * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
   * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
   * an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
   */
  @java.lang.Override
  public int getHttpCount() {
    return http_.size();
  }
  /**
   * <pre>
   * An ordered list of route rules for HTTP traffic. HTTP routes will be
   * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
   * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
   * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
   * an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRoute getHttp(int index) {
    return http_.get(index);
  }
  /**
   * <pre>
   * An ordered list of route rules for HTTP traffic. HTTP routes will be
   * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
   * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
   * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
   * an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.HTTPRouteOrBuilder getHttpOrBuilder(
      int index) {
    return http_.get(index);
  }

  public static final int TLS_FIELD_NUMBER = 5;
  private java.util.List<io.ourea.adapter.model.istio.TLSRoute> tls_;
  /**
   * <pre>
   * An ordered list of route rule for non-terminated TLS &amp; HTTPS
   * traffic. Routing is typically performed using the SNI value presented
   * by the ClientHello message. TLS routes will be applied to platform
   * service ports named 'https-*', 'tls-*', unterminated gateway ports using
   * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
   * entry ports using HTTPS/TLS protocols.  The first rule matching an
   * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
   * without associated virtual service will be treated as opaque TCP
   * traffic.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
   */
  @java.lang.Override
  public java.util.List<io.ourea.adapter.model.istio.TLSRoute> getTlsList() {
    return tls_;
  }
  /**
   * <pre>
   * An ordered list of route rule for non-terminated TLS &amp; HTTPS
   * traffic. Routing is typically performed using the SNI value presented
   * by the ClientHello message. TLS routes will be applied to platform
   * service ports named 'https-*', 'tls-*', unterminated gateway ports using
   * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
   * entry ports using HTTPS/TLS protocols.  The first rule matching an
   * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
   * without associated virtual service will be treated as opaque TCP
   * traffic.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.ourea.adapter.model.istio.TLSRouteOrBuilder> 
      getTlsOrBuilderList() {
    return tls_;
  }
  /**
   * <pre>
   * An ordered list of route rule for non-terminated TLS &amp; HTTPS
   * traffic. Routing is typically performed using the SNI value presented
   * by the ClientHello message. TLS routes will be applied to platform
   * service ports named 'https-*', 'tls-*', unterminated gateway ports using
   * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
   * entry ports using HTTPS/TLS protocols.  The first rule matching an
   * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
   * without associated virtual service will be treated as opaque TCP
   * traffic.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
   */
  @java.lang.Override
  public int getTlsCount() {
    return tls_.size();
  }
  /**
   * <pre>
   * An ordered list of route rule for non-terminated TLS &amp; HTTPS
   * traffic. Routing is typically performed using the SNI value presented
   * by the ClientHello message. TLS routes will be applied to platform
   * service ports named 'https-*', 'tls-*', unterminated gateway ports using
   * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
   * entry ports using HTTPS/TLS protocols.  The first rule matching an
   * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
   * without associated virtual service will be treated as opaque TCP
   * traffic.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.TLSRoute getTls(int index) {
    return tls_.get(index);
  }
  /**
   * <pre>
   * An ordered list of route rule for non-terminated TLS &amp; HTTPS
   * traffic. Routing is typically performed using the SNI value presented
   * by the ClientHello message. TLS routes will be applied to platform
   * service ports named 'https-*', 'tls-*', unterminated gateway ports using
   * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
   * entry ports using HTTPS/TLS protocols.  The first rule matching an
   * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
   * without associated virtual service will be treated as opaque TCP
   * traffic.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.TLSRouteOrBuilder getTlsOrBuilder(
      int index) {
    return tls_.get(index);
  }

  public static final int TCP_FIELD_NUMBER = 4;
  private java.util.List<io.ourea.adapter.model.istio.TCPRoute> tcp_;
  /**
   * <pre>
   * An ordered list of route rules for opaque TCP traffic. TCP routes will
   * be applied to any port that is not a HTTP or TLS port. The first rule
   * matching an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
   */
  @java.lang.Override
  public java.util.List<io.ourea.adapter.model.istio.TCPRoute> getTcpList() {
    return tcp_;
  }
  /**
   * <pre>
   * An ordered list of route rules for opaque TCP traffic. TCP routes will
   * be applied to any port that is not a HTTP or TLS port. The first rule
   * matching an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends io.ourea.adapter.model.istio.TCPRouteOrBuilder> 
      getTcpOrBuilderList() {
    return tcp_;
  }
  /**
   * <pre>
   * An ordered list of route rules for opaque TCP traffic. TCP routes will
   * be applied to any port that is not a HTTP or TLS port. The first rule
   * matching an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
   */
  @java.lang.Override
  public int getTcpCount() {
    return tcp_.size();
  }
  /**
   * <pre>
   * An ordered list of route rules for opaque TCP traffic. TCP routes will
   * be applied to any port that is not a HTTP or TLS port. The first rule
   * matching an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.TCPRoute getTcp(int index) {
    return tcp_.get(index);
  }
  /**
   * <pre>
   * An ordered list of route rules for opaque TCP traffic. TCP routes will
   * be applied to any port that is not a HTTP or TLS port. The first rule
   * matching an incoming request is used.
   * </pre>
   *
   * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
   */
  @java.lang.Override
  public io.ourea.adapter.model.istio.TCPRouteOrBuilder getTcpOrBuilder(
      int index) {
    return tcp_.get(index);
  }

  public static final int EXPORT_TO_FIELD_NUMBER = 6;
  private com.google.protobuf.LazyStringList exportTo_;
  /**
   * <pre>
   * A list of namespaces to which this virtual service is exported. Exporting a
   * virtual service allows it to be used by sidecars and gateways defined in
   * other namespaces. This feature provides a mechanism for service owners
   * and mesh administrators to control the visibility of virtual services
   * across namespace boundaries.
   * If no namespaces are specified then the virtual service is exported to all
   * namespaces by default.
   * The value "." is reserved and defines an export to the same namespace that
   * the virtual service is declared in. Similarly the value "*" is reserved and
   * defines an export to all namespaces.
   * NOTE: in the current release, the `exportTo` value is restricted to
   * "." or "*" (i.e., the current namespace or all namespaces).
   * </pre>
   *
   * <code>repeated string export_to = 6;</code>
   * @return A list containing the exportTo.
   */
  public com.google.protobuf.ProtocolStringList
      getExportToList() {
    return exportTo_;
  }
  /**
   * <pre>
   * A list of namespaces to which this virtual service is exported. Exporting a
   * virtual service allows it to be used by sidecars and gateways defined in
   * other namespaces. This feature provides a mechanism for service owners
   * and mesh administrators to control the visibility of virtual services
   * across namespace boundaries.
   * If no namespaces are specified then the virtual service is exported to all
   * namespaces by default.
   * The value "." is reserved and defines an export to the same namespace that
   * the virtual service is declared in. Similarly the value "*" is reserved and
   * defines an export to all namespaces.
   * NOTE: in the current release, the `exportTo` value is restricted to
   * "." or "*" (i.e., the current namespace or all namespaces).
   * </pre>
   *
   * <code>repeated string export_to = 6;</code>
   * @return The count of exportTo.
   */
  public int getExportToCount() {
    return exportTo_.size();
  }
  /**
   * <pre>
   * A list of namespaces to which this virtual service is exported. Exporting a
   * virtual service allows it to be used by sidecars and gateways defined in
   * other namespaces. This feature provides a mechanism for service owners
   * and mesh administrators to control the visibility of virtual services
   * across namespace boundaries.
   * If no namespaces are specified then the virtual service is exported to all
   * namespaces by default.
   * The value "." is reserved and defines an export to the same namespace that
   * the virtual service is declared in. Similarly the value "*" is reserved and
   * defines an export to all namespaces.
   * NOTE: in the current release, the `exportTo` value is restricted to
   * "." or "*" (i.e., the current namespace or all namespaces).
   * </pre>
   *
   * <code>repeated string export_to = 6;</code>
   * @param index The index of the element to return.
   * @return The exportTo at the given index.
   */
  public java.lang.String getExportTo(int index) {
    return exportTo_.get(index);
  }
  /**
   * <pre>
   * A list of namespaces to which this virtual service is exported. Exporting a
   * virtual service allows it to be used by sidecars and gateways defined in
   * other namespaces. This feature provides a mechanism for service owners
   * and mesh administrators to control the visibility of virtual services
   * across namespace boundaries.
   * If no namespaces are specified then the virtual service is exported to all
   * namespaces by default.
   * The value "." is reserved and defines an export to the same namespace that
   * the virtual service is declared in. Similarly the value "*" is reserved and
   * defines an export to all namespaces.
   * NOTE: in the current release, the `exportTo` value is restricted to
   * "." or "*" (i.e., the current namespace or all namespaces).
   * </pre>
   *
   * <code>repeated string export_to = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the exportTo at the given index.
   */
  public com.google.protobuf.ByteString
      getExportToBytes(int index) {
    return exportTo_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < hosts_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, hosts_.getRaw(i));
    }
    for (int i = 0; i < gateways_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, gateways_.getRaw(i));
    }
    for (int i = 0; i < http_.size(); i++) {
      output.writeMessage(3, http_.get(i));
    }
    for (int i = 0; i < tcp_.size(); i++) {
      output.writeMessage(4, tcp_.get(i));
    }
    for (int i = 0; i < tls_.size(); i++) {
      output.writeMessage(5, tls_.get(i));
    }
    for (int i = 0; i < exportTo_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, exportTo_.getRaw(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < hosts_.size(); i++) {
        dataSize += computeStringSizeNoTag(hosts_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getHostsList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < gateways_.size(); i++) {
        dataSize += computeStringSizeNoTag(gateways_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getGatewaysList().size();
    }
    for (int i = 0; i < http_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, http_.get(i));
    }
    for (int i = 0; i < tcp_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, tcp_.get(i));
    }
    for (int i = 0; i < tls_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, tls_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < exportTo_.size(); i++) {
        dataSize += computeStringSizeNoTag(exportTo_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getExportToList().size();
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.ourea.adapter.model.istio.VirtualService)) {
      return super.equals(obj);
    }
    io.ourea.adapter.model.istio.VirtualService other = (io.ourea.adapter.model.istio.VirtualService) obj;

    if (!getHostsList()
        .equals(other.getHostsList())) return false;
    if (!getGatewaysList()
        .equals(other.getGatewaysList())) return false;
    if (!getHttpList()
        .equals(other.getHttpList())) return false;
    if (!getTlsList()
        .equals(other.getTlsList())) return false;
    if (!getTcpList()
        .equals(other.getTcpList())) return false;
    if (!getExportToList()
        .equals(other.getExportToList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getHostsCount() > 0) {
      hash = (37 * hash) + HOSTS_FIELD_NUMBER;
      hash = (53 * hash) + getHostsList().hashCode();
    }
    if (getGatewaysCount() > 0) {
      hash = (37 * hash) + GATEWAYS_FIELD_NUMBER;
      hash = (53 * hash) + getGatewaysList().hashCode();
    }
    if (getHttpCount() > 0) {
      hash = (37 * hash) + HTTP_FIELD_NUMBER;
      hash = (53 * hash) + getHttpList().hashCode();
    }
    if (getTlsCount() > 0) {
      hash = (37 * hash) + TLS_FIELD_NUMBER;
      hash = (53 * hash) + getTlsList().hashCode();
    }
    if (getTcpCount() > 0) {
      hash = (37 * hash) + TCP_FIELD_NUMBER;
      hash = (53 * hash) + getTcpList().hashCode();
    }
    if (getExportToCount() > 0) {
      hash = (37 * hash) + EXPORT_TO_FIELD_NUMBER;
      hash = (53 * hash) + getExportToList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.ourea.adapter.model.istio.VirtualService parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.VirtualService parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.ourea.adapter.model.istio.VirtualService prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Configuration affecting traffic routing.
   * &lt;!-- crd generation tags
   * +cue-gen:VirtualService:groupName:networking.istio.io
   * +cue-gen:VirtualService:version:v1alpha3
   * +cue-gen:VirtualService:storageVersion
   * +cue-gen:VirtualService:annotations:helm.sh/resource-policy=keep
   * +cue-gen:VirtualService:labels:app=istio-pilot,chart=istio,heritage=Tiller,release=istio
   * +cue-gen:VirtualService:subresource:status
   * +cue-gen:VirtualService:scope:Namespaced
   * +cue-gen:VirtualService:resource:categories=istio-io,networking-istio-io,shortNames=vs
   * +cue-gen:VirtualService:printerColumn:name=Gateways,type=string,JSONPath=.spec.gateways,description="The names of gateways and sidecars 
   * that should apply these routes"
   * +cue-gen:VirtualService:printerColumn:name=Hosts,type=string,JSONPath=.spec.hosts,description="The destination hosts to which traffic is being sent"
   * +cue-gen:VirtualService:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp 
   * representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. 
   * Clients may not set this value. It is represented in RFC3339 form and is in UTC.
   * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
   * --&gt;
   * &lt;!-- go code generation tags
   * +kubetype-gen
   * +kubetype-gen:groupVersion=networking.istio.io/v1alpha3
   * +genclient
   * +k8s:deepcopy-gen=true
   * --&gt;
   * </pre>
   *
   * Protobuf type {@code istio.networking.v1alpha3.VirtualService}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:istio.networking.v1alpha3.VirtualService)
      io.ourea.adapter.model.istio.VirtualServiceOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_VirtualService_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_VirtualService_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.ourea.adapter.model.istio.VirtualService.class, io.ourea.adapter.model.istio.VirtualService.Builder.class);
    }

    // Construct using io.ourea.adapter.model.istio.VirtualService.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getHttpFieldBuilder();
        getTlsFieldBuilder();
        getTcpFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      gateways_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      if (httpBuilder_ == null) {
        http_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        httpBuilder_.clear();
      }
      if (tlsBuilder_ == null) {
        tls_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        tlsBuilder_.clear();
      }
      if (tcpBuilder_ == null) {
        tcp_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        tcpBuilder_.clear();
      }
      exportTo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000020);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.ourea.adapter.model.istio.VirtualServiceOuterClass.internal_static_istio_networking_v1alpha3_VirtualService_descriptor;
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.VirtualService getDefaultInstanceForType() {
      return io.ourea.adapter.model.istio.VirtualService.getDefaultInstance();
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.VirtualService build() {
      io.ourea.adapter.model.istio.VirtualService result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.VirtualService buildPartial() {
      io.ourea.adapter.model.istio.VirtualService result = new io.ourea.adapter.model.istio.VirtualService(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) != 0)) {
        hosts_ = hosts_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.hosts_ = hosts_;
      if (((bitField0_ & 0x00000002) != 0)) {
        gateways_ = gateways_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.gateways_ = gateways_;
      if (httpBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          http_ = java.util.Collections.unmodifiableList(http_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.http_ = http_;
      } else {
        result.http_ = httpBuilder_.build();
      }
      if (tlsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          tls_ = java.util.Collections.unmodifiableList(tls_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.tls_ = tls_;
      } else {
        result.tls_ = tlsBuilder_.build();
      }
      if (tcpBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          tcp_ = java.util.Collections.unmodifiableList(tcp_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.tcp_ = tcp_;
      } else {
        result.tcp_ = tcpBuilder_.build();
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        exportTo_ = exportTo_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.exportTo_ = exportTo_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.ourea.adapter.model.istio.VirtualService) {
        return mergeFrom((io.ourea.adapter.model.istio.VirtualService)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.ourea.adapter.model.istio.VirtualService other) {
      if (other == io.ourea.adapter.model.istio.VirtualService.getDefaultInstance()) return this;
      if (!other.hosts_.isEmpty()) {
        if (hosts_.isEmpty()) {
          hosts_ = other.hosts_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureHostsIsMutable();
          hosts_.addAll(other.hosts_);
        }
        onChanged();
      }
      if (!other.gateways_.isEmpty()) {
        if (gateways_.isEmpty()) {
          gateways_ = other.gateways_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureGatewaysIsMutable();
          gateways_.addAll(other.gateways_);
        }
        onChanged();
      }
      if (httpBuilder_ == null) {
        if (!other.http_.isEmpty()) {
          if (http_.isEmpty()) {
            http_ = other.http_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureHttpIsMutable();
            http_.addAll(other.http_);
          }
          onChanged();
        }
      } else {
        if (!other.http_.isEmpty()) {
          if (httpBuilder_.isEmpty()) {
            httpBuilder_.dispose();
            httpBuilder_ = null;
            http_ = other.http_;
            bitField0_ = (bitField0_ & ~0x00000004);
            httpBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHttpFieldBuilder() : null;
          } else {
            httpBuilder_.addAllMessages(other.http_);
          }
        }
      }
      if (tlsBuilder_ == null) {
        if (!other.tls_.isEmpty()) {
          if (tls_.isEmpty()) {
            tls_ = other.tls_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTlsIsMutable();
            tls_.addAll(other.tls_);
          }
          onChanged();
        }
      } else {
        if (!other.tls_.isEmpty()) {
          if (tlsBuilder_.isEmpty()) {
            tlsBuilder_.dispose();
            tlsBuilder_ = null;
            tls_ = other.tls_;
            bitField0_ = (bitField0_ & ~0x00000008);
            tlsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTlsFieldBuilder() : null;
          } else {
            tlsBuilder_.addAllMessages(other.tls_);
          }
        }
      }
      if (tcpBuilder_ == null) {
        if (!other.tcp_.isEmpty()) {
          if (tcp_.isEmpty()) {
            tcp_ = other.tcp_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureTcpIsMutable();
            tcp_.addAll(other.tcp_);
          }
          onChanged();
        }
      } else {
        if (!other.tcp_.isEmpty()) {
          if (tcpBuilder_.isEmpty()) {
            tcpBuilder_.dispose();
            tcpBuilder_ = null;
            tcp_ = other.tcp_;
            bitField0_ = (bitField0_ & ~0x00000010);
            tcpBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getTcpFieldBuilder() : null;
          } else {
            tcpBuilder_.addAllMessages(other.tcp_);
          }
        }
      }
      if (!other.exportTo_.isEmpty()) {
        if (exportTo_.isEmpty()) {
          exportTo_ = other.exportTo_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureExportToIsMutable();
          exportTo_.addAll(other.exportTo_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.ourea.adapter.model.istio.VirtualService parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.ourea.adapter.model.istio.VirtualService) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.LazyStringList hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureHostsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        hosts_ = new com.google.protobuf.LazyStringArrayList(hosts_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * The destination hosts to which traffic is being sent. Could
     * be a DNS name with wildcard prefix or an IP address.  Depending on the
     * platform, short-names can also be used instead of a FQDN (i.e. has no
     * dots in the name). In such a scenario, the FQDN of the host would be
     * derived based on the underlying platform.
     * A single VirtualService can be used to describe all the traffic
     * properties of the corresponding hosts, including those for multiple
     * HTTP and TCP ports. Alternatively, the traffic properties of a host
     * can be defined using more than one VirtualService, with certain
     * caveats. Refer to the
     * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
     * for details.
     * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
     * instead of "reviews.default.svc.cluster.local"), Istio will interpret
     * the short name based on the namespace of the rule, not the service. A
     * rule in the "default" namespace containing a host "reviews" will be
     * interpreted as "reviews.default.svc.cluster.local", irrespective of
     * the actual namespace associated with the reviews service. _To avoid
     * potential misconfigurations, it is recommended to always use fully
     * qualified domain names over short names._
     * The hosts field applies to both HTTP and TCP services. Service inside
     * the mesh, i.e., those found in the service registry, must always be
     * referred to using their alphanumeric names. IP addresses are allowed
     * only for services defined via the Gateway.
     * *Note*: It must be empty for a delegate VirtualService.
     * </pre>
     *
     * <code>repeated string hosts = 1;</code>
     * @return A list containing the hosts.
     */
    public com.google.protobuf.ProtocolStringList
        getHostsList() {
      return hosts_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The destination hosts to which traffic is being sent. Could
     * be a DNS name with wildcard prefix or an IP address.  Depending on the
     * platform, short-names can also be used instead of a FQDN (i.e. has no
     * dots in the name). In such a scenario, the FQDN of the host would be
     * derived based on the underlying platform.
     * A single VirtualService can be used to describe all the traffic
     * properties of the corresponding hosts, including those for multiple
     * HTTP and TCP ports. Alternatively, the traffic properties of a host
     * can be defined using more than one VirtualService, with certain
     * caveats. Refer to the
     * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
     * for details.
     * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
     * instead of "reviews.default.svc.cluster.local"), Istio will interpret
     * the short name based on the namespace of the rule, not the service. A
     * rule in the "default" namespace containing a host "reviews" will be
     * interpreted as "reviews.default.svc.cluster.local", irrespective of
     * the actual namespace associated with the reviews service. _To avoid
     * potential misconfigurations, it is recommended to always use fully
     * qualified domain names over short names._
     * The hosts field applies to both HTTP and TCP services. Service inside
     * the mesh, i.e., those found in the service registry, must always be
     * referred to using their alphanumeric names. IP addresses are allowed
     * only for services defined via the Gateway.
     * *Note*: It must be empty for a delegate VirtualService.
     * </pre>
     *
     * <code>repeated string hosts = 1;</code>
     * @return The count of hosts.
     */
    public int getHostsCount() {
      return hosts_.size();
    }
    /**
     * <pre>
     * The destination hosts to which traffic is being sent. Could
     * be a DNS name with wildcard prefix or an IP address.  Depending on the
     * platform, short-names can also be used instead of a FQDN (i.e. has no
     * dots in the name). In such a scenario, the FQDN of the host would be
     * derived based on the underlying platform.
     * A single VirtualService can be used to describe all the traffic
     * properties of the corresponding hosts, including those for multiple
     * HTTP and TCP ports. Alternatively, the traffic properties of a host
     * can be defined using more than one VirtualService, with certain
     * caveats. Refer to the
     * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
     * for details.
     * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
     * instead of "reviews.default.svc.cluster.local"), Istio will interpret
     * the short name based on the namespace of the rule, not the service. A
     * rule in the "default" namespace containing a host "reviews" will be
     * interpreted as "reviews.default.svc.cluster.local", irrespective of
     * the actual namespace associated with the reviews service. _To avoid
     * potential misconfigurations, it is recommended to always use fully
     * qualified domain names over short names._
     * The hosts field applies to both HTTP and TCP services. Service inside
     * the mesh, i.e., those found in the service registry, must always be
     * referred to using their alphanumeric names. IP addresses are allowed
     * only for services defined via the Gateway.
     * *Note*: It must be empty for a delegate VirtualService.
     * </pre>
     *
     * <code>repeated string hosts = 1;</code>
     * @param index The index of the element to return.
     * @return The hosts at the given index.
     */
    public java.lang.String getHosts(int index) {
      return hosts_.get(index);
    }
    /**
     * <pre>
     * The destination hosts to which traffic is being sent. Could
     * be a DNS name with wildcard prefix or an IP address.  Depending on the
     * platform, short-names can also be used instead of a FQDN (i.e. has no
     * dots in the name). In such a scenario, the FQDN of the host would be
     * derived based on the underlying platform.
     * A single VirtualService can be used to describe all the traffic
     * properties of the corresponding hosts, including those for multiple
     * HTTP and TCP ports. Alternatively, the traffic properties of a host
     * can be defined using more than one VirtualService, with certain
     * caveats. Refer to the
     * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
     * for details.
     * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
     * instead of "reviews.default.svc.cluster.local"), Istio will interpret
     * the short name based on the namespace of the rule, not the service. A
     * rule in the "default" namespace containing a host "reviews" will be
     * interpreted as "reviews.default.svc.cluster.local", irrespective of
     * the actual namespace associated with the reviews service. _To avoid
     * potential misconfigurations, it is recommended to always use fully
     * qualified domain names over short names._
     * The hosts field applies to both HTTP and TCP services. Service inside
     * the mesh, i.e., those found in the service registry, must always be
     * referred to using their alphanumeric names. IP addresses are allowed
     * only for services defined via the Gateway.
     * *Note*: It must be empty for a delegate VirtualService.
     * </pre>
     *
     * <code>repeated string hosts = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the hosts at the given index.
     */
    public com.google.protobuf.ByteString
        getHostsBytes(int index) {
      return hosts_.getByteString(index);
    }
    /**
     * <pre>
     * The destination hosts to which traffic is being sent. Could
     * be a DNS name with wildcard prefix or an IP address.  Depending on the
     * platform, short-names can also be used instead of a FQDN (i.e. has no
     * dots in the name). In such a scenario, the FQDN of the host would be
     * derived based on the underlying platform.
     * A single VirtualService can be used to describe all the traffic
     * properties of the corresponding hosts, including those for multiple
     * HTTP and TCP ports. Alternatively, the traffic properties of a host
     * can be defined using more than one VirtualService, with certain
     * caveats. Refer to the
     * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
     * for details.
     * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
     * instead of "reviews.default.svc.cluster.local"), Istio will interpret
     * the short name based on the namespace of the rule, not the service. A
     * rule in the "default" namespace containing a host "reviews" will be
     * interpreted as "reviews.default.svc.cluster.local", irrespective of
     * the actual namespace associated with the reviews service. _To avoid
     * potential misconfigurations, it is recommended to always use fully
     * qualified domain names over short names._
     * The hosts field applies to both HTTP and TCP services. Service inside
     * the mesh, i.e., those found in the service registry, must always be
     * referred to using their alphanumeric names. IP addresses are allowed
     * only for services defined via the Gateway.
     * *Note*: It must be empty for a delegate VirtualService.
     * </pre>
     *
     * <code>repeated string hosts = 1;</code>
     * @param index The index to set the value at.
     * @param value The hosts to set.
     * @return This builder for chaining.
     */
    public Builder setHosts(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureHostsIsMutable();
      hosts_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The destination hosts to which traffic is being sent. Could
     * be a DNS name with wildcard prefix or an IP address.  Depending on the
     * platform, short-names can also be used instead of a FQDN (i.e. has no
     * dots in the name). In such a scenario, the FQDN of the host would be
     * derived based on the underlying platform.
     * A single VirtualService can be used to describe all the traffic
     * properties of the corresponding hosts, including those for multiple
     * HTTP and TCP ports. Alternatively, the traffic properties of a host
     * can be defined using more than one VirtualService, with certain
     * caveats. Refer to the
     * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
     * for details.
     * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
     * instead of "reviews.default.svc.cluster.local"), Istio will interpret
     * the short name based on the namespace of the rule, not the service. A
     * rule in the "default" namespace containing a host "reviews" will be
     * interpreted as "reviews.default.svc.cluster.local", irrespective of
     * the actual namespace associated with the reviews service. _To avoid
     * potential misconfigurations, it is recommended to always use fully
     * qualified domain names over short names._
     * The hosts field applies to both HTTP and TCP services. Service inside
     * the mesh, i.e., those found in the service registry, must always be
     * referred to using their alphanumeric names. IP addresses are allowed
     * only for services defined via the Gateway.
     * *Note*: It must be empty for a delegate VirtualService.
     * </pre>
     *
     * <code>repeated string hosts = 1;</code>
     * @param value The hosts to add.
     * @return This builder for chaining.
     */
    public Builder addHosts(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureHostsIsMutable();
      hosts_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The destination hosts to which traffic is being sent. Could
     * be a DNS name with wildcard prefix or an IP address.  Depending on the
     * platform, short-names can also be used instead of a FQDN (i.e. has no
     * dots in the name). In such a scenario, the FQDN of the host would be
     * derived based on the underlying platform.
     * A single VirtualService can be used to describe all the traffic
     * properties of the corresponding hosts, including those for multiple
     * HTTP and TCP ports. Alternatively, the traffic properties of a host
     * can be defined using more than one VirtualService, with certain
     * caveats. Refer to the
     * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
     * for details.
     * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
     * instead of "reviews.default.svc.cluster.local"), Istio will interpret
     * the short name based on the namespace of the rule, not the service. A
     * rule in the "default" namespace containing a host "reviews" will be
     * interpreted as "reviews.default.svc.cluster.local", irrespective of
     * the actual namespace associated with the reviews service. _To avoid
     * potential misconfigurations, it is recommended to always use fully
     * qualified domain names over short names._
     * The hosts field applies to both HTTP and TCP services. Service inside
     * the mesh, i.e., those found in the service registry, must always be
     * referred to using their alphanumeric names. IP addresses are allowed
     * only for services defined via the Gateway.
     * *Note*: It must be empty for a delegate VirtualService.
     * </pre>
     *
     * <code>repeated string hosts = 1;</code>
     * @param values The hosts to add.
     * @return This builder for chaining.
     */
    public Builder addAllHosts(
        java.lang.Iterable<java.lang.String> values) {
      ensureHostsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, hosts_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The destination hosts to which traffic is being sent. Could
     * be a DNS name with wildcard prefix or an IP address.  Depending on the
     * platform, short-names can also be used instead of a FQDN (i.e. has no
     * dots in the name). In such a scenario, the FQDN of the host would be
     * derived based on the underlying platform.
     * A single VirtualService can be used to describe all the traffic
     * properties of the corresponding hosts, including those for multiple
     * HTTP and TCP ports. Alternatively, the traffic properties of a host
     * can be defined using more than one VirtualService, with certain
     * caveats. Refer to the
     * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
     * for details.
     * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
     * instead of "reviews.default.svc.cluster.local"), Istio will interpret
     * the short name based on the namespace of the rule, not the service. A
     * rule in the "default" namespace containing a host "reviews" will be
     * interpreted as "reviews.default.svc.cluster.local", irrespective of
     * the actual namespace associated with the reviews service. _To avoid
     * potential misconfigurations, it is recommended to always use fully
     * qualified domain names over short names._
     * The hosts field applies to both HTTP and TCP services. Service inside
     * the mesh, i.e., those found in the service registry, must always be
     * referred to using their alphanumeric names. IP addresses are allowed
     * only for services defined via the Gateway.
     * *Note*: It must be empty for a delegate VirtualService.
     * </pre>
     *
     * <code>repeated string hosts = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearHosts() {
      hosts_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The destination hosts to which traffic is being sent. Could
     * be a DNS name with wildcard prefix or an IP address.  Depending on the
     * platform, short-names can also be used instead of a FQDN (i.e. has no
     * dots in the name). In such a scenario, the FQDN of the host would be
     * derived based on the underlying platform.
     * A single VirtualService can be used to describe all the traffic
     * properties of the corresponding hosts, including those for multiple
     * HTTP and TCP ports. Alternatively, the traffic properties of a host
     * can be defined using more than one VirtualService, with certain
     * caveats. Refer to the
     * [Operations Guide](https://istio.io/docs/ops/best-practices/traffic-management/#split-virtual-services)
     * for details.
     * *Note for Kubernetes users*: When short names are used (e.g. "reviews"
     * instead of "reviews.default.svc.cluster.local"), Istio will interpret
     * the short name based on the namespace of the rule, not the service. A
     * rule in the "default" namespace containing a host "reviews" will be
     * interpreted as "reviews.default.svc.cluster.local", irrespective of
     * the actual namespace associated with the reviews service. _To avoid
     * potential misconfigurations, it is recommended to always use fully
     * qualified domain names over short names._
     * The hosts field applies to both HTTP and TCP services. Service inside
     * the mesh, i.e., those found in the service registry, must always be
     * referred to using their alphanumeric names. IP addresses are allowed
     * only for services defined via the Gateway.
     * *Note*: It must be empty for a delegate VirtualService.
     * </pre>
     *
     * <code>repeated string hosts = 1;</code>
     * @param value The bytes of the hosts to add.
     * @return This builder for chaining.
     */
    public Builder addHostsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureHostsIsMutable();
      hosts_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList gateways_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureGatewaysIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        gateways_ = new com.google.protobuf.LazyStringArrayList(gateways_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * The names of gateways and sidecars that should apply these routes.
     * Gateways in other namespaces may be referred to by
     * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
     * namespace qualifier is the same as specifying the VirtualService's
     * namespace. A single VirtualService is used for sidecars inside the mesh as
     * well as for one or more gateways. The selection condition imposed by this
     * field can be overridden using the source field in the match conditions
     * of protocol-specific routes. The reserved word `mesh` is used to imply
     * all the sidecars in the mesh. When this field is omitted, the default
     * gateway (`mesh`) will be used, which would apply the rule to all
     * sidecars in the mesh. If a list of gateway names is provided, the
     * rules will apply only to the gateways. To apply the rules to both
     * gateways and sidecars, specify `mesh` as one of the gateway names.
     * </pre>
     *
     * <code>repeated string gateways = 2;</code>
     * @return A list containing the gateways.
     */
    public com.google.protobuf.ProtocolStringList
        getGatewaysList() {
      return gateways_.getUnmodifiableView();
    }
    /**
     * <pre>
     * The names of gateways and sidecars that should apply these routes.
     * Gateways in other namespaces may be referred to by
     * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
     * namespace qualifier is the same as specifying the VirtualService's
     * namespace. A single VirtualService is used for sidecars inside the mesh as
     * well as for one or more gateways. The selection condition imposed by this
     * field can be overridden using the source field in the match conditions
     * of protocol-specific routes. The reserved word `mesh` is used to imply
     * all the sidecars in the mesh. When this field is omitted, the default
     * gateway (`mesh`) will be used, which would apply the rule to all
     * sidecars in the mesh. If a list of gateway names is provided, the
     * rules will apply only to the gateways. To apply the rules to both
     * gateways and sidecars, specify `mesh` as one of the gateway names.
     * </pre>
     *
     * <code>repeated string gateways = 2;</code>
     * @return The count of gateways.
     */
    public int getGatewaysCount() {
      return gateways_.size();
    }
    /**
     * <pre>
     * The names of gateways and sidecars that should apply these routes.
     * Gateways in other namespaces may be referred to by
     * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
     * namespace qualifier is the same as specifying the VirtualService's
     * namespace. A single VirtualService is used for sidecars inside the mesh as
     * well as for one or more gateways. The selection condition imposed by this
     * field can be overridden using the source field in the match conditions
     * of protocol-specific routes. The reserved word `mesh` is used to imply
     * all the sidecars in the mesh. When this field is omitted, the default
     * gateway (`mesh`) will be used, which would apply the rule to all
     * sidecars in the mesh. If a list of gateway names is provided, the
     * rules will apply only to the gateways. To apply the rules to both
     * gateways and sidecars, specify `mesh` as one of the gateway names.
     * </pre>
     *
     * <code>repeated string gateways = 2;</code>
     * @param index The index of the element to return.
     * @return The gateways at the given index.
     */
    public java.lang.String getGateways(int index) {
      return gateways_.get(index);
    }
    /**
     * <pre>
     * The names of gateways and sidecars that should apply these routes.
     * Gateways in other namespaces may be referred to by
     * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
     * namespace qualifier is the same as specifying the VirtualService's
     * namespace. A single VirtualService is used for sidecars inside the mesh as
     * well as for one or more gateways. The selection condition imposed by this
     * field can be overridden using the source field in the match conditions
     * of protocol-specific routes. The reserved word `mesh` is used to imply
     * all the sidecars in the mesh. When this field is omitted, the default
     * gateway (`mesh`) will be used, which would apply the rule to all
     * sidecars in the mesh. If a list of gateway names is provided, the
     * rules will apply only to the gateways. To apply the rules to both
     * gateways and sidecars, specify `mesh` as one of the gateway names.
     * </pre>
     *
     * <code>repeated string gateways = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the gateways at the given index.
     */
    public com.google.protobuf.ByteString
        getGatewaysBytes(int index) {
      return gateways_.getByteString(index);
    }
    /**
     * <pre>
     * The names of gateways and sidecars that should apply these routes.
     * Gateways in other namespaces may be referred to by
     * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
     * namespace qualifier is the same as specifying the VirtualService's
     * namespace. A single VirtualService is used for sidecars inside the mesh as
     * well as for one or more gateways. The selection condition imposed by this
     * field can be overridden using the source field in the match conditions
     * of protocol-specific routes. The reserved word `mesh` is used to imply
     * all the sidecars in the mesh. When this field is omitted, the default
     * gateway (`mesh`) will be used, which would apply the rule to all
     * sidecars in the mesh. If a list of gateway names is provided, the
     * rules will apply only to the gateways. To apply the rules to both
     * gateways and sidecars, specify `mesh` as one of the gateway names.
     * </pre>
     *
     * <code>repeated string gateways = 2;</code>
     * @param index The index to set the value at.
     * @param value The gateways to set.
     * @return This builder for chaining.
     */
    public Builder setGateways(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureGatewaysIsMutable();
      gateways_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The names of gateways and sidecars that should apply these routes.
     * Gateways in other namespaces may be referred to by
     * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
     * namespace qualifier is the same as specifying the VirtualService's
     * namespace. A single VirtualService is used for sidecars inside the mesh as
     * well as for one or more gateways. The selection condition imposed by this
     * field can be overridden using the source field in the match conditions
     * of protocol-specific routes. The reserved word `mesh` is used to imply
     * all the sidecars in the mesh. When this field is omitted, the default
     * gateway (`mesh`) will be used, which would apply the rule to all
     * sidecars in the mesh. If a list of gateway names is provided, the
     * rules will apply only to the gateways. To apply the rules to both
     * gateways and sidecars, specify `mesh` as one of the gateway names.
     * </pre>
     *
     * <code>repeated string gateways = 2;</code>
     * @param value The gateways to add.
     * @return This builder for chaining.
     */
    public Builder addGateways(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureGatewaysIsMutable();
      gateways_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The names of gateways and sidecars that should apply these routes.
     * Gateways in other namespaces may be referred to by
     * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
     * namespace qualifier is the same as specifying the VirtualService's
     * namespace. A single VirtualService is used for sidecars inside the mesh as
     * well as for one or more gateways. The selection condition imposed by this
     * field can be overridden using the source field in the match conditions
     * of protocol-specific routes. The reserved word `mesh` is used to imply
     * all the sidecars in the mesh. When this field is omitted, the default
     * gateway (`mesh`) will be used, which would apply the rule to all
     * sidecars in the mesh. If a list of gateway names is provided, the
     * rules will apply only to the gateways. To apply the rules to both
     * gateways and sidecars, specify `mesh` as one of the gateway names.
     * </pre>
     *
     * <code>repeated string gateways = 2;</code>
     * @param values The gateways to add.
     * @return This builder for chaining.
     */
    public Builder addAllGateways(
        java.lang.Iterable<java.lang.String> values) {
      ensureGatewaysIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, gateways_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The names of gateways and sidecars that should apply these routes.
     * Gateways in other namespaces may be referred to by
     * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
     * namespace qualifier is the same as specifying the VirtualService's
     * namespace. A single VirtualService is used for sidecars inside the mesh as
     * well as for one or more gateways. The selection condition imposed by this
     * field can be overridden using the source field in the match conditions
     * of protocol-specific routes. The reserved word `mesh` is used to imply
     * all the sidecars in the mesh. When this field is omitted, the default
     * gateway (`mesh`) will be used, which would apply the rule to all
     * sidecars in the mesh. If a list of gateway names is provided, the
     * rules will apply only to the gateways. To apply the rules to both
     * gateways and sidecars, specify `mesh` as one of the gateway names.
     * </pre>
     *
     * <code>repeated string gateways = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearGateways() {
      gateways_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The names of gateways and sidecars that should apply these routes.
     * Gateways in other namespaces may be referred to by
     * `&lt;gateway namespace&gt;/&lt;gateway name&gt;`; specifying a gateway with no
     * namespace qualifier is the same as specifying the VirtualService's
     * namespace. A single VirtualService is used for sidecars inside the mesh as
     * well as for one or more gateways. The selection condition imposed by this
     * field can be overridden using the source field in the match conditions
     * of protocol-specific routes. The reserved word `mesh` is used to imply
     * all the sidecars in the mesh. When this field is omitted, the default
     * gateway (`mesh`) will be used, which would apply the rule to all
     * sidecars in the mesh. If a list of gateway names is provided, the
     * rules will apply only to the gateways. To apply the rules to both
     * gateways and sidecars, specify `mesh` as one of the gateway names.
     * </pre>
     *
     * <code>repeated string gateways = 2;</code>
     * @param value The bytes of the gateways to add.
     * @return This builder for chaining.
     */
    public Builder addGatewaysBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureGatewaysIsMutable();
      gateways_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<io.ourea.adapter.model.istio.HTTPRoute> http_ =
      java.util.Collections.emptyList();
    private void ensureHttpIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        http_ = new java.util.ArrayList<io.ourea.adapter.model.istio.HTTPRoute>(http_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRoute, io.ourea.adapter.model.istio.HTTPRoute.Builder, io.ourea.adapter.model.istio.HTTPRouteOrBuilder> httpBuilder_;

    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.HTTPRoute> getHttpList() {
      if (httpBuilder_ == null) {
        return java.util.Collections.unmodifiableList(http_);
      } else {
        return httpBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public int getHttpCount() {
      if (httpBuilder_ == null) {
        return http_.size();
      } else {
        return httpBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRoute getHttp(int index) {
      if (httpBuilder_ == null) {
        return http_.get(index);
      } else {
        return httpBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public Builder setHttp(
        int index, io.ourea.adapter.model.istio.HTTPRoute value) {
      if (httpBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHttpIsMutable();
        http_.set(index, value);
        onChanged();
      } else {
        httpBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public Builder setHttp(
        int index, io.ourea.adapter.model.istio.HTTPRoute.Builder builderForValue) {
      if (httpBuilder_ == null) {
        ensureHttpIsMutable();
        http_.set(index, builderForValue.build());
        onChanged();
      } else {
        httpBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public Builder addHttp(io.ourea.adapter.model.istio.HTTPRoute value) {
      if (httpBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHttpIsMutable();
        http_.add(value);
        onChanged();
      } else {
        httpBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public Builder addHttp(
        int index, io.ourea.adapter.model.istio.HTTPRoute value) {
      if (httpBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHttpIsMutable();
        http_.add(index, value);
        onChanged();
      } else {
        httpBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public Builder addHttp(
        io.ourea.adapter.model.istio.HTTPRoute.Builder builderForValue) {
      if (httpBuilder_ == null) {
        ensureHttpIsMutable();
        http_.add(builderForValue.build());
        onChanged();
      } else {
        httpBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public Builder addHttp(
        int index, io.ourea.adapter.model.istio.HTTPRoute.Builder builderForValue) {
      if (httpBuilder_ == null) {
        ensureHttpIsMutable();
        http_.add(index, builderForValue.build());
        onChanged();
      } else {
        httpBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public Builder addAllHttp(
        java.lang.Iterable<? extends io.ourea.adapter.model.istio.HTTPRoute> values) {
      if (httpBuilder_ == null) {
        ensureHttpIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, http_);
        onChanged();
      } else {
        httpBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public Builder clearHttp() {
      if (httpBuilder_ == null) {
        http_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        httpBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public Builder removeHttp(int index) {
      if (httpBuilder_ == null) {
        ensureHttpIsMutable();
        http_.remove(index);
        onChanged();
      } else {
        httpBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRoute.Builder getHttpBuilder(
        int index) {
      return getHttpFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRouteOrBuilder getHttpOrBuilder(
        int index) {
      if (httpBuilder_ == null) {
        return http_.get(index);  } else {
        return httpBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public java.util.List<? extends io.ourea.adapter.model.istio.HTTPRouteOrBuilder> 
         getHttpOrBuilderList() {
      if (httpBuilder_ != null) {
        return httpBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(http_);
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRoute.Builder addHttpBuilder() {
      return getHttpFieldBuilder().addBuilder(
          io.ourea.adapter.model.istio.HTTPRoute.getDefaultInstance());
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public io.ourea.adapter.model.istio.HTTPRoute.Builder addHttpBuilder(
        int index) {
      return getHttpFieldBuilder().addBuilder(
          index, io.ourea.adapter.model.istio.HTTPRoute.getDefaultInstance());
    }
    /**
     * <pre>
     * An ordered list of route rules for HTTP traffic. HTTP routes will be
     * applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway
     * ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service
     * entry ports using HTTP/HTTP2/GRPC protocols.  The first rule matching
     * an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.HTTPRoute http = 3;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.HTTPRoute.Builder> 
         getHttpBuilderList() {
      return getHttpFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.HTTPRoute, io.ourea.adapter.model.istio.HTTPRoute.Builder, io.ourea.adapter.model.istio.HTTPRouteOrBuilder> 
        getHttpFieldBuilder() {
      if (httpBuilder_ == null) {
        httpBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.ourea.adapter.model.istio.HTTPRoute, io.ourea.adapter.model.istio.HTTPRoute.Builder, io.ourea.adapter.model.istio.HTTPRouteOrBuilder>(
                http_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        http_ = null;
      }
      return httpBuilder_;
    }

    private java.util.List<io.ourea.adapter.model.istio.TLSRoute> tls_ =
      java.util.Collections.emptyList();
    private void ensureTlsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        tls_ = new java.util.ArrayList<io.ourea.adapter.model.istio.TLSRoute>(tls_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.TLSRoute, io.ourea.adapter.model.istio.TLSRoute.Builder, io.ourea.adapter.model.istio.TLSRouteOrBuilder> tlsBuilder_;

    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.TLSRoute> getTlsList() {
      if (tlsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tls_);
      } else {
        return tlsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public int getTlsCount() {
      if (tlsBuilder_ == null) {
        return tls_.size();
      } else {
        return tlsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public io.ourea.adapter.model.istio.TLSRoute getTls(int index) {
      if (tlsBuilder_ == null) {
        return tls_.get(index);
      } else {
        return tlsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public Builder setTls(
        int index, io.ourea.adapter.model.istio.TLSRoute value) {
      if (tlsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsIsMutable();
        tls_.set(index, value);
        onChanged();
      } else {
        tlsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public Builder setTls(
        int index, io.ourea.adapter.model.istio.TLSRoute.Builder builderForValue) {
      if (tlsBuilder_ == null) {
        ensureTlsIsMutable();
        tls_.set(index, builderForValue.build());
        onChanged();
      } else {
        tlsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public Builder addTls(io.ourea.adapter.model.istio.TLSRoute value) {
      if (tlsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsIsMutable();
        tls_.add(value);
        onChanged();
      } else {
        tlsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public Builder addTls(
        int index, io.ourea.adapter.model.istio.TLSRoute value) {
      if (tlsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTlsIsMutable();
        tls_.add(index, value);
        onChanged();
      } else {
        tlsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public Builder addTls(
        io.ourea.adapter.model.istio.TLSRoute.Builder builderForValue) {
      if (tlsBuilder_ == null) {
        ensureTlsIsMutable();
        tls_.add(builderForValue.build());
        onChanged();
      } else {
        tlsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public Builder addTls(
        int index, io.ourea.adapter.model.istio.TLSRoute.Builder builderForValue) {
      if (tlsBuilder_ == null) {
        ensureTlsIsMutable();
        tls_.add(index, builderForValue.build());
        onChanged();
      } else {
        tlsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public Builder addAllTls(
        java.lang.Iterable<? extends io.ourea.adapter.model.istio.TLSRoute> values) {
      if (tlsBuilder_ == null) {
        ensureTlsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tls_);
        onChanged();
      } else {
        tlsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public Builder clearTls() {
      if (tlsBuilder_ == null) {
        tls_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        tlsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public Builder removeTls(int index) {
      if (tlsBuilder_ == null) {
        ensureTlsIsMutable();
        tls_.remove(index);
        onChanged();
      } else {
        tlsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public io.ourea.adapter.model.istio.TLSRoute.Builder getTlsBuilder(
        int index) {
      return getTlsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public io.ourea.adapter.model.istio.TLSRouteOrBuilder getTlsOrBuilder(
        int index) {
      if (tlsBuilder_ == null) {
        return tls_.get(index);  } else {
        return tlsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public java.util.List<? extends io.ourea.adapter.model.istio.TLSRouteOrBuilder> 
         getTlsOrBuilderList() {
      if (tlsBuilder_ != null) {
        return tlsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tls_);
      }
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public io.ourea.adapter.model.istio.TLSRoute.Builder addTlsBuilder() {
      return getTlsFieldBuilder().addBuilder(
          io.ourea.adapter.model.istio.TLSRoute.getDefaultInstance());
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public io.ourea.adapter.model.istio.TLSRoute.Builder addTlsBuilder(
        int index) {
      return getTlsFieldBuilder().addBuilder(
          index, io.ourea.adapter.model.istio.TLSRoute.getDefaultInstance());
    }
    /**
     * <pre>
     * An ordered list of route rule for non-terminated TLS &amp; HTTPS
     * traffic. Routing is typically performed using the SNI value presented
     * by the ClientHello message. TLS routes will be applied to platform
     * service ports named 'https-*', 'tls-*', unterminated gateway ports using
     * HTTPS/TLS protocols (i.e. with "passthrough" TLS mode) and service
     * entry ports using HTTPS/TLS protocols.  The first rule matching an
     * incoming request is used.  NOTE: Traffic 'https-*' or 'tls-*' ports
     * without associated virtual service will be treated as opaque TCP
     * traffic.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TLSRoute tls = 5;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.TLSRoute.Builder> 
         getTlsBuilderList() {
      return getTlsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.TLSRoute, io.ourea.adapter.model.istio.TLSRoute.Builder, io.ourea.adapter.model.istio.TLSRouteOrBuilder> 
        getTlsFieldBuilder() {
      if (tlsBuilder_ == null) {
        tlsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.ourea.adapter.model.istio.TLSRoute, io.ourea.adapter.model.istio.TLSRoute.Builder, io.ourea.adapter.model.istio.TLSRouteOrBuilder>(
                tls_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        tls_ = null;
      }
      return tlsBuilder_;
    }

    private java.util.List<io.ourea.adapter.model.istio.TCPRoute> tcp_ =
      java.util.Collections.emptyList();
    private void ensureTcpIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        tcp_ = new java.util.ArrayList<io.ourea.adapter.model.istio.TCPRoute>(tcp_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.TCPRoute, io.ourea.adapter.model.istio.TCPRoute.Builder, io.ourea.adapter.model.istio.TCPRouteOrBuilder> tcpBuilder_;

    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.TCPRoute> getTcpList() {
      if (tcpBuilder_ == null) {
        return java.util.Collections.unmodifiableList(tcp_);
      } else {
        return tcpBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public int getTcpCount() {
      if (tcpBuilder_ == null) {
        return tcp_.size();
      } else {
        return tcpBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public io.ourea.adapter.model.istio.TCPRoute getTcp(int index) {
      if (tcpBuilder_ == null) {
        return tcp_.get(index);
      } else {
        return tcpBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public Builder setTcp(
        int index, io.ourea.adapter.model.istio.TCPRoute value) {
      if (tcpBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTcpIsMutable();
        tcp_.set(index, value);
        onChanged();
      } else {
        tcpBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public Builder setTcp(
        int index, io.ourea.adapter.model.istio.TCPRoute.Builder builderForValue) {
      if (tcpBuilder_ == null) {
        ensureTcpIsMutable();
        tcp_.set(index, builderForValue.build());
        onChanged();
      } else {
        tcpBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public Builder addTcp(io.ourea.adapter.model.istio.TCPRoute value) {
      if (tcpBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTcpIsMutable();
        tcp_.add(value);
        onChanged();
      } else {
        tcpBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public Builder addTcp(
        int index, io.ourea.adapter.model.istio.TCPRoute value) {
      if (tcpBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTcpIsMutable();
        tcp_.add(index, value);
        onChanged();
      } else {
        tcpBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public Builder addTcp(
        io.ourea.adapter.model.istio.TCPRoute.Builder builderForValue) {
      if (tcpBuilder_ == null) {
        ensureTcpIsMutable();
        tcp_.add(builderForValue.build());
        onChanged();
      } else {
        tcpBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public Builder addTcp(
        int index, io.ourea.adapter.model.istio.TCPRoute.Builder builderForValue) {
      if (tcpBuilder_ == null) {
        ensureTcpIsMutable();
        tcp_.add(index, builderForValue.build());
        onChanged();
      } else {
        tcpBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public Builder addAllTcp(
        java.lang.Iterable<? extends io.ourea.adapter.model.istio.TCPRoute> values) {
      if (tcpBuilder_ == null) {
        ensureTcpIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tcp_);
        onChanged();
      } else {
        tcpBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public Builder clearTcp() {
      if (tcpBuilder_ == null) {
        tcp_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        tcpBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public Builder removeTcp(int index) {
      if (tcpBuilder_ == null) {
        ensureTcpIsMutable();
        tcp_.remove(index);
        onChanged();
      } else {
        tcpBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public io.ourea.adapter.model.istio.TCPRoute.Builder getTcpBuilder(
        int index) {
      return getTcpFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public io.ourea.adapter.model.istio.TCPRouteOrBuilder getTcpOrBuilder(
        int index) {
      if (tcpBuilder_ == null) {
        return tcp_.get(index);  } else {
        return tcpBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public java.util.List<? extends io.ourea.adapter.model.istio.TCPRouteOrBuilder> 
         getTcpOrBuilderList() {
      if (tcpBuilder_ != null) {
        return tcpBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(tcp_);
      }
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public io.ourea.adapter.model.istio.TCPRoute.Builder addTcpBuilder() {
      return getTcpFieldBuilder().addBuilder(
          io.ourea.adapter.model.istio.TCPRoute.getDefaultInstance());
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public io.ourea.adapter.model.istio.TCPRoute.Builder addTcpBuilder(
        int index) {
      return getTcpFieldBuilder().addBuilder(
          index, io.ourea.adapter.model.istio.TCPRoute.getDefaultInstance());
    }
    /**
     * <pre>
     * An ordered list of route rules for opaque TCP traffic. TCP routes will
     * be applied to any port that is not a HTTP or TLS port. The first rule
     * matching an incoming request is used.
     * </pre>
     *
     * <code>repeated .istio.networking.v1alpha3.TCPRoute tcp = 4;</code>
     */
    public java.util.List<io.ourea.adapter.model.istio.TCPRoute.Builder> 
         getTcpBuilderList() {
      return getTcpFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.ourea.adapter.model.istio.TCPRoute, io.ourea.adapter.model.istio.TCPRoute.Builder, io.ourea.adapter.model.istio.TCPRouteOrBuilder> 
        getTcpFieldBuilder() {
      if (tcpBuilder_ == null) {
        tcpBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.ourea.adapter.model.istio.TCPRoute, io.ourea.adapter.model.istio.TCPRoute.Builder, io.ourea.adapter.model.istio.TCPRouteOrBuilder>(
                tcp_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        tcp_ = null;
      }
      return tcpBuilder_;
    }

    private com.google.protobuf.LazyStringList exportTo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureExportToIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        exportTo_ = new com.google.protobuf.LazyStringArrayList(exportTo_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <pre>
     * A list of namespaces to which this virtual service is exported. Exporting a
     * virtual service allows it to be used by sidecars and gateways defined in
     * other namespaces. This feature provides a mechanism for service owners
     * and mesh administrators to control the visibility of virtual services
     * across namespace boundaries.
     * If no namespaces are specified then the virtual service is exported to all
     * namespaces by default.
     * The value "." is reserved and defines an export to the same namespace that
     * the virtual service is declared in. Similarly the value "*" is reserved and
     * defines an export to all namespaces.
     * NOTE: in the current release, the `exportTo` value is restricted to
     * "." or "*" (i.e., the current namespace or all namespaces).
     * </pre>
     *
     * <code>repeated string export_to = 6;</code>
     * @return A list containing the exportTo.
     */
    public com.google.protobuf.ProtocolStringList
        getExportToList() {
      return exportTo_.getUnmodifiableView();
    }
    /**
     * <pre>
     * A list of namespaces to which this virtual service is exported. Exporting a
     * virtual service allows it to be used by sidecars and gateways defined in
     * other namespaces. This feature provides a mechanism for service owners
     * and mesh administrators to control the visibility of virtual services
     * across namespace boundaries.
     * If no namespaces are specified then the virtual service is exported to all
     * namespaces by default.
     * The value "." is reserved and defines an export to the same namespace that
     * the virtual service is declared in. Similarly the value "*" is reserved and
     * defines an export to all namespaces.
     * NOTE: in the current release, the `exportTo` value is restricted to
     * "." or "*" (i.e., the current namespace or all namespaces).
     * </pre>
     *
     * <code>repeated string export_to = 6;</code>
     * @return The count of exportTo.
     */
    public int getExportToCount() {
      return exportTo_.size();
    }
    /**
     * <pre>
     * A list of namespaces to which this virtual service is exported. Exporting a
     * virtual service allows it to be used by sidecars and gateways defined in
     * other namespaces. This feature provides a mechanism for service owners
     * and mesh administrators to control the visibility of virtual services
     * across namespace boundaries.
     * If no namespaces are specified then the virtual service is exported to all
     * namespaces by default.
     * The value "." is reserved and defines an export to the same namespace that
     * the virtual service is declared in. Similarly the value "*" is reserved and
     * defines an export to all namespaces.
     * NOTE: in the current release, the `exportTo` value is restricted to
     * "." or "*" (i.e., the current namespace or all namespaces).
     * </pre>
     *
     * <code>repeated string export_to = 6;</code>
     * @param index The index of the element to return.
     * @return The exportTo at the given index.
     */
    public java.lang.String getExportTo(int index) {
      return exportTo_.get(index);
    }
    /**
     * <pre>
     * A list of namespaces to which this virtual service is exported. Exporting a
     * virtual service allows it to be used by sidecars and gateways defined in
     * other namespaces. This feature provides a mechanism for service owners
     * and mesh administrators to control the visibility of virtual services
     * across namespace boundaries.
     * If no namespaces are specified then the virtual service is exported to all
     * namespaces by default.
     * The value "." is reserved and defines an export to the same namespace that
     * the virtual service is declared in. Similarly the value "*" is reserved and
     * defines an export to all namespaces.
     * NOTE: in the current release, the `exportTo` value is restricted to
     * "." or "*" (i.e., the current namespace or all namespaces).
     * </pre>
     *
     * <code>repeated string export_to = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the exportTo at the given index.
     */
    public com.google.protobuf.ByteString
        getExportToBytes(int index) {
      return exportTo_.getByteString(index);
    }
    /**
     * <pre>
     * A list of namespaces to which this virtual service is exported. Exporting a
     * virtual service allows it to be used by sidecars and gateways defined in
     * other namespaces. This feature provides a mechanism for service owners
     * and mesh administrators to control the visibility of virtual services
     * across namespace boundaries.
     * If no namespaces are specified then the virtual service is exported to all
     * namespaces by default.
     * The value "." is reserved and defines an export to the same namespace that
     * the virtual service is declared in. Similarly the value "*" is reserved and
     * defines an export to all namespaces.
     * NOTE: in the current release, the `exportTo` value is restricted to
     * "." or "*" (i.e., the current namespace or all namespaces).
     * </pre>
     *
     * <code>repeated string export_to = 6;</code>
     * @param index The index to set the value at.
     * @param value The exportTo to set.
     * @return This builder for chaining.
     */
    public Builder setExportTo(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureExportToIsMutable();
      exportTo_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of namespaces to which this virtual service is exported. Exporting a
     * virtual service allows it to be used by sidecars and gateways defined in
     * other namespaces. This feature provides a mechanism for service owners
     * and mesh administrators to control the visibility of virtual services
     * across namespace boundaries.
     * If no namespaces are specified then the virtual service is exported to all
     * namespaces by default.
     * The value "." is reserved and defines an export to the same namespace that
     * the virtual service is declared in. Similarly the value "*" is reserved and
     * defines an export to all namespaces.
     * NOTE: in the current release, the `exportTo` value is restricted to
     * "." or "*" (i.e., the current namespace or all namespaces).
     * </pre>
     *
     * <code>repeated string export_to = 6;</code>
     * @param value The exportTo to add.
     * @return This builder for chaining.
     */
    public Builder addExportTo(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureExportToIsMutable();
      exportTo_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of namespaces to which this virtual service is exported. Exporting a
     * virtual service allows it to be used by sidecars and gateways defined in
     * other namespaces. This feature provides a mechanism for service owners
     * and mesh administrators to control the visibility of virtual services
     * across namespace boundaries.
     * If no namespaces are specified then the virtual service is exported to all
     * namespaces by default.
     * The value "." is reserved and defines an export to the same namespace that
     * the virtual service is declared in. Similarly the value "*" is reserved and
     * defines an export to all namespaces.
     * NOTE: in the current release, the `exportTo` value is restricted to
     * "." or "*" (i.e., the current namespace or all namespaces).
     * </pre>
     *
     * <code>repeated string export_to = 6;</code>
     * @param values The exportTo to add.
     * @return This builder for chaining.
     */
    public Builder addAllExportTo(
        java.lang.Iterable<java.lang.String> values) {
      ensureExportToIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, exportTo_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of namespaces to which this virtual service is exported. Exporting a
     * virtual service allows it to be used by sidecars and gateways defined in
     * other namespaces. This feature provides a mechanism for service owners
     * and mesh administrators to control the visibility of virtual services
     * across namespace boundaries.
     * If no namespaces are specified then the virtual service is exported to all
     * namespaces by default.
     * The value "." is reserved and defines an export to the same namespace that
     * the virtual service is declared in. Similarly the value "*" is reserved and
     * defines an export to all namespaces.
     * NOTE: in the current release, the `exportTo` value is restricted to
     * "." or "*" (i.e., the current namespace or all namespaces).
     * </pre>
     *
     * <code>repeated string export_to = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearExportTo() {
      exportTo_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of namespaces to which this virtual service is exported. Exporting a
     * virtual service allows it to be used by sidecars and gateways defined in
     * other namespaces. This feature provides a mechanism for service owners
     * and mesh administrators to control the visibility of virtual services
     * across namespace boundaries.
     * If no namespaces are specified then the virtual service is exported to all
     * namespaces by default.
     * The value "." is reserved and defines an export to the same namespace that
     * the virtual service is declared in. Similarly the value "*" is reserved and
     * defines an export to all namespaces.
     * NOTE: in the current release, the `exportTo` value is restricted to
     * "." or "*" (i.e., the current namespace or all namespaces).
     * </pre>
     *
     * <code>repeated string export_to = 6;</code>
     * @param value The bytes of the exportTo to add.
     * @return This builder for chaining.
     */
    public Builder addExportToBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureExportToIsMutable();
      exportTo_.add(value);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:istio.networking.v1alpha3.VirtualService)
  }

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.VirtualService)
  private static final io.ourea.adapter.model.istio.VirtualService DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.ourea.adapter.model.istio.VirtualService();
  }

  public static io.ourea.adapter.model.istio.VirtualService getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<VirtualService>
      PARSER = new com.google.protobuf.AbstractParser<VirtualService>() {
    @java.lang.Override
    public VirtualService parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new VirtualService(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<VirtualService> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<VirtualService> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.ourea.adapter.model.istio.VirtualService getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

