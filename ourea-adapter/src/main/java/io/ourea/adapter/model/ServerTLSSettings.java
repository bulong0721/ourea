// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gateway.proto

package io.ourea.adapter.model;

/**
 * Protobuf type {@code istio.networking.v1alpha3.ServerTLSSettings}
 */
public final class ServerTLSSettings extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:istio.networking.v1alpha3.ServerTLSSettings)
    ServerTLSSettingsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ServerTLSSettings.newBuilder() to construct.
  private ServerTLSSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ServerTLSSettings() {
    mode_ = 0;
    serverCertificate_ = "";
    privateKey_ = "";
    caCertificates_ = "";
    credentialName_ = "";
    subjectAltNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    verifyCertificateSpki_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    verifyCertificateHash_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    minProtocolVersion_ = 0;
    maxProtocolVersion_ = 0;
    cipherSuites_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ServerTLSSettings();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ServerTLSSettings(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            httpsRedirect_ = input.readBool();
            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            mode_ = rawValue;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            serverCertificate_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            privateKey_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            caCertificates_ = s;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              subjectAltNames_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            subjectAltNames_.add(s);
            break;
          }
          case 56: {
            int rawValue = input.readEnum();

            minProtocolVersion_ = rawValue;
            break;
          }
          case 64: {
            int rawValue = input.readEnum();

            maxProtocolVersion_ = rawValue;
            break;
          }
          case 74: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              cipherSuites_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000008;
            }
            cipherSuites_.add(s);
            break;
          }
          case 82: {
            java.lang.String s = input.readStringRequireUtf8();

            credentialName_ = s;
            break;
          }
          case 90: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              verifyCertificateSpki_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            verifyCertificateSpki_.add(s);
            break;
          }
          case 98: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              verifyCertificateHash_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000004;
            }
            verifyCertificateHash_.add(s);
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        subjectAltNames_ = subjectAltNames_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        cipherSuites_ = cipherSuites_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        verifyCertificateSpki_ = verifyCertificateSpki_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        verifyCertificateHash_ = verifyCertificateHash_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.ourea.adapter.model.GatewayOuterClass.internal_static_istio_networking_v1alpha3_ServerTLSSettings_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.ourea.adapter.model.GatewayOuterClass.internal_static_istio_networking_v1alpha3_ServerTLSSettings_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.ourea.adapter.model.ServerTLSSettings.class, io.ourea.adapter.model.ServerTLSSettings.Builder.class);
  }

  /**
   * <pre>
   * TLS modes enforced by the proxy
   * </pre>
   *
   * Protobuf enum {@code istio.networking.v1alpha3.ServerTLSSettings.TLSmode}
   */
  public enum TLSmode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * The SNI string presented by the client will be used as the
     * match criterion in a VirtualService TLS route to determine
     * the destination service from the service registry.
     * </pre>
     *
     * <code>PASSTHROUGH = 0;</code>
     */
    PASSTHROUGH(0),
    /**
     * <pre>
     * Secure connections with standard TLS semantics.
     * </pre>
     *
     * <code>SIMPLE = 1;</code>
     */
    SIMPLE(1),
    /**
     * <pre>
     * Secure connections to the downstream using mutual TLS by
     * presenting server certificates for authentication.
     * </pre>
     *
     * <code>MUTUAL = 2;</code>
     */
    MUTUAL(2),
    /**
     * <pre>
     * Similar to the passthrough mode, except servers with this TLS
     * mode do not require an associated VirtualService to map from
     * the SNI value to service in the registry. The destination
     * details such as the service/subset/port are encoded in the
     * SNI value. The proxy will forward to the upstream (Envoy)
     * cluster (a group of endpoints) specified by the SNI
     * value. This server is typically used to provide connectivity
     * between services in disparate L3 networks that otherwise do
     * not have direct connectivity between their respective
     * endpoints. Use of this mode assumes that both the source and
     * the destination are using Istio mTLS to secure traffic.
     * </pre>
     *
     * <code>AUTO_PASSTHROUGH = 3;</code>
     */
    AUTO_PASSTHROUGH(3),
    /**
     * <pre>
     * Secure connections from the downstream using mutual TLS by
     * presenting server certificates for authentication.  Compared
     * to Mutual mode, this mode uses certificates, representing
     * gateway workload identity, generated automatically by Istio
     * for mTLS authentication. When this mode is used, all other
     * fields in `TLSOptions` should be empty.
     * </pre>
     *
     * <code>ISTIO_MUTUAL = 4;</code>
     */
    ISTIO_MUTUAL(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * The SNI string presented by the client will be used as the
     * match criterion in a VirtualService TLS route to determine
     * the destination service from the service registry.
     * </pre>
     *
     * <code>PASSTHROUGH = 0;</code>
     */
    public static final int PASSTHROUGH_VALUE = 0;
    /**
     * <pre>
     * Secure connections with standard TLS semantics.
     * </pre>
     *
     * <code>SIMPLE = 1;</code>
     */
    public static final int SIMPLE_VALUE = 1;
    /**
     * <pre>
     * Secure connections to the downstream using mutual TLS by
     * presenting server certificates for authentication.
     * </pre>
     *
     * <code>MUTUAL = 2;</code>
     */
    public static final int MUTUAL_VALUE = 2;
    /**
     * <pre>
     * Similar to the passthrough mode, except servers with this TLS
     * mode do not require an associated VirtualService to map from
     * the SNI value to service in the registry. The destination
     * details such as the service/subset/port are encoded in the
     * SNI value. The proxy will forward to the upstream (Envoy)
     * cluster (a group of endpoints) specified by the SNI
     * value. This server is typically used to provide connectivity
     * between services in disparate L3 networks that otherwise do
     * not have direct connectivity between their respective
     * endpoints. Use of this mode assumes that both the source and
     * the destination are using Istio mTLS to secure traffic.
     * </pre>
     *
     * <code>AUTO_PASSTHROUGH = 3;</code>
     */
    public static final int AUTO_PASSTHROUGH_VALUE = 3;
    /**
     * <pre>
     * Secure connections from the downstream using mutual TLS by
     * presenting server certificates for authentication.  Compared
     * to Mutual mode, this mode uses certificates, representing
     * gateway workload identity, generated automatically by Istio
     * for mTLS authentication. When this mode is used, all other
     * fields in `TLSOptions` should be empty.
     * </pre>
     *
     * <code>ISTIO_MUTUAL = 4;</code>
     */
    public static final int ISTIO_MUTUAL_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TLSmode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TLSmode forNumber(int value) {
      switch (value) {
        case 0: return PASSTHROUGH;
        case 1: return SIMPLE;
        case 2: return MUTUAL;
        case 3: return AUTO_PASSTHROUGH;
        case 4: return ISTIO_MUTUAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TLSmode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TLSmode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TLSmode>() {
            public TLSmode findValueByNumber(int number) {
              return TLSmode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.ourea.adapter.model.ServerTLSSettings.getDescriptor().getEnumTypes().get(0);
    }

    private static final TLSmode[] VALUES = values();

    public static TLSmode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TLSmode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:istio.networking.v1alpha3.ServerTLSSettings.TLSmode)
  }

  /**
   * <pre>
   * TLS protocol versions.
   * </pre>
   *
   * Protobuf enum {@code istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol}
   */
  public enum TLSProtocol
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Automatically choose the optimal TLS version.
     * </pre>
     *
     * <code>TLS_AUTO = 0;</code>
     */
    TLS_AUTO(0),
    /**
     * <pre>
     * TLS version 1.0
     * </pre>
     *
     * <code>TLSV1_0 = 1;</code>
     */
    TLSV1_0(1),
    /**
     * <pre>
     * TLS version 1.1
     * </pre>
     *
     * <code>TLSV1_1 = 2;</code>
     */
    TLSV1_1(2),
    /**
     * <pre>
     * TLS version 1.2
     * </pre>
     *
     * <code>TLSV1_2 = 3;</code>
     */
    TLSV1_2(3),
    /**
     * <pre>
     * TLS version 1.3
     * </pre>
     *
     * <code>TLSV1_3 = 4;</code>
     */
    TLSV1_3(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Automatically choose the optimal TLS version.
     * </pre>
     *
     * <code>TLS_AUTO = 0;</code>
     */
    public static final int TLS_AUTO_VALUE = 0;
    /**
     * <pre>
     * TLS version 1.0
     * </pre>
     *
     * <code>TLSV1_0 = 1;</code>
     */
    public static final int TLSV1_0_VALUE = 1;
    /**
     * <pre>
     * TLS version 1.1
     * </pre>
     *
     * <code>TLSV1_1 = 2;</code>
     */
    public static final int TLSV1_1_VALUE = 2;
    /**
     * <pre>
     * TLS version 1.2
     * </pre>
     *
     * <code>TLSV1_2 = 3;</code>
     */
    public static final int TLSV1_2_VALUE = 3;
    /**
     * <pre>
     * TLS version 1.3
     * </pre>
     *
     * <code>TLSV1_3 = 4;</code>
     */
    public static final int TLSV1_3_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TLSProtocol valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TLSProtocol forNumber(int value) {
      switch (value) {
        case 0: return TLS_AUTO;
        case 1: return TLSV1_0;
        case 2: return TLSV1_1;
        case 3: return TLSV1_2;
        case 4: return TLSV1_3;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TLSProtocol>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TLSProtocol> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TLSProtocol>() {
            public TLSProtocol findValueByNumber(int number) {
              return TLSProtocol.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.ourea.adapter.model.ServerTLSSettings.getDescriptor().getEnumTypes().get(1);
    }

    private static final TLSProtocol[] VALUES = values();

    public static TLSProtocol valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TLSProtocol(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol)
  }

  public static final int HTTPS_REDIRECT_FIELD_NUMBER = 1;
  private boolean httpsRedirect_;
  /**
   * <pre>
   * If set to true, the load balancer will send a 301 redirect for
   * all http connections, asking the clients to use HTTPS.
   * </pre>
   *
   * <code>bool https_redirect = 1;</code>
   * @return The httpsRedirect.
   */
  @java.lang.Override
  public boolean getHttpsRedirect() {
    return httpsRedirect_;
  }

  public static final int MODE_FIELD_NUMBER = 2;
  private int mode_;
  /**
   * <pre>
   * Optional: Indicates whether connections to this port should be
   * secured using TLS. The value of this field determines how TLS is
   * enforced.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSmode mode = 2;</code>
   * @return The enum numeric value on the wire for mode.
   */
  @java.lang.Override public int getModeValue() {
    return mode_;
  }
  /**
   * <pre>
   * Optional: Indicates whether connections to this port should be
   * secured using TLS. The value of this field determines how TLS is
   * enforced.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSmode mode = 2;</code>
   * @return The mode.
   */
  @java.lang.Override public io.ourea.adapter.model.ServerTLSSettings.TLSmode getMode() {
    @SuppressWarnings("deprecation")
    io.ourea.adapter.model.ServerTLSSettings.TLSmode result = io.ourea.adapter.model.ServerTLSSettings.TLSmode.valueOf(mode_);
    return result == null ? io.ourea.adapter.model.ServerTLSSettings.TLSmode.UNRECOGNIZED : result;
  }

  public static final int SERVER_CERTIFICATE_FIELD_NUMBER = 3;
  private volatile java.lang.Object serverCertificate_;
  /**
   * <pre>
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
   * holding the server-side TLS certificate to use.
   * </pre>
   *
   * <code>string server_certificate = 3;</code>
   * @return The serverCertificate.
   */
  @java.lang.Override
  public java.lang.String getServerCertificate() {
    java.lang.Object ref = serverCertificate_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      serverCertificate_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
   * holding the server-side TLS certificate to use.
   * </pre>
   *
   * <code>string server_certificate = 3;</code>
   * @return The bytes for serverCertificate.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getServerCertificateBytes() {
    java.lang.Object ref = serverCertificate_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      serverCertificate_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PRIVATE_KEY_FIELD_NUMBER = 4;
  private volatile java.lang.Object privateKey_;
  /**
   * <pre>
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
   * holding the server's private key.
   * </pre>
   *
   * <code>string private_key = 4;</code>
   * @return The privateKey.
   */
  @java.lang.Override
  public java.lang.String getPrivateKey() {
    java.lang.Object ref = privateKey_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      privateKey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
   * holding the server's private key.
   * </pre>
   *
   * <code>string private_key = 4;</code>
   * @return The bytes for privateKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPrivateKeyBytes() {
    java.lang.Object ref = privateKey_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      privateKey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CA_CERTIFICATES_FIELD_NUMBER = 5;
  private volatile java.lang.Object caCertificates_;
  /**
   * <pre>
   * REQUIRED if mode is `MUTUAL`. The path to a file containing
   * certificate authority certificates to use in verifying a presented
   * client side certificate.
   * </pre>
   *
   * <code>string ca_certificates = 5;</code>
   * @return The caCertificates.
   */
  @java.lang.Override
  public java.lang.String getCaCertificates() {
    java.lang.Object ref = caCertificates_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      caCertificates_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * REQUIRED if mode is `MUTUAL`. The path to a file containing
   * certificate authority certificates to use in verifying a presented
   * client side certificate.
   * </pre>
   *
   * <code>string ca_certificates = 5;</code>
   * @return The bytes for caCertificates.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCaCertificatesBytes() {
    java.lang.Object ref = caCertificates_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      caCertificates_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CREDENTIAL_NAME_FIELD_NUMBER = 10;
  private volatile java.lang.Object credentialName_;
  /**
   * <pre>
   * For gateways running on Kubernetes, the name of the secret that
   * holds the TLS certs including the CA certificates. Applicable
   * only on Kubernetes. The secret (of type `generic`) should
   * contain the following keys and values: `key:
   * &lt;privateKey&gt;` and `cert: &lt;serverCert&gt;`. For mutual TLS, 
   * `cacert: &lt;CACertificate&gt;` can be provided in the same secret or 
   * a separate secret named `&lt;secret&gt;-cacert`.
   * Secret of type tls for server certificates along with
   * ca.crt key for CA certificates is also supported.
   * Only one of server certificates and CA certificate
   * or credentialName can be specified.
   * </pre>
   *
   * <code>string credential_name = 10;</code>
   * @return The credentialName.
   */
  @java.lang.Override
  public java.lang.String getCredentialName() {
    java.lang.Object ref = credentialName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      credentialName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * For gateways running on Kubernetes, the name of the secret that
   * holds the TLS certs including the CA certificates. Applicable
   * only on Kubernetes. The secret (of type `generic`) should
   * contain the following keys and values: `key:
   * &lt;privateKey&gt;` and `cert: &lt;serverCert&gt;`. For mutual TLS, 
   * `cacert: &lt;CACertificate&gt;` can be provided in the same secret or 
   * a separate secret named `&lt;secret&gt;-cacert`.
   * Secret of type tls for server certificates along with
   * ca.crt key for CA certificates is also supported.
   * Only one of server certificates and CA certificate
   * or credentialName can be specified.
   * </pre>
   *
   * <code>string credential_name = 10;</code>
   * @return The bytes for credentialName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCredentialNameBytes() {
    java.lang.Object ref = credentialName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      credentialName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SUBJECT_ALT_NAMES_FIELD_NUMBER = 6;
  private com.google.protobuf.LazyStringList subjectAltNames_;
  /**
   * <pre>
   * A list of alternate names to verify the subject identity in the
   * certificate presented by the client.
   * </pre>
   *
   * <code>repeated string subject_alt_names = 6;</code>
   * @return A list containing the subjectAltNames.
   */
  public com.google.protobuf.ProtocolStringList
      getSubjectAltNamesList() {
    return subjectAltNames_;
  }
  /**
   * <pre>
   * A list of alternate names to verify the subject identity in the
   * certificate presented by the client.
   * </pre>
   *
   * <code>repeated string subject_alt_names = 6;</code>
   * @return The count of subjectAltNames.
   */
  public int getSubjectAltNamesCount() {
    return subjectAltNames_.size();
  }
  /**
   * <pre>
   * A list of alternate names to verify the subject identity in the
   * certificate presented by the client.
   * </pre>
   *
   * <code>repeated string subject_alt_names = 6;</code>
   * @param index The index of the element to return.
   * @return The subjectAltNames at the given index.
   */
  public java.lang.String getSubjectAltNames(int index) {
    return subjectAltNames_.get(index);
  }
  /**
   * <pre>
   * A list of alternate names to verify the subject identity in the
   * certificate presented by the client.
   * </pre>
   *
   * <code>repeated string subject_alt_names = 6;</code>
   * @param index The index of the value to return.
   * @return The bytes of the subjectAltNames at the given index.
   */
  public com.google.protobuf.ByteString
      getSubjectAltNamesBytes(int index) {
    return subjectAltNames_.getByteString(index);
  }

  public static final int VERIFY_CERTIFICATE_SPKI_FIELD_NUMBER = 11;
  private com.google.protobuf.LazyStringList verifyCertificateSpki_;
  /**
   * <pre>
   * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
   * authorized client certificates.
   * Note: When both verify_certificate_hash and verify_certificate_spki
   * are specified, a hash matching either value will result in the
   * certificate being accepted.
   * </pre>
   *
   * <code>repeated string verify_certificate_spki = 11;</code>
   * @return A list containing the verifyCertificateSpki.
   */
  public com.google.protobuf.ProtocolStringList
      getVerifyCertificateSpkiList() {
    return verifyCertificateSpki_;
  }
  /**
   * <pre>
   * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
   * authorized client certificates.
   * Note: When both verify_certificate_hash and verify_certificate_spki
   * are specified, a hash matching either value will result in the
   * certificate being accepted.
   * </pre>
   *
   * <code>repeated string verify_certificate_spki = 11;</code>
   * @return The count of verifyCertificateSpki.
   */
  public int getVerifyCertificateSpkiCount() {
    return verifyCertificateSpki_.size();
  }
  /**
   * <pre>
   * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
   * authorized client certificates.
   * Note: When both verify_certificate_hash and verify_certificate_spki
   * are specified, a hash matching either value will result in the
   * certificate being accepted.
   * </pre>
   *
   * <code>repeated string verify_certificate_spki = 11;</code>
   * @param index The index of the element to return.
   * @return The verifyCertificateSpki at the given index.
   */
  public java.lang.String getVerifyCertificateSpki(int index) {
    return verifyCertificateSpki_.get(index);
  }
  /**
   * <pre>
   * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
   * authorized client certificates.
   * Note: When both verify_certificate_hash and verify_certificate_spki
   * are specified, a hash matching either value will result in the
   * certificate being accepted.
   * </pre>
   *
   * <code>repeated string verify_certificate_spki = 11;</code>
   * @param index The index of the value to return.
   * @return The bytes of the verifyCertificateSpki at the given index.
   */
  public com.google.protobuf.ByteString
      getVerifyCertificateSpkiBytes(int index) {
    return verifyCertificateSpki_.getByteString(index);
  }

  public static final int VERIFY_CERTIFICATE_HASH_FIELD_NUMBER = 12;
  private com.google.protobuf.LazyStringList verifyCertificateHash_;
  /**
   * <pre>
   * An optional list of hex-encoded SHA-256 hashes of the
   * authorized client certificates. Both simple and colon separated
   * formats are acceptable.
   * Note: When both verify_certificate_hash and verify_certificate_spki
   * are specified, a hash matching either value will result in the
   * certificate being accepted.
   * </pre>
   *
   * <code>repeated string verify_certificate_hash = 12;</code>
   * @return A list containing the verifyCertificateHash.
   */
  public com.google.protobuf.ProtocolStringList
      getVerifyCertificateHashList() {
    return verifyCertificateHash_;
  }
  /**
   * <pre>
   * An optional list of hex-encoded SHA-256 hashes of the
   * authorized client certificates. Both simple and colon separated
   * formats are acceptable.
   * Note: When both verify_certificate_hash and verify_certificate_spki
   * are specified, a hash matching either value will result in the
   * certificate being accepted.
   * </pre>
   *
   * <code>repeated string verify_certificate_hash = 12;</code>
   * @return The count of verifyCertificateHash.
   */
  public int getVerifyCertificateHashCount() {
    return verifyCertificateHash_.size();
  }
  /**
   * <pre>
   * An optional list of hex-encoded SHA-256 hashes of the
   * authorized client certificates. Both simple and colon separated
   * formats are acceptable.
   * Note: When both verify_certificate_hash and verify_certificate_spki
   * are specified, a hash matching either value will result in the
   * certificate being accepted.
   * </pre>
   *
   * <code>repeated string verify_certificate_hash = 12;</code>
   * @param index The index of the element to return.
   * @return The verifyCertificateHash at the given index.
   */
  public java.lang.String getVerifyCertificateHash(int index) {
    return verifyCertificateHash_.get(index);
  }
  /**
   * <pre>
   * An optional list of hex-encoded SHA-256 hashes of the
   * authorized client certificates. Both simple and colon separated
   * formats are acceptable.
   * Note: When both verify_certificate_hash and verify_certificate_spki
   * are specified, a hash matching either value will result in the
   * certificate being accepted.
   * </pre>
   *
   * <code>repeated string verify_certificate_hash = 12;</code>
   * @param index The index of the value to return.
   * @return The bytes of the verifyCertificateHash at the given index.
   */
  public com.google.protobuf.ByteString
      getVerifyCertificateHashBytes(int index) {
    return verifyCertificateHash_.getByteString(index);
  }

  public static final int MIN_PROTOCOL_VERSION_FIELD_NUMBER = 7;
  private int minProtocolVersion_;
  /**
   * <pre>
   * Optional: Minimum TLS protocol version.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol min_protocol_version = 7;</code>
   * @return The enum numeric value on the wire for minProtocolVersion.
   */
  @java.lang.Override public int getMinProtocolVersionValue() {
    return minProtocolVersion_;
  }
  /**
   * <pre>
   * Optional: Minimum TLS protocol version.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol min_protocol_version = 7;</code>
   * @return The minProtocolVersion.
   */
  @java.lang.Override public io.ourea.adapter.model.ServerTLSSettings.TLSProtocol getMinProtocolVersion() {
    @SuppressWarnings("deprecation")
    io.ourea.adapter.model.ServerTLSSettings.TLSProtocol result = io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.valueOf(minProtocolVersion_);
    return result == null ? io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.UNRECOGNIZED : result;
  }

  public static final int MAX_PROTOCOL_VERSION_FIELD_NUMBER = 8;
  private int maxProtocolVersion_;
  /**
   * <pre>
   * Optional: Maximum TLS protocol version.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol max_protocol_version = 8;</code>
   * @return The enum numeric value on the wire for maxProtocolVersion.
   */
  @java.lang.Override public int getMaxProtocolVersionValue() {
    return maxProtocolVersion_;
  }
  /**
   * <pre>
   * Optional: Maximum TLS protocol version.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol max_protocol_version = 8;</code>
   * @return The maxProtocolVersion.
   */
  @java.lang.Override public io.ourea.adapter.model.ServerTLSSettings.TLSProtocol getMaxProtocolVersion() {
    @SuppressWarnings("deprecation")
    io.ourea.adapter.model.ServerTLSSettings.TLSProtocol result = io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.valueOf(maxProtocolVersion_);
    return result == null ? io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.UNRECOGNIZED : result;
  }

  public static final int CIPHER_SUITES_FIELD_NUMBER = 9;
  private com.google.protobuf.LazyStringList cipherSuites_;
  /**
   * <pre>
   * Optional: If specified, only support the specified cipher list.
   * Otherwise default to the default cipher list supported by Envoy.
   * </pre>
   *
   * <code>repeated string cipher_suites = 9;</code>
   * @return A list containing the cipherSuites.
   */
  public com.google.protobuf.ProtocolStringList
      getCipherSuitesList() {
    return cipherSuites_;
  }
  /**
   * <pre>
   * Optional: If specified, only support the specified cipher list.
   * Otherwise default to the default cipher list supported by Envoy.
   * </pre>
   *
   * <code>repeated string cipher_suites = 9;</code>
   * @return The count of cipherSuites.
   */
  public int getCipherSuitesCount() {
    return cipherSuites_.size();
  }
  /**
   * <pre>
   * Optional: If specified, only support the specified cipher list.
   * Otherwise default to the default cipher list supported by Envoy.
   * </pre>
   *
   * <code>repeated string cipher_suites = 9;</code>
   * @param index The index of the element to return.
   * @return The cipherSuites at the given index.
   */
  public java.lang.String getCipherSuites(int index) {
    return cipherSuites_.get(index);
  }
  /**
   * <pre>
   * Optional: If specified, only support the specified cipher list.
   * Otherwise default to the default cipher list supported by Envoy.
   * </pre>
   *
   * <code>repeated string cipher_suites = 9;</code>
   * @param index The index of the value to return.
   * @return The bytes of the cipherSuites at the given index.
   */
  public com.google.protobuf.ByteString
      getCipherSuitesBytes(int index) {
    return cipherSuites_.getByteString(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (httpsRedirect_ != false) {
      output.writeBool(1, httpsRedirect_);
    }
    if (mode_ != io.ourea.adapter.model.ServerTLSSettings.TLSmode.PASSTHROUGH.getNumber()) {
      output.writeEnum(2, mode_);
    }
    if (!getServerCertificateBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, serverCertificate_);
    }
    if (!getPrivateKeyBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, privateKey_);
    }
    if (!getCaCertificatesBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, caCertificates_);
    }
    for (int i = 0; i < subjectAltNames_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, subjectAltNames_.getRaw(i));
    }
    if (minProtocolVersion_ != io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.TLS_AUTO.getNumber()) {
      output.writeEnum(7, minProtocolVersion_);
    }
    if (maxProtocolVersion_ != io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.TLS_AUTO.getNumber()) {
      output.writeEnum(8, maxProtocolVersion_);
    }
    for (int i = 0; i < cipherSuites_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, cipherSuites_.getRaw(i));
    }
    if (!getCredentialNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 10, credentialName_);
    }
    for (int i = 0; i < verifyCertificateSpki_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 11, verifyCertificateSpki_.getRaw(i));
    }
    for (int i = 0; i < verifyCertificateHash_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 12, verifyCertificateHash_.getRaw(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (httpsRedirect_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, httpsRedirect_);
    }
    if (mode_ != io.ourea.adapter.model.ServerTLSSettings.TLSmode.PASSTHROUGH.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, mode_);
    }
    if (!getServerCertificateBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, serverCertificate_);
    }
    if (!getPrivateKeyBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, privateKey_);
    }
    if (!getCaCertificatesBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, caCertificates_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < subjectAltNames_.size(); i++) {
        dataSize += computeStringSizeNoTag(subjectAltNames_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getSubjectAltNamesList().size();
    }
    if (minProtocolVersion_ != io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.TLS_AUTO.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, minProtocolVersion_);
    }
    if (maxProtocolVersion_ != io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.TLS_AUTO.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(8, maxProtocolVersion_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < cipherSuites_.size(); i++) {
        dataSize += computeStringSizeNoTag(cipherSuites_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getCipherSuitesList().size();
    }
    if (!getCredentialNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, credentialName_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < verifyCertificateSpki_.size(); i++) {
        dataSize += computeStringSizeNoTag(verifyCertificateSpki_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getVerifyCertificateSpkiList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < verifyCertificateHash_.size(); i++) {
        dataSize += computeStringSizeNoTag(verifyCertificateHash_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getVerifyCertificateHashList().size();
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.ourea.adapter.model.ServerTLSSettings)) {
      return super.equals(obj);
    }
    io.ourea.adapter.model.ServerTLSSettings other = (io.ourea.adapter.model.ServerTLSSettings) obj;

    if (getHttpsRedirect()
        != other.getHttpsRedirect()) return false;
    if (mode_ != other.mode_) return false;
    if (!getServerCertificate()
        .equals(other.getServerCertificate())) return false;
    if (!getPrivateKey()
        .equals(other.getPrivateKey())) return false;
    if (!getCaCertificates()
        .equals(other.getCaCertificates())) return false;
    if (!getCredentialName()
        .equals(other.getCredentialName())) return false;
    if (!getSubjectAltNamesList()
        .equals(other.getSubjectAltNamesList())) return false;
    if (!getVerifyCertificateSpkiList()
        .equals(other.getVerifyCertificateSpkiList())) return false;
    if (!getVerifyCertificateHashList()
        .equals(other.getVerifyCertificateHashList())) return false;
    if (minProtocolVersion_ != other.minProtocolVersion_) return false;
    if (maxProtocolVersion_ != other.maxProtocolVersion_) return false;
    if (!getCipherSuitesList()
        .equals(other.getCipherSuitesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + HTTPS_REDIRECT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getHttpsRedirect());
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    hash = (37 * hash) + SERVER_CERTIFICATE_FIELD_NUMBER;
    hash = (53 * hash) + getServerCertificate().hashCode();
    hash = (37 * hash) + PRIVATE_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getPrivateKey().hashCode();
    hash = (37 * hash) + CA_CERTIFICATES_FIELD_NUMBER;
    hash = (53 * hash) + getCaCertificates().hashCode();
    hash = (37 * hash) + CREDENTIAL_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getCredentialName().hashCode();
    if (getSubjectAltNamesCount() > 0) {
      hash = (37 * hash) + SUBJECT_ALT_NAMES_FIELD_NUMBER;
      hash = (53 * hash) + getSubjectAltNamesList().hashCode();
    }
    if (getVerifyCertificateSpkiCount() > 0) {
      hash = (37 * hash) + VERIFY_CERTIFICATE_SPKI_FIELD_NUMBER;
      hash = (53 * hash) + getVerifyCertificateSpkiList().hashCode();
    }
    if (getVerifyCertificateHashCount() > 0) {
      hash = (37 * hash) + VERIFY_CERTIFICATE_HASH_FIELD_NUMBER;
      hash = (53 * hash) + getVerifyCertificateHashList().hashCode();
    }
    hash = (37 * hash) + MIN_PROTOCOL_VERSION_FIELD_NUMBER;
    hash = (53 * hash) + minProtocolVersion_;
    hash = (37 * hash) + MAX_PROTOCOL_VERSION_FIELD_NUMBER;
    hash = (53 * hash) + maxProtocolVersion_;
    if (getCipherSuitesCount() > 0) {
      hash = (37 * hash) + CIPHER_SUITES_FIELD_NUMBER;
      hash = (53 * hash) + getCipherSuitesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.ServerTLSSettings parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.ourea.adapter.model.ServerTLSSettings prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code istio.networking.v1alpha3.ServerTLSSettings}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:istio.networking.v1alpha3.ServerTLSSettings)
      io.ourea.adapter.model.ServerTLSSettingsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.ourea.adapter.model.GatewayOuterClass.internal_static_istio_networking_v1alpha3_ServerTLSSettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.ourea.adapter.model.GatewayOuterClass.internal_static_istio_networking_v1alpha3_ServerTLSSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.ourea.adapter.model.ServerTLSSettings.class, io.ourea.adapter.model.ServerTLSSettings.Builder.class);
    }

    // Construct using io.ourea.adapter.model.ServerTLSSettings.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      httpsRedirect_ = false;

      mode_ = 0;

      serverCertificate_ = "";

      privateKey_ = "";

      caCertificates_ = "";

      credentialName_ = "";

      subjectAltNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      verifyCertificateSpki_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      verifyCertificateHash_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      minProtocolVersion_ = 0;

      maxProtocolVersion_ = 0;

      cipherSuites_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.ourea.adapter.model.GatewayOuterClass.internal_static_istio_networking_v1alpha3_ServerTLSSettings_descriptor;
    }

    @java.lang.Override
    public io.ourea.adapter.model.ServerTLSSettings getDefaultInstanceForType() {
      return io.ourea.adapter.model.ServerTLSSettings.getDefaultInstance();
    }

    @java.lang.Override
    public io.ourea.adapter.model.ServerTLSSettings build() {
      io.ourea.adapter.model.ServerTLSSettings result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.ourea.adapter.model.ServerTLSSettings buildPartial() {
      io.ourea.adapter.model.ServerTLSSettings result = new io.ourea.adapter.model.ServerTLSSettings(this);
      int from_bitField0_ = bitField0_;
      result.httpsRedirect_ = httpsRedirect_;
      result.mode_ = mode_;
      result.serverCertificate_ = serverCertificate_;
      result.privateKey_ = privateKey_;
      result.caCertificates_ = caCertificates_;
      result.credentialName_ = credentialName_;
      if (((bitField0_ & 0x00000001) != 0)) {
        subjectAltNames_ = subjectAltNames_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.subjectAltNames_ = subjectAltNames_;
      if (((bitField0_ & 0x00000002) != 0)) {
        verifyCertificateSpki_ = verifyCertificateSpki_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.verifyCertificateSpki_ = verifyCertificateSpki_;
      if (((bitField0_ & 0x00000004) != 0)) {
        verifyCertificateHash_ = verifyCertificateHash_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000004);
      }
      result.verifyCertificateHash_ = verifyCertificateHash_;
      result.minProtocolVersion_ = minProtocolVersion_;
      result.maxProtocolVersion_ = maxProtocolVersion_;
      if (((bitField0_ & 0x00000008) != 0)) {
        cipherSuites_ = cipherSuites_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000008);
      }
      result.cipherSuites_ = cipherSuites_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.ourea.adapter.model.ServerTLSSettings) {
        return mergeFrom((io.ourea.adapter.model.ServerTLSSettings)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.ourea.adapter.model.ServerTLSSettings other) {
      if (other == io.ourea.adapter.model.ServerTLSSettings.getDefaultInstance()) return this;
      if (other.getHttpsRedirect() != false) {
        setHttpsRedirect(other.getHttpsRedirect());
      }
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      if (!other.getServerCertificate().isEmpty()) {
        serverCertificate_ = other.serverCertificate_;
        onChanged();
      }
      if (!other.getPrivateKey().isEmpty()) {
        privateKey_ = other.privateKey_;
        onChanged();
      }
      if (!other.getCaCertificates().isEmpty()) {
        caCertificates_ = other.caCertificates_;
        onChanged();
      }
      if (!other.getCredentialName().isEmpty()) {
        credentialName_ = other.credentialName_;
        onChanged();
      }
      if (!other.subjectAltNames_.isEmpty()) {
        if (subjectAltNames_.isEmpty()) {
          subjectAltNames_ = other.subjectAltNames_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureSubjectAltNamesIsMutable();
          subjectAltNames_.addAll(other.subjectAltNames_);
        }
        onChanged();
      }
      if (!other.verifyCertificateSpki_.isEmpty()) {
        if (verifyCertificateSpki_.isEmpty()) {
          verifyCertificateSpki_ = other.verifyCertificateSpki_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureVerifyCertificateSpkiIsMutable();
          verifyCertificateSpki_.addAll(other.verifyCertificateSpki_);
        }
        onChanged();
      }
      if (!other.verifyCertificateHash_.isEmpty()) {
        if (verifyCertificateHash_.isEmpty()) {
          verifyCertificateHash_ = other.verifyCertificateHash_;
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          ensureVerifyCertificateHashIsMutable();
          verifyCertificateHash_.addAll(other.verifyCertificateHash_);
        }
        onChanged();
      }
      if (other.minProtocolVersion_ != 0) {
        setMinProtocolVersionValue(other.getMinProtocolVersionValue());
      }
      if (other.maxProtocolVersion_ != 0) {
        setMaxProtocolVersionValue(other.getMaxProtocolVersionValue());
      }
      if (!other.cipherSuites_.isEmpty()) {
        if (cipherSuites_.isEmpty()) {
          cipherSuites_ = other.cipherSuites_;
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          ensureCipherSuitesIsMutable();
          cipherSuites_.addAll(other.cipherSuites_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.ourea.adapter.model.ServerTLSSettings parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.ourea.adapter.model.ServerTLSSettings) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private boolean httpsRedirect_ ;
    /**
     * <pre>
     * If set to true, the load balancer will send a 301 redirect for
     * all http connections, asking the clients to use HTTPS.
     * </pre>
     *
     * <code>bool https_redirect = 1;</code>
     * @return The httpsRedirect.
     */
    @java.lang.Override
    public boolean getHttpsRedirect() {
      return httpsRedirect_;
    }
    /**
     * <pre>
     * If set to true, the load balancer will send a 301 redirect for
     * all http connections, asking the clients to use HTTPS.
     * </pre>
     *
     * <code>bool https_redirect = 1;</code>
     * @param value The httpsRedirect to set.
     * @return This builder for chaining.
     */
    public Builder setHttpsRedirect(boolean value) {
      
      httpsRedirect_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If set to true, the load balancer will send a 301 redirect for
     * all http connections, asking the clients to use HTTPS.
     * </pre>
     *
     * <code>bool https_redirect = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearHttpsRedirect() {
      
      httpsRedirect_ = false;
      onChanged();
      return this;
    }

    private int mode_ = 0;
    /**
     * <pre>
     * Optional: Indicates whether connections to this port should be
     * secured using TLS. The value of this field determines how TLS is
     * enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSmode mode = 2;</code>
     * @return The enum numeric value on the wire for mode.
     */
    @java.lang.Override public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     * Optional: Indicates whether connections to this port should be
     * secured using TLS. The value of this field determines how TLS is
     * enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSmode mode = 2;</code>
     * @param value The enum numeric value on the wire for mode to set.
     * @return This builder for chaining.
     */
    public Builder setModeValue(int value) {
      
      mode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Indicates whether connections to this port should be
     * secured using TLS. The value of this field determines how TLS is
     * enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSmode mode = 2;</code>
     * @return The mode.
     */
    @java.lang.Override
    public io.ourea.adapter.model.ServerTLSSettings.TLSmode getMode() {
      @SuppressWarnings("deprecation")
      io.ourea.adapter.model.ServerTLSSettings.TLSmode result = io.ourea.adapter.model.ServerTLSSettings.TLSmode.valueOf(mode_);
      return result == null ? io.ourea.adapter.model.ServerTLSSettings.TLSmode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Optional: Indicates whether connections to this port should be
     * secured using TLS. The value of this field determines how TLS is
     * enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSmode mode = 2;</code>
     * @param value The mode to set.
     * @return This builder for chaining.
     */
    public Builder setMode(io.ourea.adapter.model.ServerTLSSettings.TLSmode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Indicates whether connections to this port should be
     * secured using TLS. The value of this field determines how TLS is
     * enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSmode mode = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearMode() {
      
      mode_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object serverCertificate_ = "";
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server-side TLS certificate to use.
     * </pre>
     *
     * <code>string server_certificate = 3;</code>
     * @return The serverCertificate.
     */
    public java.lang.String getServerCertificate() {
      java.lang.Object ref = serverCertificate_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        serverCertificate_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server-side TLS certificate to use.
     * </pre>
     *
     * <code>string server_certificate = 3;</code>
     * @return The bytes for serverCertificate.
     */
    public com.google.protobuf.ByteString
        getServerCertificateBytes() {
      java.lang.Object ref = serverCertificate_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        serverCertificate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server-side TLS certificate to use.
     * </pre>
     *
     * <code>string server_certificate = 3;</code>
     * @param value The serverCertificate to set.
     * @return This builder for chaining.
     */
    public Builder setServerCertificate(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      serverCertificate_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server-side TLS certificate to use.
     * </pre>
     *
     * <code>string server_certificate = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearServerCertificate() {
      
      serverCertificate_ = getDefaultInstance().getServerCertificate();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server-side TLS certificate to use.
     * </pre>
     *
     * <code>string server_certificate = 3;</code>
     * @param value The bytes for serverCertificate to set.
     * @return This builder for chaining.
     */
    public Builder setServerCertificateBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      serverCertificate_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object privateKey_ = "";
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server's private key.
     * </pre>
     *
     * <code>string private_key = 4;</code>
     * @return The privateKey.
     */
    public java.lang.String getPrivateKey() {
      java.lang.Object ref = privateKey_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        privateKey_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server's private key.
     * </pre>
     *
     * <code>string private_key = 4;</code>
     * @return The bytes for privateKey.
     */
    public com.google.protobuf.ByteString
        getPrivateKeyBytes() {
      java.lang.Object ref = privateKey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        privateKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server's private key.
     * </pre>
     *
     * <code>string private_key = 4;</code>
     * @param value The privateKey to set.
     * @return This builder for chaining.
     */
    public Builder setPrivateKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      privateKey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server's private key.
     * </pre>
     *
     * <code>string private_key = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPrivateKey() {
      
      privateKey_ = getDefaultInstance().getPrivateKey();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `SIMPLE` or `MUTUAL`. The path to the file
     * holding the server's private key.
     * </pre>
     *
     * <code>string private_key = 4;</code>
     * @param value The bytes for privateKey to set.
     * @return This builder for chaining.
     */
    public Builder setPrivateKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      privateKey_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object caCertificates_ = "";
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to a file containing
     * certificate authority certificates to use in verifying a presented
     * client side certificate.
     * </pre>
     *
     * <code>string ca_certificates = 5;</code>
     * @return The caCertificates.
     */
    public java.lang.String getCaCertificates() {
      java.lang.Object ref = caCertificates_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        caCertificates_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to a file containing
     * certificate authority certificates to use in verifying a presented
     * client side certificate.
     * </pre>
     *
     * <code>string ca_certificates = 5;</code>
     * @return The bytes for caCertificates.
     */
    public com.google.protobuf.ByteString
        getCaCertificatesBytes() {
      java.lang.Object ref = caCertificates_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        caCertificates_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to a file containing
     * certificate authority certificates to use in verifying a presented
     * client side certificate.
     * </pre>
     *
     * <code>string ca_certificates = 5;</code>
     * @param value The caCertificates to set.
     * @return This builder for chaining.
     */
    public Builder setCaCertificates(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      caCertificates_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to a file containing
     * certificate authority certificates to use in verifying a presented
     * client side certificate.
     * </pre>
     *
     * <code>string ca_certificates = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearCaCertificates() {
      
      caCertificates_ = getDefaultInstance().getCaCertificates();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to a file containing
     * certificate authority certificates to use in verifying a presented
     * client side certificate.
     * </pre>
     *
     * <code>string ca_certificates = 5;</code>
     * @param value The bytes for caCertificates to set.
     * @return This builder for chaining.
     */
    public Builder setCaCertificatesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      caCertificates_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object credentialName_ = "";
    /**
     * <pre>
     * For gateways running on Kubernetes, the name of the secret that
     * holds the TLS certs including the CA certificates. Applicable
     * only on Kubernetes. The secret (of type `generic`) should
     * contain the following keys and values: `key:
     * &lt;privateKey&gt;` and `cert: &lt;serverCert&gt;`. For mutual TLS, 
     * `cacert: &lt;CACertificate&gt;` can be provided in the same secret or 
     * a separate secret named `&lt;secret&gt;-cacert`.
     * Secret of type tls for server certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of server certificates and CA certificate
     * or credentialName can be specified.
     * </pre>
     *
     * <code>string credential_name = 10;</code>
     * @return The credentialName.
     */
    public java.lang.String getCredentialName() {
      java.lang.Object ref = credentialName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        credentialName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * For gateways running on Kubernetes, the name of the secret that
     * holds the TLS certs including the CA certificates. Applicable
     * only on Kubernetes. The secret (of type `generic`) should
     * contain the following keys and values: `key:
     * &lt;privateKey&gt;` and `cert: &lt;serverCert&gt;`. For mutual TLS, 
     * `cacert: &lt;CACertificate&gt;` can be provided in the same secret or 
     * a separate secret named `&lt;secret&gt;-cacert`.
     * Secret of type tls for server certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of server certificates and CA certificate
     * or credentialName can be specified.
     * </pre>
     *
     * <code>string credential_name = 10;</code>
     * @return The bytes for credentialName.
     */
    public com.google.protobuf.ByteString
        getCredentialNameBytes() {
      java.lang.Object ref = credentialName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        credentialName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * For gateways running on Kubernetes, the name of the secret that
     * holds the TLS certs including the CA certificates. Applicable
     * only on Kubernetes. The secret (of type `generic`) should
     * contain the following keys and values: `key:
     * &lt;privateKey&gt;` and `cert: &lt;serverCert&gt;`. For mutual TLS, 
     * `cacert: &lt;CACertificate&gt;` can be provided in the same secret or 
     * a separate secret named `&lt;secret&gt;-cacert`.
     * Secret of type tls for server certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of server certificates and CA certificate
     * or credentialName can be specified.
     * </pre>
     *
     * <code>string credential_name = 10;</code>
     * @param value The credentialName to set.
     * @return This builder for chaining.
     */
    public Builder setCredentialName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      credentialName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For gateways running on Kubernetes, the name of the secret that
     * holds the TLS certs including the CA certificates. Applicable
     * only on Kubernetes. The secret (of type `generic`) should
     * contain the following keys and values: `key:
     * &lt;privateKey&gt;` and `cert: &lt;serverCert&gt;`. For mutual TLS, 
     * `cacert: &lt;CACertificate&gt;` can be provided in the same secret or 
     * a separate secret named `&lt;secret&gt;-cacert`.
     * Secret of type tls for server certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of server certificates and CA certificate
     * or credentialName can be specified.
     * </pre>
     *
     * <code>string credential_name = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearCredentialName() {
      
      credentialName_ = getDefaultInstance().getCredentialName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For gateways running on Kubernetes, the name of the secret that
     * holds the TLS certs including the CA certificates. Applicable
     * only on Kubernetes. The secret (of type `generic`) should
     * contain the following keys and values: `key:
     * &lt;privateKey&gt;` and `cert: &lt;serverCert&gt;`. For mutual TLS, 
     * `cacert: &lt;CACertificate&gt;` can be provided in the same secret or 
     * a separate secret named `&lt;secret&gt;-cacert`.
     * Secret of type tls for server certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of server certificates and CA certificate
     * or credentialName can be specified.
     * </pre>
     *
     * <code>string credential_name = 10;</code>
     * @param value The bytes for credentialName to set.
     * @return This builder for chaining.
     */
    public Builder setCredentialNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      credentialName_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList subjectAltNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureSubjectAltNamesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        subjectAltNames_ = new com.google.protobuf.LazyStringArrayList(subjectAltNames_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate presented by the client.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 6;</code>
     * @return A list containing the subjectAltNames.
     */
    public com.google.protobuf.ProtocolStringList
        getSubjectAltNamesList() {
      return subjectAltNames_.getUnmodifiableView();
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate presented by the client.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 6;</code>
     * @return The count of subjectAltNames.
     */
    public int getSubjectAltNamesCount() {
      return subjectAltNames_.size();
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate presented by the client.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 6;</code>
     * @param index The index of the element to return.
     * @return The subjectAltNames at the given index.
     */
    public java.lang.String getSubjectAltNames(int index) {
      return subjectAltNames_.get(index);
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate presented by the client.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 6;</code>
     * @param index The index of the value to return.
     * @return The bytes of the subjectAltNames at the given index.
     */
    public com.google.protobuf.ByteString
        getSubjectAltNamesBytes(int index) {
      return subjectAltNames_.getByteString(index);
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate presented by the client.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 6;</code>
     * @param index The index to set the value at.
     * @param value The subjectAltNames to set.
     * @return This builder for chaining.
     */
    public Builder setSubjectAltNames(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureSubjectAltNamesIsMutable();
      subjectAltNames_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate presented by the client.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 6;</code>
     * @param value The subjectAltNames to add.
     * @return This builder for chaining.
     */
    public Builder addSubjectAltNames(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureSubjectAltNamesIsMutable();
      subjectAltNames_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate presented by the client.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 6;</code>
     * @param values The subjectAltNames to add.
     * @return This builder for chaining.
     */
    public Builder addAllSubjectAltNames(
        java.lang.Iterable<java.lang.String> values) {
      ensureSubjectAltNamesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, subjectAltNames_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate presented by the client.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearSubjectAltNames() {
      subjectAltNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate presented by the client.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 6;</code>
     * @param value The bytes of the subjectAltNames to add.
     * @return This builder for chaining.
     */
    public Builder addSubjectAltNamesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureSubjectAltNamesIsMutable();
      subjectAltNames_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList verifyCertificateSpki_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureVerifyCertificateSpkiIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        verifyCertificateSpki_ = new com.google.protobuf.LazyStringArrayList(verifyCertificateSpki_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
     * authorized client certificates.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_spki = 11;</code>
     * @return A list containing the verifyCertificateSpki.
     */
    public com.google.protobuf.ProtocolStringList
        getVerifyCertificateSpkiList() {
      return verifyCertificateSpki_.getUnmodifiableView();
    }
    /**
     * <pre>
     * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
     * authorized client certificates.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_spki = 11;</code>
     * @return The count of verifyCertificateSpki.
     */
    public int getVerifyCertificateSpkiCount() {
      return verifyCertificateSpki_.size();
    }
    /**
     * <pre>
     * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
     * authorized client certificates.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_spki = 11;</code>
     * @param index The index of the element to return.
     * @return The verifyCertificateSpki at the given index.
     */
    public java.lang.String getVerifyCertificateSpki(int index) {
      return verifyCertificateSpki_.get(index);
    }
    /**
     * <pre>
     * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
     * authorized client certificates.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_spki = 11;</code>
     * @param index The index of the value to return.
     * @return The bytes of the verifyCertificateSpki at the given index.
     */
    public com.google.protobuf.ByteString
        getVerifyCertificateSpkiBytes(int index) {
      return verifyCertificateSpki_.getByteString(index);
    }
    /**
     * <pre>
     * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
     * authorized client certificates.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_spki = 11;</code>
     * @param index The index to set the value at.
     * @param value The verifyCertificateSpki to set.
     * @return This builder for chaining.
     */
    public Builder setVerifyCertificateSpki(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureVerifyCertificateSpkiIsMutable();
      verifyCertificateSpki_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
     * authorized client certificates.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_spki = 11;</code>
     * @param value The verifyCertificateSpki to add.
     * @return This builder for chaining.
     */
    public Builder addVerifyCertificateSpki(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureVerifyCertificateSpkiIsMutable();
      verifyCertificateSpki_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
     * authorized client certificates.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_spki = 11;</code>
     * @param values The verifyCertificateSpki to add.
     * @return This builder for chaining.
     */
    public Builder addAllVerifyCertificateSpki(
        java.lang.Iterable<java.lang.String> values) {
      ensureVerifyCertificateSpkiIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, verifyCertificateSpki_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
     * authorized client certificates.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_spki = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearVerifyCertificateSpki() {
      verifyCertificateSpki_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional list of base64-encoded SHA-256 hashes of the SKPIs of
     * authorized client certificates.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_spki = 11;</code>
     * @param value The bytes of the verifyCertificateSpki to add.
     * @return This builder for chaining.
     */
    public Builder addVerifyCertificateSpkiBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureVerifyCertificateSpkiIsMutable();
      verifyCertificateSpki_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList verifyCertificateHash_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureVerifyCertificateHashIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        verifyCertificateHash_ = new com.google.protobuf.LazyStringArrayList(verifyCertificateHash_);
        bitField0_ |= 0x00000004;
       }
    }
    /**
     * <pre>
     * An optional list of hex-encoded SHA-256 hashes of the
     * authorized client certificates. Both simple and colon separated
     * formats are acceptable.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_hash = 12;</code>
     * @return A list containing the verifyCertificateHash.
     */
    public com.google.protobuf.ProtocolStringList
        getVerifyCertificateHashList() {
      return verifyCertificateHash_.getUnmodifiableView();
    }
    /**
     * <pre>
     * An optional list of hex-encoded SHA-256 hashes of the
     * authorized client certificates. Both simple and colon separated
     * formats are acceptable.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_hash = 12;</code>
     * @return The count of verifyCertificateHash.
     */
    public int getVerifyCertificateHashCount() {
      return verifyCertificateHash_.size();
    }
    /**
     * <pre>
     * An optional list of hex-encoded SHA-256 hashes of the
     * authorized client certificates. Both simple and colon separated
     * formats are acceptable.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_hash = 12;</code>
     * @param index The index of the element to return.
     * @return The verifyCertificateHash at the given index.
     */
    public java.lang.String getVerifyCertificateHash(int index) {
      return verifyCertificateHash_.get(index);
    }
    /**
     * <pre>
     * An optional list of hex-encoded SHA-256 hashes of the
     * authorized client certificates. Both simple and colon separated
     * formats are acceptable.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_hash = 12;</code>
     * @param index The index of the value to return.
     * @return The bytes of the verifyCertificateHash at the given index.
     */
    public com.google.protobuf.ByteString
        getVerifyCertificateHashBytes(int index) {
      return verifyCertificateHash_.getByteString(index);
    }
    /**
     * <pre>
     * An optional list of hex-encoded SHA-256 hashes of the
     * authorized client certificates. Both simple and colon separated
     * formats are acceptable.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_hash = 12;</code>
     * @param index The index to set the value at.
     * @param value The verifyCertificateHash to set.
     * @return This builder for chaining.
     */
    public Builder setVerifyCertificateHash(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureVerifyCertificateHashIsMutable();
      verifyCertificateHash_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional list of hex-encoded SHA-256 hashes of the
     * authorized client certificates. Both simple and colon separated
     * formats are acceptable.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_hash = 12;</code>
     * @param value The verifyCertificateHash to add.
     * @return This builder for chaining.
     */
    public Builder addVerifyCertificateHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureVerifyCertificateHashIsMutable();
      verifyCertificateHash_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional list of hex-encoded SHA-256 hashes of the
     * authorized client certificates. Both simple and colon separated
     * formats are acceptable.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_hash = 12;</code>
     * @param values The verifyCertificateHash to add.
     * @return This builder for chaining.
     */
    public Builder addAllVerifyCertificateHash(
        java.lang.Iterable<java.lang.String> values) {
      ensureVerifyCertificateHashIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, verifyCertificateHash_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional list of hex-encoded SHA-256 hashes of the
     * authorized client certificates. Both simple and colon separated
     * formats are acceptable.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_hash = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearVerifyCertificateHash() {
      verifyCertificateHash_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An optional list of hex-encoded SHA-256 hashes of the
     * authorized client certificates. Both simple and colon separated
     * formats are acceptable.
     * Note: When both verify_certificate_hash and verify_certificate_spki
     * are specified, a hash matching either value will result in the
     * certificate being accepted.
     * </pre>
     *
     * <code>repeated string verify_certificate_hash = 12;</code>
     * @param value The bytes of the verifyCertificateHash to add.
     * @return This builder for chaining.
     */
    public Builder addVerifyCertificateHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureVerifyCertificateHashIsMutable();
      verifyCertificateHash_.add(value);
      onChanged();
      return this;
    }

    private int minProtocolVersion_ = 0;
    /**
     * <pre>
     * Optional: Minimum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol min_protocol_version = 7;</code>
     * @return The enum numeric value on the wire for minProtocolVersion.
     */
    @java.lang.Override public int getMinProtocolVersionValue() {
      return minProtocolVersion_;
    }
    /**
     * <pre>
     * Optional: Minimum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol min_protocol_version = 7;</code>
     * @param value The enum numeric value on the wire for minProtocolVersion to set.
     * @return This builder for chaining.
     */
    public Builder setMinProtocolVersionValue(int value) {
      
      minProtocolVersion_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Minimum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol min_protocol_version = 7;</code>
     * @return The minProtocolVersion.
     */
    @java.lang.Override
    public io.ourea.adapter.model.ServerTLSSettings.TLSProtocol getMinProtocolVersion() {
      @SuppressWarnings("deprecation")
      io.ourea.adapter.model.ServerTLSSettings.TLSProtocol result = io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.valueOf(minProtocolVersion_);
      return result == null ? io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Optional: Minimum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol min_protocol_version = 7;</code>
     * @param value The minProtocolVersion to set.
     * @return This builder for chaining.
     */
    public Builder setMinProtocolVersion(io.ourea.adapter.model.ServerTLSSettings.TLSProtocol value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      minProtocolVersion_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Minimum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol min_protocol_version = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearMinProtocolVersion() {
      
      minProtocolVersion_ = 0;
      onChanged();
      return this;
    }

    private int maxProtocolVersion_ = 0;
    /**
     * <pre>
     * Optional: Maximum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol max_protocol_version = 8;</code>
     * @return The enum numeric value on the wire for maxProtocolVersion.
     */
    @java.lang.Override public int getMaxProtocolVersionValue() {
      return maxProtocolVersion_;
    }
    /**
     * <pre>
     * Optional: Maximum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol max_protocol_version = 8;</code>
     * @param value The enum numeric value on the wire for maxProtocolVersion to set.
     * @return This builder for chaining.
     */
    public Builder setMaxProtocolVersionValue(int value) {
      
      maxProtocolVersion_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Maximum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol max_protocol_version = 8;</code>
     * @return The maxProtocolVersion.
     */
    @java.lang.Override
    public io.ourea.adapter.model.ServerTLSSettings.TLSProtocol getMaxProtocolVersion() {
      @SuppressWarnings("deprecation")
      io.ourea.adapter.model.ServerTLSSettings.TLSProtocol result = io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.valueOf(maxProtocolVersion_);
      return result == null ? io.ourea.adapter.model.ServerTLSSettings.TLSProtocol.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Optional: Maximum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol max_protocol_version = 8;</code>
     * @param value The maxProtocolVersion to set.
     * @return This builder for chaining.
     */
    public Builder setMaxProtocolVersion(io.ourea.adapter.model.ServerTLSSettings.TLSProtocol value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      maxProtocolVersion_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: Maximum TLS protocol version.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ServerTLSSettings.TLSProtocol max_protocol_version = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxProtocolVersion() {
      
      maxProtocolVersion_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList cipherSuites_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureCipherSuitesIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        cipherSuites_ = new com.google.protobuf.LazyStringArrayList(cipherSuites_);
        bitField0_ |= 0x00000008;
       }
    }
    /**
     * <pre>
     * Optional: If specified, only support the specified cipher list.
     * Otherwise default to the default cipher list supported by Envoy.
     * </pre>
     *
     * <code>repeated string cipher_suites = 9;</code>
     * @return A list containing the cipherSuites.
     */
    public com.google.protobuf.ProtocolStringList
        getCipherSuitesList() {
      return cipherSuites_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Optional: If specified, only support the specified cipher list.
     * Otherwise default to the default cipher list supported by Envoy.
     * </pre>
     *
     * <code>repeated string cipher_suites = 9;</code>
     * @return The count of cipherSuites.
     */
    public int getCipherSuitesCount() {
      return cipherSuites_.size();
    }
    /**
     * <pre>
     * Optional: If specified, only support the specified cipher list.
     * Otherwise default to the default cipher list supported by Envoy.
     * </pre>
     *
     * <code>repeated string cipher_suites = 9;</code>
     * @param index The index of the element to return.
     * @return The cipherSuites at the given index.
     */
    public java.lang.String getCipherSuites(int index) {
      return cipherSuites_.get(index);
    }
    /**
     * <pre>
     * Optional: If specified, only support the specified cipher list.
     * Otherwise default to the default cipher list supported by Envoy.
     * </pre>
     *
     * <code>repeated string cipher_suites = 9;</code>
     * @param index The index of the value to return.
     * @return The bytes of the cipherSuites at the given index.
     */
    public com.google.protobuf.ByteString
        getCipherSuitesBytes(int index) {
      return cipherSuites_.getByteString(index);
    }
    /**
     * <pre>
     * Optional: If specified, only support the specified cipher list.
     * Otherwise default to the default cipher list supported by Envoy.
     * </pre>
     *
     * <code>repeated string cipher_suites = 9;</code>
     * @param index The index to set the value at.
     * @param value The cipherSuites to set.
     * @return This builder for chaining.
     */
    public Builder setCipherSuites(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCipherSuitesIsMutable();
      cipherSuites_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: If specified, only support the specified cipher list.
     * Otherwise default to the default cipher list supported by Envoy.
     * </pre>
     *
     * <code>repeated string cipher_suites = 9;</code>
     * @param value The cipherSuites to add.
     * @return This builder for chaining.
     */
    public Builder addCipherSuites(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCipherSuitesIsMutable();
      cipherSuites_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: If specified, only support the specified cipher list.
     * Otherwise default to the default cipher list supported by Envoy.
     * </pre>
     *
     * <code>repeated string cipher_suites = 9;</code>
     * @param values The cipherSuites to add.
     * @return This builder for chaining.
     */
    public Builder addAllCipherSuites(
        java.lang.Iterable<java.lang.String> values) {
      ensureCipherSuitesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, cipherSuites_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: If specified, only support the specified cipher list.
     * Otherwise default to the default cipher list supported by Envoy.
     * </pre>
     *
     * <code>repeated string cipher_suites = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearCipherSuites() {
      cipherSuites_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional: If specified, only support the specified cipher list.
     * Otherwise default to the default cipher list supported by Envoy.
     * </pre>
     *
     * <code>repeated string cipher_suites = 9;</code>
     * @param value The bytes of the cipherSuites to add.
     * @return This builder for chaining.
     */
    public Builder addCipherSuitesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureCipherSuitesIsMutable();
      cipherSuites_.add(value);
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:istio.networking.v1alpha3.ServerTLSSettings)
  }

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.ServerTLSSettings)
  private static final io.ourea.adapter.model.ServerTLSSettings DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.ourea.adapter.model.ServerTLSSettings();
  }

  public static io.ourea.adapter.model.ServerTLSSettings getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ServerTLSSettings>
      PARSER = new com.google.protobuf.AbstractParser<ServerTLSSettings>() {
    @java.lang.Override
    public ServerTLSSettings parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ServerTLSSettings(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ServerTLSSettings> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ServerTLSSettings> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.ourea.adapter.model.ServerTLSSettings getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

