// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sidecar.proto

package io.ourea.adapter.model.istio;

/**
 * <pre>
 * `CaptureMode` describes how traffic to a listener is expected to be
 * captured. Applicable only when the listener is bound to an IP.
 * </pre>
 *
 * Protobuf enum {@code istio.networking.v1alpha3.CaptureMode}
 */
public enum CaptureMode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * The default capture mode defined by the environment.
   * </pre>
   *
   * <code>DEFAULT = 0;</code>
   */
  DEFAULT(0),
  /**
   * <pre>
   * Capture traffic using IPtables redirection.
   * </pre>
   *
   * <code>IPTABLES = 1;</code>
   */
  IPTABLES(1),
  /**
   * <pre>
   * No traffic capture. When used in an egress listener, the application is
   * expected to explicitly communicate with the listener port or Unix
   * domain socket. When used in an ingress listener, care needs to be taken
   * to ensure that the listener port is not in use by other processes on
   * the host.
   * </pre>
   *
   * <code>NONE = 2;</code>
   */
  NONE(2),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * The default capture mode defined by the environment.
   * </pre>
   *
   * <code>DEFAULT = 0;</code>
   */
  public static final int DEFAULT_VALUE = 0;
  /**
   * <pre>
   * Capture traffic using IPtables redirection.
   * </pre>
   *
   * <code>IPTABLES = 1;</code>
   */
  public static final int IPTABLES_VALUE = 1;
  /**
   * <pre>
   * No traffic capture. When used in an egress listener, the application is
   * expected to explicitly communicate with the listener port or Unix
   * domain socket. When used in an ingress listener, care needs to be taken
   * to ensure that the listener port is not in use by other processes on
   * the host.
   * </pre>
   *
   * <code>NONE = 2;</code>
   */
  public static final int NONE_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CaptureMode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static CaptureMode forNumber(int value) {
    switch (value) {
      case 0: return DEFAULT;
      case 1: return IPTABLES;
      case 2: return NONE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CaptureMode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CaptureMode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CaptureMode>() {
          public CaptureMode findValueByNumber(int number) {
            return CaptureMode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.ourea.adapter.model.istio.SidecarOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final CaptureMode[] VALUES = values();

  public static CaptureMode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CaptureMode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:istio.networking.v1alpha3.CaptureMode)
}

