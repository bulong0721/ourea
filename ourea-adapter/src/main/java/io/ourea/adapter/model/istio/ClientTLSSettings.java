// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: destination_rule.proto

package io.ourea.adapter.model.istio;

/**
 * <pre>
 * SSL/TLS related settings for upstream connections. See Envoy's [TLS
 * context](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/auth/cert.proto.html)
 * for more details. These settings are common to both HTTP and TCP upstreams.
 * For example, the following rule configures a client to use mutual TLS
 * for connections to upstream database cluster.
 * {{&lt;tabset category-name="example"&gt;}}
 * {{&lt;tab name="v1alpha3" category-value="v1alpha3"&gt;}}
 * ```yaml
 * apiVersion: networking.istio.io/v1alpha3
 * kind: DestinationRule
 * metadata:
 *   name: db-mtls
 * spec:
 *   host: mydbserver.prod.svc.cluster.local
 *   trafficPolicy:
 *     tls:
 *       mode: MUTUAL
 *       clientCertificate: /etc/certs/myclientcert.pem
 *       privateKey: /etc/certs/client_private_key.pem
 *       caCertificates: /etc/certs/rootcacerts.pem
 * ```
 * {{&lt;/tab&gt;}}
 * {{&lt;tab name="v1beta1" category-value="v1beta1"&gt;}}
 * ```yaml
 * apiVersion: networking.istio.io/v1beta1
 * kind: DestinationRule
 * metadata:
 *   name: db-mtls
 * spec:
 *   host: mydbserver.prod.svc.cluster.local
 *   trafficPolicy:
 *     tls:
 *       mode: MUTUAL
 *       clientCertificate: /etc/certs/myclientcert.pem
 *       privateKey: /etc/certs/client_private_key.pem
 *       caCertificates: /etc/certs/rootcacerts.pem
 * ```
 * {{&lt;/tab&gt;}}
 * {{&lt;/tabset&gt;}}
 * The following rule configures a client to use TLS when talking to a
 * foreign service whose domain matches *.foo.com.
 * {{&lt;tabset category-name="example"&gt;}}
 * {{&lt;tab name="v1alpha3" category-value="v1alpha3"&gt;}}
 * ```yaml
 * apiVersion: networking.istio.io/v1alpha3
 * kind: DestinationRule
 * metadata:
 *   name: tls-foo
 * spec:
 *   host: "*.foo.com"
 *   trafficPolicy:
 *     tls:
 *       mode: SIMPLE
 * ```
 * {{&lt;/tab&gt;}}
 * {{&lt;tab name="v1beta1" category-value="v1beta1"&gt;}}
 * ```yaml
 * apiVersion: networking.istio.io/v1beta1
 * kind: DestinationRule
 * metadata:
 *   name: tls-foo
 * spec:
 *   host: "*.foo.com"
 *   trafficPolicy:
 *     tls:
 *       mode: SIMPLE
 * ```
 * {{&lt;/tab&gt;}}
 * {{&lt;/tabset&gt;}}
 * The following rule configures a client to use Istio mutual TLS when talking
 * to rating services.
 * {{&lt;tabset category-name="example"&gt;}}
 * {{&lt;tab name="v1alpha3" category-value="v1alpha3"&gt;}}
 * ```yaml
 * apiVersion: networking.istio.io/v1alpha3
 * kind: DestinationRule
 * metadata:
 *   name: ratings-istio-mtls
 * spec:
 *   host: ratings.prod.svc.cluster.local
 *   trafficPolicy:
 *     tls:
 *       mode: ISTIO_MUTUAL
 * ```
 * {{&lt;/tab&gt;}}
 * {{&lt;tab name="v1beta1" category-value="v1beta1"&gt;}}
 * ```yaml
 * apiVersion: networking.istio.io/v1beta1
 * kind: DestinationRule
 * metadata:
 *   name: ratings-istio-mtls
 * spec:
 *   host: ratings.prod.svc.cluster.local
 *   trafficPolicy:
 *     tls:
 *       mode: ISTIO_MUTUAL
 * ```
 * {{&lt;/tab&gt;}}
 * {{&lt;/tabset&gt;}}
 * </pre>
 *
 * Protobuf type {@code istio.networking.v1alpha3.ClientTLSSettings}
 */
public final class ClientTLSSettings extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:istio.networking.v1alpha3.ClientTLSSettings)
    ClientTLSSettingsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ClientTLSSettings.newBuilder() to construct.
  private ClientTLSSettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ClientTLSSettings() {
    mode_ = 0;
    clientCertificate_ = "";
    privateKey_ = "";
    caCertificates_ = "";
    credentialName_ = "";
    subjectAltNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    sni_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ClientTLSSettings();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ClientTLSSettings(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            mode_ = rawValue;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            clientCertificate_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            privateKey_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            caCertificates_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              subjectAltNames_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            subjectAltNames_.add(s);
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();

            sni_ = s;
            break;
          }
          case 58: {
            java.lang.String s = input.readStringRequireUtf8();

            credentialName_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        subjectAltNames_ = subjectAltNames_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.ourea.adapter.model.istio.DestinationRuleOuterClass.internal_static_istio_networking_v1alpha3_ClientTLSSettings_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.ourea.adapter.model.istio.DestinationRuleOuterClass.internal_static_istio_networking_v1alpha3_ClientTLSSettings_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.ourea.adapter.model.istio.ClientTLSSettings.class, io.ourea.adapter.model.istio.ClientTLSSettings.Builder.class);
  }

  /**
   * <pre>
   * TLS connection mode
   * </pre>
   *
   * Protobuf enum {@code istio.networking.v1alpha3.ClientTLSSettings.TLSmode}
   */
  public enum TLSmode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Do not setup a TLS connection to the upstream endpoint.
     * </pre>
     *
     * <code>DISABLE = 0;</code>
     */
    DISABLE(0),
    /**
     * <pre>
     * Originate a TLS connection to the upstream endpoint.
     * </pre>
     *
     * <code>SIMPLE = 1;</code>
     */
    SIMPLE(1),
    /**
     * <pre>
     * Secure connections to the upstream using mutual TLS by presenting
     * client certificates for authentication.
     * </pre>
     *
     * <code>MUTUAL = 2;</code>
     */
    MUTUAL(2),
    /**
     * <pre>
     * Secure connections to the upstream using mutual TLS by presenting
     * client certificates for authentication.
     * Compared to Mutual mode, this mode uses certificates generated
     * automatically by Istio for mTLS authentication. When this mode is
     * used, all other fields in `ClientTLSSettings` should be empty.
     * </pre>
     *
     * <code>ISTIO_MUTUAL = 3;</code>
     */
    ISTIO_MUTUAL(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Do not setup a TLS connection to the upstream endpoint.
     * </pre>
     *
     * <code>DISABLE = 0;</code>
     */
    public static final int DISABLE_VALUE = 0;
    /**
     * <pre>
     * Originate a TLS connection to the upstream endpoint.
     * </pre>
     *
     * <code>SIMPLE = 1;</code>
     */
    public static final int SIMPLE_VALUE = 1;
    /**
     * <pre>
     * Secure connections to the upstream using mutual TLS by presenting
     * client certificates for authentication.
     * </pre>
     *
     * <code>MUTUAL = 2;</code>
     */
    public static final int MUTUAL_VALUE = 2;
    /**
     * <pre>
     * Secure connections to the upstream using mutual TLS by presenting
     * client certificates for authentication.
     * Compared to Mutual mode, this mode uses certificates generated
     * automatically by Istio for mTLS authentication. When this mode is
     * used, all other fields in `ClientTLSSettings` should be empty.
     * </pre>
     *
     * <code>ISTIO_MUTUAL = 3;</code>
     */
    public static final int ISTIO_MUTUAL_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TLSmode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TLSmode forNumber(int value) {
      switch (value) {
        case 0: return DISABLE;
        case 1: return SIMPLE;
        case 2: return MUTUAL;
        case 3: return ISTIO_MUTUAL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TLSmode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TLSmode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TLSmode>() {
            public TLSmode findValueByNumber(int number) {
              return TLSmode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.ourea.adapter.model.istio.ClientTLSSettings.getDescriptor().getEnumTypes().get(0);
    }

    private static final TLSmode[] VALUES = values();

    public static TLSmode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TLSmode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:istio.networking.v1alpha3.ClientTLSSettings.TLSmode)
  }

  public static final int MODE_FIELD_NUMBER = 1;
  private int mode_;
  /**
   * <pre>
   * Indicates whether connections to this port should be secured
   * using TLS. The value of this field determines how TLS is enforced.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.ClientTLSSettings.TLSmode mode = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The enum numeric value on the wire for mode.
   */
  @java.lang.Override public int getModeValue() {
    return mode_;
  }
  /**
   * <pre>
   * Indicates whether connections to this port should be secured
   * using TLS. The value of this field determines how TLS is enforced.
   * </pre>
   *
   * <code>.istio.networking.v1alpha3.ClientTLSSettings.TLSmode mode = 1 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The mode.
   */
  @java.lang.Override public io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode getMode() {
    @SuppressWarnings("deprecation")
    io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode result = io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode.valueOf(mode_);
    return result == null ? io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode.UNRECOGNIZED : result;
  }

  public static final int CLIENT_CERTIFICATE_FIELD_NUMBER = 2;
  private volatile java.lang.Object clientCertificate_;
  /**
   * <pre>
   * REQUIRED if mode is `MUTUAL`. The path to the file holding the
   * client-side TLS certificate to use.
   * Should be empty if mode is `ISTIO_MUTUAL`.
   * </pre>
   *
   * <code>string client_certificate = 2;</code>
   * @return The clientCertificate.
   */
  @java.lang.Override
  public java.lang.String getClientCertificate() {
    java.lang.Object ref = clientCertificate_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      clientCertificate_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * REQUIRED if mode is `MUTUAL`. The path to the file holding the
   * client-side TLS certificate to use.
   * Should be empty if mode is `ISTIO_MUTUAL`.
   * </pre>
   *
   * <code>string client_certificate = 2;</code>
   * @return The bytes for clientCertificate.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getClientCertificateBytes() {
    java.lang.Object ref = clientCertificate_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      clientCertificate_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PRIVATE_KEY_FIELD_NUMBER = 3;
  private volatile java.lang.Object privateKey_;
  /**
   * <pre>
   * REQUIRED if mode is `MUTUAL`. The path to the file holding the
   * client's private key.
   * Should be empty if mode is `ISTIO_MUTUAL`.
   * </pre>
   *
   * <code>string private_key = 3;</code>
   * @return The privateKey.
   */
  @java.lang.Override
  public java.lang.String getPrivateKey() {
    java.lang.Object ref = privateKey_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      privateKey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * REQUIRED if mode is `MUTUAL`. The path to the file holding the
   * client's private key.
   * Should be empty if mode is `ISTIO_MUTUAL`.
   * </pre>
   *
   * <code>string private_key = 3;</code>
   * @return The bytes for privateKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPrivateKeyBytes() {
    java.lang.Object ref = privateKey_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      privateKey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CA_CERTIFICATES_FIELD_NUMBER = 4;
  private volatile java.lang.Object caCertificates_;
  /**
   * <pre>
   * OPTIONAL: The path to the file containing certificate authority
   * certificates to use in verifying a presented server certificate. If
   * omitted, the proxy will not verify the server's certificate.
   * Should be empty if mode is `ISTIO_MUTUAL`.
   * </pre>
   *
   * <code>string ca_certificates = 4;</code>
   * @return The caCertificates.
   */
  @java.lang.Override
  public java.lang.String getCaCertificates() {
    java.lang.Object ref = caCertificates_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      caCertificates_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * OPTIONAL: The path to the file containing certificate authority
   * certificates to use in verifying a presented server certificate. If
   * omitted, the proxy will not verify the server's certificate.
   * Should be empty if mode is `ISTIO_MUTUAL`.
   * </pre>
   *
   * <code>string ca_certificates = 4;</code>
   * @return The bytes for caCertificates.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCaCertificatesBytes() {
    java.lang.Object ref = caCertificates_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      caCertificates_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CREDENTIAL_NAME_FIELD_NUMBER = 7;
  private volatile java.lang.Object credentialName_;
  /**
   * <pre>
   * The name of the secret that holds the TLS certs for the
   * client including the CA certificates. Secret must exist in the
   * same namespace with the proxy using the certificates.
   * The secret (of type `generic`)should contain the
   * following keys and values: `key: &lt;privateKey&gt;`,
   * `cert: &lt;serverCert&gt;`, `cacert: &lt;CACertificate&gt;`.
   * Secret of type tls for client certificates along with
   * ca.crt key for CA certificates is also supported.
   * Only one of client certificates and CA certificate
   * or credentialName can be specified.
   * **NOTE:** This field is currently applicable only at gateways.
   * Sidecars will continue to use the certificate paths.
   * </pre>
   *
   * <code>string credential_name = 7;</code>
   * @return The credentialName.
   */
  @java.lang.Override
  public java.lang.String getCredentialName() {
    java.lang.Object ref = credentialName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      credentialName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the secret that holds the TLS certs for the
   * client including the CA certificates. Secret must exist in the
   * same namespace with the proxy using the certificates.
   * The secret (of type `generic`)should contain the
   * following keys and values: `key: &lt;privateKey&gt;`,
   * `cert: &lt;serverCert&gt;`, `cacert: &lt;CACertificate&gt;`.
   * Secret of type tls for client certificates along with
   * ca.crt key for CA certificates is also supported.
   * Only one of client certificates and CA certificate
   * or credentialName can be specified.
   * **NOTE:** This field is currently applicable only at gateways.
   * Sidecars will continue to use the certificate paths.
   * </pre>
   *
   * <code>string credential_name = 7;</code>
   * @return The bytes for credentialName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getCredentialNameBytes() {
    java.lang.Object ref = credentialName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      credentialName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SUBJECT_ALT_NAMES_FIELD_NUMBER = 5;
  private com.google.protobuf.LazyStringList subjectAltNames_;
  /**
   * <pre>
   * A list of alternate names to verify the subject identity in the
   * certificate. If specified, the proxy will verify that the server
   * certificate's subject alt name matches one of the specified values.
   * If specified, this list overrides the value of subject_alt_names
   * from the ServiceEntry.
   * </pre>
   *
   * <code>repeated string subject_alt_names = 5;</code>
   * @return A list containing the subjectAltNames.
   */
  public com.google.protobuf.ProtocolStringList
      getSubjectAltNamesList() {
    return subjectAltNames_;
  }
  /**
   * <pre>
   * A list of alternate names to verify the subject identity in the
   * certificate. If specified, the proxy will verify that the server
   * certificate's subject alt name matches one of the specified values.
   * If specified, this list overrides the value of subject_alt_names
   * from the ServiceEntry.
   * </pre>
   *
   * <code>repeated string subject_alt_names = 5;</code>
   * @return The count of subjectAltNames.
   */
  public int getSubjectAltNamesCount() {
    return subjectAltNames_.size();
  }
  /**
   * <pre>
   * A list of alternate names to verify the subject identity in the
   * certificate. If specified, the proxy will verify that the server
   * certificate's subject alt name matches one of the specified values.
   * If specified, this list overrides the value of subject_alt_names
   * from the ServiceEntry.
   * </pre>
   *
   * <code>repeated string subject_alt_names = 5;</code>
   * @param index The index of the element to return.
   * @return The subjectAltNames at the given index.
   */
  public java.lang.String getSubjectAltNames(int index) {
    return subjectAltNames_.get(index);
  }
  /**
   * <pre>
   * A list of alternate names to verify the subject identity in the
   * certificate. If specified, the proxy will verify that the server
   * certificate's subject alt name matches one of the specified values.
   * If specified, this list overrides the value of subject_alt_names
   * from the ServiceEntry.
   * </pre>
   *
   * <code>repeated string subject_alt_names = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the subjectAltNames at the given index.
   */
  public com.google.protobuf.ByteString
      getSubjectAltNamesBytes(int index) {
    return subjectAltNames_.getByteString(index);
  }

  public static final int SNI_FIELD_NUMBER = 6;
  private volatile java.lang.Object sni_;
  /**
   * <pre>
   * SNI string to present to the server during TLS handshake.
   * </pre>
   *
   * <code>string sni = 6;</code>
   * @return The sni.
   */
  @java.lang.Override
  public java.lang.String getSni() {
    java.lang.Object ref = sni_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      sni_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * SNI string to present to the server during TLS handshake.
   * </pre>
   *
   * <code>string sni = 6;</code>
   * @return The bytes for sni.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getSniBytes() {
    java.lang.Object ref = sni_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      sni_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (mode_ != io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode.DISABLE.getNumber()) {
      output.writeEnum(1, mode_);
    }
    if (!getClientCertificateBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, clientCertificate_);
    }
    if (!getPrivateKeyBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, privateKey_);
    }
    if (!getCaCertificatesBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, caCertificates_);
    }
    for (int i = 0; i < subjectAltNames_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, subjectAltNames_.getRaw(i));
    }
    if (!getSniBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, sni_);
    }
    if (!getCredentialNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, credentialName_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (mode_ != io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode.DISABLE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, mode_);
    }
    if (!getClientCertificateBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, clientCertificate_);
    }
    if (!getPrivateKeyBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, privateKey_);
    }
    if (!getCaCertificatesBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, caCertificates_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < subjectAltNames_.size(); i++) {
        dataSize += computeStringSizeNoTag(subjectAltNames_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getSubjectAltNamesList().size();
    }
    if (!getSniBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, sni_);
    }
    if (!getCredentialNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, credentialName_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.ourea.adapter.model.istio.ClientTLSSettings)) {
      return super.equals(obj);
    }
    io.ourea.adapter.model.istio.ClientTLSSettings other = (io.ourea.adapter.model.istio.ClientTLSSettings) obj;

    if (mode_ != other.mode_) return false;
    if (!getClientCertificate()
        .equals(other.getClientCertificate())) return false;
    if (!getPrivateKey()
        .equals(other.getPrivateKey())) return false;
    if (!getCaCertificates()
        .equals(other.getCaCertificates())) return false;
    if (!getCredentialName()
        .equals(other.getCredentialName())) return false;
    if (!getSubjectAltNamesList()
        .equals(other.getSubjectAltNamesList())) return false;
    if (!getSni()
        .equals(other.getSni())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    hash = (37 * hash) + CLIENT_CERTIFICATE_FIELD_NUMBER;
    hash = (53 * hash) + getClientCertificate().hashCode();
    hash = (37 * hash) + PRIVATE_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getPrivateKey().hashCode();
    hash = (37 * hash) + CA_CERTIFICATES_FIELD_NUMBER;
    hash = (53 * hash) + getCaCertificates().hashCode();
    hash = (37 * hash) + CREDENTIAL_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getCredentialName().hashCode();
    if (getSubjectAltNamesCount() > 0) {
      hash = (37 * hash) + SUBJECT_ALT_NAMES_FIELD_NUMBER;
      hash = (53 * hash) + getSubjectAltNamesList().hashCode();
    }
    hash = (37 * hash) + SNI_FIELD_NUMBER;
    hash = (53 * hash) + getSni().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.ourea.adapter.model.istio.ClientTLSSettings parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.ourea.adapter.model.istio.ClientTLSSettings prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * SSL/TLS related settings for upstream connections. See Envoy's [TLS
   * context](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/auth/cert.proto.html)
   * for more details. These settings are common to both HTTP and TCP upstreams.
   * For example, the following rule configures a client to use mutual TLS
   * for connections to upstream database cluster.
   * {{&lt;tabset category-name="example"&gt;}}
   * {{&lt;tab name="v1alpha3" category-value="v1alpha3"&gt;}}
   * ```yaml
   * apiVersion: networking.istio.io/v1alpha3
   * kind: DestinationRule
   * metadata:
   *   name: db-mtls
   * spec:
   *   host: mydbserver.prod.svc.cluster.local
   *   trafficPolicy:
   *     tls:
   *       mode: MUTUAL
   *       clientCertificate: /etc/certs/myclientcert.pem
   *       privateKey: /etc/certs/client_private_key.pem
   *       caCertificates: /etc/certs/rootcacerts.pem
   * ```
   * {{&lt;/tab&gt;}}
   * {{&lt;tab name="v1beta1" category-value="v1beta1"&gt;}}
   * ```yaml
   * apiVersion: networking.istio.io/v1beta1
   * kind: DestinationRule
   * metadata:
   *   name: db-mtls
   * spec:
   *   host: mydbserver.prod.svc.cluster.local
   *   trafficPolicy:
   *     tls:
   *       mode: MUTUAL
   *       clientCertificate: /etc/certs/myclientcert.pem
   *       privateKey: /etc/certs/client_private_key.pem
   *       caCertificates: /etc/certs/rootcacerts.pem
   * ```
   * {{&lt;/tab&gt;}}
   * {{&lt;/tabset&gt;}}
   * The following rule configures a client to use TLS when talking to a
   * foreign service whose domain matches *.foo.com.
   * {{&lt;tabset category-name="example"&gt;}}
   * {{&lt;tab name="v1alpha3" category-value="v1alpha3"&gt;}}
   * ```yaml
   * apiVersion: networking.istio.io/v1alpha3
   * kind: DestinationRule
   * metadata:
   *   name: tls-foo
   * spec:
   *   host: "*.foo.com"
   *   trafficPolicy:
   *     tls:
   *       mode: SIMPLE
   * ```
   * {{&lt;/tab&gt;}}
   * {{&lt;tab name="v1beta1" category-value="v1beta1"&gt;}}
   * ```yaml
   * apiVersion: networking.istio.io/v1beta1
   * kind: DestinationRule
   * metadata:
   *   name: tls-foo
   * spec:
   *   host: "*.foo.com"
   *   trafficPolicy:
   *     tls:
   *       mode: SIMPLE
   * ```
   * {{&lt;/tab&gt;}}
   * {{&lt;/tabset&gt;}}
   * The following rule configures a client to use Istio mutual TLS when talking
   * to rating services.
   * {{&lt;tabset category-name="example"&gt;}}
   * {{&lt;tab name="v1alpha3" category-value="v1alpha3"&gt;}}
   * ```yaml
   * apiVersion: networking.istio.io/v1alpha3
   * kind: DestinationRule
   * metadata:
   *   name: ratings-istio-mtls
   * spec:
   *   host: ratings.prod.svc.cluster.local
   *   trafficPolicy:
   *     tls:
   *       mode: ISTIO_MUTUAL
   * ```
   * {{&lt;/tab&gt;}}
   * {{&lt;tab name="v1beta1" category-value="v1beta1"&gt;}}
   * ```yaml
   * apiVersion: networking.istio.io/v1beta1
   * kind: DestinationRule
   * metadata:
   *   name: ratings-istio-mtls
   * spec:
   *   host: ratings.prod.svc.cluster.local
   *   trafficPolicy:
   *     tls:
   *       mode: ISTIO_MUTUAL
   * ```
   * {{&lt;/tab&gt;}}
   * {{&lt;/tabset&gt;}}
   * </pre>
   *
   * Protobuf type {@code istio.networking.v1alpha3.ClientTLSSettings}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:istio.networking.v1alpha3.ClientTLSSettings)
      io.ourea.adapter.model.istio.ClientTLSSettingsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.ourea.adapter.model.istio.DestinationRuleOuterClass.internal_static_istio_networking_v1alpha3_ClientTLSSettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.ourea.adapter.model.istio.DestinationRuleOuterClass.internal_static_istio_networking_v1alpha3_ClientTLSSettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.ourea.adapter.model.istio.ClientTLSSettings.class, io.ourea.adapter.model.istio.ClientTLSSettings.Builder.class);
    }

    // Construct using io.ourea.adapter.model.istio.ClientTLSSettings.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      mode_ = 0;

      clientCertificate_ = "";

      privateKey_ = "";

      caCertificates_ = "";

      credentialName_ = "";

      subjectAltNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      sni_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.ourea.adapter.model.istio.DestinationRuleOuterClass.internal_static_istio_networking_v1alpha3_ClientTLSSettings_descriptor;
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.ClientTLSSettings getDefaultInstanceForType() {
      return io.ourea.adapter.model.istio.ClientTLSSettings.getDefaultInstance();
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.ClientTLSSettings build() {
      io.ourea.adapter.model.istio.ClientTLSSettings result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.ourea.adapter.model.istio.ClientTLSSettings buildPartial() {
      io.ourea.adapter.model.istio.ClientTLSSettings result = new io.ourea.adapter.model.istio.ClientTLSSettings(this);
      int from_bitField0_ = bitField0_;
      result.mode_ = mode_;
      result.clientCertificate_ = clientCertificate_;
      result.privateKey_ = privateKey_;
      result.caCertificates_ = caCertificates_;
      result.credentialName_ = credentialName_;
      if (((bitField0_ & 0x00000001) != 0)) {
        subjectAltNames_ = subjectAltNames_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.subjectAltNames_ = subjectAltNames_;
      result.sni_ = sni_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.ourea.adapter.model.istio.ClientTLSSettings) {
        return mergeFrom((io.ourea.adapter.model.istio.ClientTLSSettings)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.ourea.adapter.model.istio.ClientTLSSettings other) {
      if (other == io.ourea.adapter.model.istio.ClientTLSSettings.getDefaultInstance()) return this;
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      if (!other.getClientCertificate().isEmpty()) {
        clientCertificate_ = other.clientCertificate_;
        onChanged();
      }
      if (!other.getPrivateKey().isEmpty()) {
        privateKey_ = other.privateKey_;
        onChanged();
      }
      if (!other.getCaCertificates().isEmpty()) {
        caCertificates_ = other.caCertificates_;
        onChanged();
      }
      if (!other.getCredentialName().isEmpty()) {
        credentialName_ = other.credentialName_;
        onChanged();
      }
      if (!other.subjectAltNames_.isEmpty()) {
        if (subjectAltNames_.isEmpty()) {
          subjectAltNames_ = other.subjectAltNames_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureSubjectAltNamesIsMutable();
          subjectAltNames_.addAll(other.subjectAltNames_);
        }
        onChanged();
      }
      if (!other.getSni().isEmpty()) {
        sni_ = other.sni_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.ourea.adapter.model.istio.ClientTLSSettings parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.ourea.adapter.model.istio.ClientTLSSettings) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int mode_ = 0;
    /**
     * <pre>
     * Indicates whether connections to this port should be secured
     * using TLS. The value of this field determines how TLS is enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ClientTLSSettings.TLSmode mode = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The enum numeric value on the wire for mode.
     */
    @java.lang.Override public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     * Indicates whether connections to this port should be secured
     * using TLS. The value of this field determines how TLS is enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ClientTLSSettings.TLSmode mode = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The enum numeric value on the wire for mode to set.
     * @return This builder for chaining.
     */
    public Builder setModeValue(int value) {
      
      mode_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates whether connections to this port should be secured
     * using TLS. The value of this field determines how TLS is enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ClientTLSSettings.TLSmode mode = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return The mode.
     */
    @java.lang.Override
    public io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode getMode() {
      @SuppressWarnings("deprecation")
      io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode result = io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode.valueOf(mode_);
      return result == null ? io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Indicates whether connections to this port should be secured
     * using TLS. The value of this field determines how TLS is enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ClientTLSSettings.TLSmode mode = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param value The mode to set.
     * @return This builder for chaining.
     */
    public Builder setMode(io.ourea.adapter.model.istio.ClientTLSSettings.TLSmode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates whether connections to this port should be secured
     * using TLS. The value of this field determines how TLS is enforced.
     * </pre>
     *
     * <code>.istio.networking.v1alpha3.ClientTLSSettings.TLSmode mode = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearMode() {
      
      mode_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object clientCertificate_ = "";
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client-side TLS certificate to use.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string client_certificate = 2;</code>
     * @return The clientCertificate.
     */
    public java.lang.String getClientCertificate() {
      java.lang.Object ref = clientCertificate_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        clientCertificate_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client-side TLS certificate to use.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string client_certificate = 2;</code>
     * @return The bytes for clientCertificate.
     */
    public com.google.protobuf.ByteString
        getClientCertificateBytes() {
      java.lang.Object ref = clientCertificate_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clientCertificate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client-side TLS certificate to use.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string client_certificate = 2;</code>
     * @param value The clientCertificate to set.
     * @return This builder for chaining.
     */
    public Builder setClientCertificate(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      clientCertificate_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client-side TLS certificate to use.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string client_certificate = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearClientCertificate() {
      
      clientCertificate_ = getDefaultInstance().getClientCertificate();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client-side TLS certificate to use.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string client_certificate = 2;</code>
     * @param value The bytes for clientCertificate to set.
     * @return This builder for chaining.
     */
    public Builder setClientCertificateBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      clientCertificate_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object privateKey_ = "";
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client's private key.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string private_key = 3;</code>
     * @return The privateKey.
     */
    public java.lang.String getPrivateKey() {
      java.lang.Object ref = privateKey_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        privateKey_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client's private key.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string private_key = 3;</code>
     * @return The bytes for privateKey.
     */
    public com.google.protobuf.ByteString
        getPrivateKeyBytes() {
      java.lang.Object ref = privateKey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        privateKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client's private key.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string private_key = 3;</code>
     * @param value The privateKey to set.
     * @return This builder for chaining.
     */
    public Builder setPrivateKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      privateKey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client's private key.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string private_key = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearPrivateKey() {
      
      privateKey_ = getDefaultInstance().getPrivateKey();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * REQUIRED if mode is `MUTUAL`. The path to the file holding the
     * client's private key.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string private_key = 3;</code>
     * @param value The bytes for privateKey to set.
     * @return This builder for chaining.
     */
    public Builder setPrivateKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      privateKey_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object caCertificates_ = "";
    /**
     * <pre>
     * OPTIONAL: The path to the file containing certificate authority
     * certificates to use in verifying a presented server certificate. If
     * omitted, the proxy will not verify the server's certificate.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string ca_certificates = 4;</code>
     * @return The caCertificates.
     */
    public java.lang.String getCaCertificates() {
      java.lang.Object ref = caCertificates_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        caCertificates_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * OPTIONAL: The path to the file containing certificate authority
     * certificates to use in verifying a presented server certificate. If
     * omitted, the proxy will not verify the server's certificate.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string ca_certificates = 4;</code>
     * @return The bytes for caCertificates.
     */
    public com.google.protobuf.ByteString
        getCaCertificatesBytes() {
      java.lang.Object ref = caCertificates_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        caCertificates_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * OPTIONAL: The path to the file containing certificate authority
     * certificates to use in verifying a presented server certificate. If
     * omitted, the proxy will not verify the server's certificate.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string ca_certificates = 4;</code>
     * @param value The caCertificates to set.
     * @return This builder for chaining.
     */
    public Builder setCaCertificates(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      caCertificates_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * OPTIONAL: The path to the file containing certificate authority
     * certificates to use in verifying a presented server certificate. If
     * omitted, the proxy will not verify the server's certificate.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string ca_certificates = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearCaCertificates() {
      
      caCertificates_ = getDefaultInstance().getCaCertificates();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * OPTIONAL: The path to the file containing certificate authority
     * certificates to use in verifying a presented server certificate. If
     * omitted, the proxy will not verify the server's certificate.
     * Should be empty if mode is `ISTIO_MUTUAL`.
     * </pre>
     *
     * <code>string ca_certificates = 4;</code>
     * @param value The bytes for caCertificates to set.
     * @return This builder for chaining.
     */
    public Builder setCaCertificatesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      caCertificates_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object credentialName_ = "";
    /**
     * <pre>
     * The name of the secret that holds the TLS certs for the
     * client including the CA certificates. Secret must exist in the
     * same namespace with the proxy using the certificates.
     * The secret (of type `generic`)should contain the
     * following keys and values: `key: &lt;privateKey&gt;`,
     * `cert: &lt;serverCert&gt;`, `cacert: &lt;CACertificate&gt;`.
     * Secret of type tls for client certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of client certificates and CA certificate
     * or credentialName can be specified.
     * **NOTE:** This field is currently applicable only at gateways.
     * Sidecars will continue to use the certificate paths.
     * </pre>
     *
     * <code>string credential_name = 7;</code>
     * @return The credentialName.
     */
    public java.lang.String getCredentialName() {
      java.lang.Object ref = credentialName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        credentialName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the secret that holds the TLS certs for the
     * client including the CA certificates. Secret must exist in the
     * same namespace with the proxy using the certificates.
     * The secret (of type `generic`)should contain the
     * following keys and values: `key: &lt;privateKey&gt;`,
     * `cert: &lt;serverCert&gt;`, `cacert: &lt;CACertificate&gt;`.
     * Secret of type tls for client certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of client certificates and CA certificate
     * or credentialName can be specified.
     * **NOTE:** This field is currently applicable only at gateways.
     * Sidecars will continue to use the certificate paths.
     * </pre>
     *
     * <code>string credential_name = 7;</code>
     * @return The bytes for credentialName.
     */
    public com.google.protobuf.ByteString
        getCredentialNameBytes() {
      java.lang.Object ref = credentialName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        credentialName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the secret that holds the TLS certs for the
     * client including the CA certificates. Secret must exist in the
     * same namespace with the proxy using the certificates.
     * The secret (of type `generic`)should contain the
     * following keys and values: `key: &lt;privateKey&gt;`,
     * `cert: &lt;serverCert&gt;`, `cacert: &lt;CACertificate&gt;`.
     * Secret of type tls for client certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of client certificates and CA certificate
     * or credentialName can be specified.
     * **NOTE:** This field is currently applicable only at gateways.
     * Sidecars will continue to use the certificate paths.
     * </pre>
     *
     * <code>string credential_name = 7;</code>
     * @param value The credentialName to set.
     * @return This builder for chaining.
     */
    public Builder setCredentialName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      credentialName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the secret that holds the TLS certs for the
     * client including the CA certificates. Secret must exist in the
     * same namespace with the proxy using the certificates.
     * The secret (of type `generic`)should contain the
     * following keys and values: `key: &lt;privateKey&gt;`,
     * `cert: &lt;serverCert&gt;`, `cacert: &lt;CACertificate&gt;`.
     * Secret of type tls for client certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of client certificates and CA certificate
     * or credentialName can be specified.
     * **NOTE:** This field is currently applicable only at gateways.
     * Sidecars will continue to use the certificate paths.
     * </pre>
     *
     * <code>string credential_name = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearCredentialName() {
      
      credentialName_ = getDefaultInstance().getCredentialName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the secret that holds the TLS certs for the
     * client including the CA certificates. Secret must exist in the
     * same namespace with the proxy using the certificates.
     * The secret (of type `generic`)should contain the
     * following keys and values: `key: &lt;privateKey&gt;`,
     * `cert: &lt;serverCert&gt;`, `cacert: &lt;CACertificate&gt;`.
     * Secret of type tls for client certificates along with
     * ca.crt key for CA certificates is also supported.
     * Only one of client certificates and CA certificate
     * or credentialName can be specified.
     * **NOTE:** This field is currently applicable only at gateways.
     * Sidecars will continue to use the certificate paths.
     * </pre>
     *
     * <code>string credential_name = 7;</code>
     * @param value The bytes for credentialName to set.
     * @return This builder for chaining.
     */
    public Builder setCredentialNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      credentialName_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList subjectAltNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureSubjectAltNamesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        subjectAltNames_ = new com.google.protobuf.LazyStringArrayList(subjectAltNames_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate. If specified, the proxy will verify that the server
     * certificate's subject alt name matches one of the specified values.
     * If specified, this list overrides the value of subject_alt_names
     * from the ServiceEntry.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 5;</code>
     * @return A list containing the subjectAltNames.
     */
    public com.google.protobuf.ProtocolStringList
        getSubjectAltNamesList() {
      return subjectAltNames_.getUnmodifiableView();
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate. If specified, the proxy will verify that the server
     * certificate's subject alt name matches one of the specified values.
     * If specified, this list overrides the value of subject_alt_names
     * from the ServiceEntry.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 5;</code>
     * @return The count of subjectAltNames.
     */
    public int getSubjectAltNamesCount() {
      return subjectAltNames_.size();
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate. If specified, the proxy will verify that the server
     * certificate's subject alt name matches one of the specified values.
     * If specified, this list overrides the value of subject_alt_names
     * from the ServiceEntry.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 5;</code>
     * @param index The index of the element to return.
     * @return The subjectAltNames at the given index.
     */
    public java.lang.String getSubjectAltNames(int index) {
      return subjectAltNames_.get(index);
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate. If specified, the proxy will verify that the server
     * certificate's subject alt name matches one of the specified values.
     * If specified, this list overrides the value of subject_alt_names
     * from the ServiceEntry.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 5;</code>
     * @param index The index of the value to return.
     * @return The bytes of the subjectAltNames at the given index.
     */
    public com.google.protobuf.ByteString
        getSubjectAltNamesBytes(int index) {
      return subjectAltNames_.getByteString(index);
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate. If specified, the proxy will verify that the server
     * certificate's subject alt name matches one of the specified values.
     * If specified, this list overrides the value of subject_alt_names
     * from the ServiceEntry.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 5;</code>
     * @param index The index to set the value at.
     * @param value The subjectAltNames to set.
     * @return This builder for chaining.
     */
    public Builder setSubjectAltNames(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureSubjectAltNamesIsMutable();
      subjectAltNames_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate. If specified, the proxy will verify that the server
     * certificate's subject alt name matches one of the specified values.
     * If specified, this list overrides the value of subject_alt_names
     * from the ServiceEntry.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 5;</code>
     * @param value The subjectAltNames to add.
     * @return This builder for chaining.
     */
    public Builder addSubjectAltNames(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureSubjectAltNamesIsMutable();
      subjectAltNames_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate. If specified, the proxy will verify that the server
     * certificate's subject alt name matches one of the specified values.
     * If specified, this list overrides the value of subject_alt_names
     * from the ServiceEntry.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 5;</code>
     * @param values The subjectAltNames to add.
     * @return This builder for chaining.
     */
    public Builder addAllSubjectAltNames(
        java.lang.Iterable<java.lang.String> values) {
      ensureSubjectAltNamesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, subjectAltNames_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate. If specified, the proxy will verify that the server
     * certificate's subject alt name matches one of the specified values.
     * If specified, this list overrides the value of subject_alt_names
     * from the ServiceEntry.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearSubjectAltNames() {
      subjectAltNames_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A list of alternate names to verify the subject identity in the
     * certificate. If specified, the proxy will verify that the server
     * certificate's subject alt name matches one of the specified values.
     * If specified, this list overrides the value of subject_alt_names
     * from the ServiceEntry.
     * </pre>
     *
     * <code>repeated string subject_alt_names = 5;</code>
     * @param value The bytes of the subjectAltNames to add.
     * @return This builder for chaining.
     */
    public Builder addSubjectAltNamesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureSubjectAltNamesIsMutable();
      subjectAltNames_.add(value);
      onChanged();
      return this;
    }

    private java.lang.Object sni_ = "";
    /**
     * <pre>
     * SNI string to present to the server during TLS handshake.
     * </pre>
     *
     * <code>string sni = 6;</code>
     * @return The sni.
     */
    public java.lang.String getSni() {
      java.lang.Object ref = sni_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sni_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * SNI string to present to the server during TLS handshake.
     * </pre>
     *
     * <code>string sni = 6;</code>
     * @return The bytes for sni.
     */
    public com.google.protobuf.ByteString
        getSniBytes() {
      java.lang.Object ref = sni_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sni_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * SNI string to present to the server during TLS handshake.
     * </pre>
     *
     * <code>string sni = 6;</code>
     * @param value The sni to set.
     * @return This builder for chaining.
     */
    public Builder setSni(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sni_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * SNI string to present to the server during TLS handshake.
     * </pre>
     *
     * <code>string sni = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearSni() {
      
      sni_ = getDefaultInstance().getSni();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * SNI string to present to the server during TLS handshake.
     * </pre>
     *
     * <code>string sni = 6;</code>
     * @param value The bytes for sni to set.
     * @return This builder for chaining.
     */
    public Builder setSniBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      sni_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:istio.networking.v1alpha3.ClientTLSSettings)
  }

  // @@protoc_insertion_point(class_scope:istio.networking.v1alpha3.ClientTLSSettings)
  private static final io.ourea.adapter.model.istio.ClientTLSSettings DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.ourea.adapter.model.istio.ClientTLSSettings();
  }

  public static io.ourea.adapter.model.istio.ClientTLSSettings getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ClientTLSSettings>
      PARSER = new com.google.protobuf.AbstractParser<ClientTLSSettings>() {
    @java.lang.Override
    public ClientTLSSettings parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ClientTLSSettings(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ClientTLSSettings> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ClientTLSSettings> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.ourea.adapter.model.istio.ClientTLSSettings getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

